{"version":3,"file":"question-D9n9-AV9.js","sources":["../../src/fibonacci-primarie/2023-seconda-fase/contest/p-2-balle-di-fieno/code.asy","../../src/fibonacci-primarie/2023-seconda-fase/contest/p-2-balle-di-fieno/opzioni.asy","../../src/fibonacci-primarie/2023-seconda-fase/contest/p-2-balle-di-fieno/primarie.asy","../../src/fibonacci-primarie/2023-seconda-fase/contest/p-2-balle-di-fieno/secondarie.asy","../../src/fibonacci-primarie/2023-seconda-fase/contest/p-2-balle-di-fieno/question.md","../../src/fibonacci-primarie/2023-seconda-fase/contest/p-3-pile-di-carote/code.asy","../../src/fibonacci-primarie/2023-seconda-fase/contest/p-3-pile-di-carote/primarie.asy","../../src/fibonacci-primarie/2023-seconda-fase/contest/p-3-pile-di-carote/secondarie.asy","../../src/fibonacci-primarie/2023-seconda-fase/contest/p-3-pile-di-carote/question.md","../../src/fibonacci-primarie/2023-seconda-fase/contest/s-2-gara-salto/sol.png","../../src/fibonacci-primarie/2023-seconda-fase/contest/s-2-gara-salto/primarie.asy","../../src/fibonacci-primarie/2023-seconda-fase/contest/s-2-gara-salto/secondarie.asy","../../src/fibonacci-primarie/2023-seconda-fase/contest/s-2-gara-salto/testcases.py","../../src/fibonacci-primarie/2023-seconda-fase/contest/s-2-gara-salto/asy/bunny.asy?w=40","../../src/fibonacci-primarie/2023-seconda-fase/contest/s-2-gara-salto/asy/carrot.asy?w=25","../../src/fibonacci-primarie/2023-seconda-fase/contest/s-2-gara-salto/asy/hay.asy?w=60","../../src/fibonacci-primarie/2023-seconda-fase/contest/s-2-gara-salto/visualizer.jsx","../../src/fibonacci-primarie/2023-seconda-fase/contest/s-2-gara-salto/question.mdx","../../src/fibonacci-primarie/2023-seconda-fase/contest/s-3-squadre-basket/asy/fig.asy","../../src/fibonacci-primarie/2023-seconda-fase/contest/s-3-squadre-basket/sol.png","../../src/fibonacci-primarie/2023-seconda-fase/contest/s-3-squadre-basket/primarie.asy","../../src/fibonacci-primarie/2023-seconda-fase/contest/s-3-squadre-basket/secondarie.asy","../../src/fibonacci-primarie/2023-seconda-fase/contest/s-3-squadre-basket/testcases.py","../../src/fibonacci-primarie/2023-seconda-fase/contest/s-3-squadre-basket/asy/bunny.asy?w=66","../../src/fibonacci-primarie/2023-seconda-fase/contest/s-3-squadre-basket/asy/ball.asy?w=35","../../src/fibonacci-primarie/2023-seconda-fase/contest/s-3-squadre-basket/asy/fibonacci.asy?h=100","../../src/fibonacci-primarie/2023-seconda-fase/contest/s-3-squadre-basket/asy/turing.asy?h=100","../../src/fibonacci-primarie/2023-seconda-fase/contest/s-3-squadre-basket/visualizer.jsx","../../src/fibonacci-primarie/2023-seconda-fase/contest/s-3-squadre-basket/question.mdx"],"sourcesContent":["import \"/scolastiche/src/asy_library/structures/layout.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_D6et_7ER,\n  width: \"1277.3333333333333\",\n  height: \"866.6666666666666\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/structures/layout.asy?url\";\nimport \"/scolastiche/src/asy_library/pictures/hay_cube.asy?url\";\nimport \"/scolastiche/src/asy_library/pictures/bunny_polychrome.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_B3SqRhoK,\n  width: \"1104\",\n  height: \"1342.6666666666665\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/structures/histogram.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_q76xXsDD,\n  width: \"305.3333333333333\",\n  height: \"250.66666666666666\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/structures/histogram.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_EDqCw58X,\n  width: \"305.3333333333333\",\n  height: \"248\",\n};\nexport default image;","Bunny è all’ingresso del fienile della fattoria Fibonacci, e davanti a lui ci sono $9$ pile di balle di fieno numerate con i numeri da $1$ a $9$. Ogni pila è formata da un numero variabile di balle di fieno. Bunny vuole giocare spostandosi da una pila all'altra, partendo dalla pila $1$ e seguendo questo procedimento:\n\n![code](code.asy)\n\nIn quali di queste situazioni Bunny riesce ad uscire dal fienile?\n\n![opzione1](opzioni.asy)\n\nRisposte:\n- [ ] nessuna\n- [ ] tutte\n- [ ] solo la 1\n- [x] la 1 e la 2\n- [ ] la 1 e la 3\n\n> Bunny riesce ad uscire dal fienile nell'opzione 1 e nella 2.\n> \n> _Nell'opzione 1, inizia dalla pila 1, poi salta di due in due fino alla pila 9._\n>\n> _Nell'opzione 2, inizia dalla pila 1, salta sulla 3, indietreggia sulla due, salta sulla 4, salta sulla 6, indietreggia sulla 5, salta sulla 7 e finisce sulla 9._\n>\n> _Nell'opzione 3, Bunny non riesce ad uscire perchè rimane bloccato saltando in circolo tra le pile 3, 4, 5 senza mai smettere._\n>\n> ![primarie](primarie.asy) ![secondarie](secondarie.asy)","import \"/scolastiche/src/asy_library/structures/layout.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_Bx7EM2oH,\n  width: \"1560\",\n  height: \"1296\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/structures/histogram.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_DAJaN7Qx,\n  width: \"305.3333333333333\",\n  height: \"250.66666666666666\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/structures/histogram.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_Z4bMlS9H,\n  width: \"305.3333333333333\",\n  height: \"248\",\n};\nexport default image;","I conigli della fattoria Fibonacci hanno preparato due enormi mucchi di carote.\nAll'inizio il mucchio sinistro contiene 2024 carote, mentre il mucchio destro ne contiene 3024.\nBunny, Tip-Tap e Carol le mangiano seguendo questo procedimento:\n\n![code](code.asy)\n\nQuante carote mangia Carol?\n- [ ] 0\n- [ ] 1\n- [ ] 2\n- [ ] 4\n- [x] 8\n\n> Si può notare che ad ogni passaggio della ripetizione, indipendentemente da quale mucchio\n> abbia più carote, Tip-Tap e Bunny in totale mangiano $10$ carote.\n> Visto che all'inizio ci sono $2024 + 3024 = 5048$ carote, i due conigli andranno avanti\n> a mangiare $10$ carote per volta fino a quando rimarranno $8$ carote tra i due mucchi.\n> A quel punto tutte le carote rimaste le mangerà Carol!\n>\n> **Approfondimento:** visto che la condizione che termina la ripetizione chiede solo che\n> una delle due pile contenga meno di $7$ carote, si potrebbe pensare che alla fine potrebbero\n> rimanere più carote per Carol, come $18$, $28$, $38$, eccetera. Questo però non è possibile!\n> \n> Infatti, si può notare che ogni volta Tip-Tap e Bunny mangiano più carote dalla pila più grande\n> e meno dalla pila più piccola. Questo porta a ridurre la differenza tra le due pile, finché\n> la differenza non è **al massimo 3**. Da quel punto in poi la differenza tra le due pila rimarrà\n> sempre al massimo 3, e quindi quando una pila arriva ad avere meno di $7$ carote (quindi al massimo\n> $6$), l'altra pila non può avere più di $6 + 3 = 9$ carote, per un totale di al massimo $9 + 6 = 15$\n> carote, che è meno di $18$.\n>\n> ![primarie](primarie.asy) ![secondarie](secondarie.asy)","\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_Disr8PKA,\n  width: \"1278\",\n  height: \"1090\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/structures/histogram.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_C2B9snzy,\n  width: \"305.3333333333333\",\n  height: \"250.66666666666666\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/structures/histogram.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_D7PQHxcJ,\n  width: \"305.3333333333333\",\n  height: \"248\",\n};\nexport default image;","const module = [{\"N\":6,\"H\":[1,2,4,6,7,10],\"C\":[0,0,0,0,0,0],\"sol\":[1,0,1,0,0,2],\"carrots\":[],\"pos\":-1},{\"N\":20,\"H\":[1,2,4,5,8,6,10,4,9,3,5,3,2,9,5,9,10,3,5,13],\"C\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"sol\":[1,0,1,0,1,0,1,0,1,0,0,0,0,1,0,0,0,0,0,2],\"carrots\":[],\"pos\":-1},{\"N\":50,\"H\":[1,2,3,4,2,4,6,6,8,4,7,8,8,9,5,1,5,1,2,6,1,6,8,6,4,6,2,4,10,4,4,3,9,8,2,2,6,9,8,2,5,9,5,2,9,6,9,4,10,9],\"C\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"sol\":[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0],\"carrots\":[],\"pos\":-1}];\nexport default module;","import \"/scolastiche/src/asy_library/pictures/bunny_polychrome.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_CdW3hNOo,\n  width: \"40\",\n  height: \"70.44776119402984\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/pictures/carrot.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_gXlOR0eN,\n  width: \"25\",\n  height: \"25\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/pictures/hay_tied.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_CCHjUwwQ,\n  width: \"60\",\n  height: \"37.19298245614034\",\n};\nexport default image;","import React from \"react\";\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=40\";\nimport carrot from \"./asy/carrot.asy?w=25\";\nimport hay from \"./asy/hay.asy?w=60\";\n\nexport default function Visualizer({ variables }) {\n  const { blocklyVariables, hiddenState } = variables;\n  if (!hiddenState) return;\n\n  return (\n    <>\n      <Canvas gravity=\"bottom\" scale={10}>\n        {range(hiddenState.N).flatMap((i) => {\n          return range(hiddenState.H[i]).map((h) => (\n            <Sprite key={`hay-${i}-${h}`} src={hay} alt=\"Fieno\" x={1.5 + i * 6} y={h * 2.8} />\n          ));\n        })}\n        <Sprite src={bunny} alt=\"Carol\" x={3 + hiddenState.pos * 6} y={-1} follow />\n        <Sprite src={carrot} alt=\"Carota\" x={5 + hiddenState.pos * 6} y={-0.1} />\n        {range(hiddenState.carrots.length + 2).map((i) => {\n          let x = 5 + hiddenState.pos * 6;\n          let y = -0.1;\n          if (i < hiddenState.carrots.length) {\n            const col = hiddenState.carrots[i] - 1;\n            x = 3.5 + col * 6 + (i % 3) * 0.5;\n            y = -0.3 + hiddenState.H[col] * 2.8;\n          }\n          return <Sprite key={i} src={carrot} alt=\"Carota\" x={x} y={y} />;\n        })}\n      </Canvas>\n      <Variables variables={{ ...blocklyVariables, pile: hiddenState.N }} />\n    </>\n  );\n}\n","import initialBlocks from \"./initialBlocks.json\";\nimport customBlocks from \"./customBlocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nCarol sta organizzando una gara di salto nel fienile della fattoria Fibonacci!\n\nIl fienile ha $N$ **pile** di balle di fieno, l'$i$-esima delle quali composta da $H_i$ balle di fieno.\nLa gara partirà dall'ingresso del fienile a sinistra, prima di tutte le pile. Da lì i conigli dovranno\nsaltare sulla prima pila $i = 1$, e poi via via sulle successive, fino ad arrivare all'ultima pila e\nsaltare fuori dal fienile a destra.\n\nI conigli non fanno fatica a saltare in piano o in basso, ma saltare verso l'alto non è facile!\nQuindi, Carol vuole mettere una carota come premio su **ogni** pila di balle di fieno che richiede\nun salto **maggiore** di tutti i salti fatti prima per arrivare fino a lì. Inoltre, vuole mettere\nuna seconda carota sul salto più alto di tutti del percorso. Carol può fare queste cose:\n- `altezza della pila i`: guarda quante balle di fieno $H_i$ ci sono nella pila $i$-esima.\n- `aggiungi carota alla pila i`: aggiungi una carota in cima all'$i$-esima pila.\n- `termina`: smetti di aggiungere carote e fai partire la gara.\n\nAiuta Carol a preparare il fienile per la gara di salto!\n\n<Blockly\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  debug={{ logBlocks: false, logJs: false, logVariables: false }}\n  Visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Questo programma, mette subito una carota sulla prima pila, che richiede il primo salto: il primo\n> salto è sempre maggiore degli _zero_ salti fatti prima! Il programma poi ricorda che il massimo\n> salto finora (_maxsalto_) è alto come la prima pila, ed è stato fatto nella pila $1$ (_dovesalto_).\n>\n> A questo punto, il programma itera su tutte le altre pile, dalla seconda alla fine.\n> Per ciascuna di queste, calcola quanto è grande il _salto_ che serve per arrivare all'$i$-esima pila.\n> Se questo salto è maggiore del massimo salto finora, allora va ad aggiungere una carota e lo\n> memorizza in _maxsalto_ e _dovesalto_.\n> \n> Una volta terminato di scorrere tutte le pile, Carol torna all'ultima pila a cui ha aggiunto una\n> carota (_dovesalto_) e ci aggiunge la seconda carota.\n>\n> ![primarie](primarie.asy) ![secondarie](secondarie.asy)\n","import \"/scolastiche/src/asy_library/structures/layout.asy?url\";\nimport \"/scolastiche/src/asy_library/pictures/bunny_monochrome.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_DGK_foux,\n  width: \"452\",\n  height: \"493.3333333333333\",\n};\nexport default image;","\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_DFc7CECU,\n  width: \"1315\",\n  height: \"988\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/structures/histogram.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_BnZpcJjj,\n  width: \"305.3333333333333\",\n  height: \"250.66666666666666\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/structures/histogram.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_jjW5OrQb,\n  width: \"305.3333333333333\",\n  height: \"248\",\n};\nexport default image;","const module = [{\"data\":[{\"H\":[23,26,26,26,29,29,32,35,35],\"pos\":0,\"presi\":[],\"scartati\":[],\"scelta\":[]},{\"H\":[23,23,29,32,35,38,38],\"pos\":0,\"presi\":[],\"scartati\":[],\"scelta\":[]}],\"sol\":4},{\"data\":[{\"H\":[22,23,25,26,27,28,29,30,31,34,35,36,37,39,40],\"pos\":0,\"presi\":[],\"scartati\":[],\"scelta\":[]},{\"H\":[20,21,22,23,24,25,26,27,28,29,31,32,34,36,37,38,40],\"pos\":0,\"presi\":[],\"scartati\":[],\"scelta\":[]}],\"sol\":12},{\"data\":[{\"H\":[20,20,20,21,21,21,21,22,22,22,23,23,23,24,24,24,25,25,25,25,26,26,26,26,26,26,27,27,28,30,30,30,31,31,32,33,34,34,34,34,34,34,36,36,37,37,37,37,38,39,40,40,40,40],\"pos\":0,\"presi\":[],\"scartati\":[],\"scelta\":[]},{\"H\":[20,20,20,20,20,20,21,22,22,22,22,23,23,23,23,24,24,24,25,25,26,27,27,27,27,28,28,30,31,32,32,32,33,33,34,34,34,34,35,36,36,37,37,37,39,39,39,40,40,40,40],\"pos\":0,\"presi\":[],\"scartati\":[],\"scelta\":[]}],\"sol\":37}];\nexport default module;","import \"/scolastiche/src/asy_library/pictures/bunny_polychrome.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_8z1oGMJD,\n  width: \"66\",\n  height: \"116.23880597014924\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/pictures/basket_ball.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_BBvxuJ7g,\n  width: \"35\",\n  height: \"35\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/pictures/bunny_monochrome.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_DmmJyBPM,\n  width: \"63.829787234042556\",\n  height: \"100\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/pictures/bunny_monochrome.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_BJb2w1rl,\n  width: \"63.829787234042556\",\n  height: \"100\",\n};\nexport default image;","import React from \"react\";\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=66\";\nimport ball from \"./asy/ball.asy?w=35\";\nimport fibonacci from \"./asy/fibonacci.asy?h=100\";\nimport turing from \"./asy/turing.asy?h=100\";\n\nexport default function Visualizer({ variables }) {\n  const { blocklyVariables, hiddenState } = variables;\n  if (!hiddenState) return;\n\n  const teams = [fibonacci, turing];\n\n  return (\n    <>\n      <Canvas gravity=\"bottom\" scale={10}>\n        <Sprite src={bunny} alt=\"Bunny\" x={20} y={19.5} follow />\n        <Sprite src={ball} alt=\"Pallone\" x={23.5} y={20.5} />\n        {range(2).flatMap((i) => {\n          const len = hiddenState.data[i].H.length;\n          return range(i * (len - 1), (len + 1) * (1 - i) - 1, 1 - 2 * i).map((k) => {\n            const h = hiddenState.data[i].H[k] / 28;\n            let x = 26 + (k - hiddenState.data[i].pos) * 5;\n            let y = 30 - 23 * i + (h - 1) * 5;\n            if (k < hiddenState.data[i].pos) {\n              if (hiddenState.data[i].scelta[k] > 0) {\n                x = 14 + (hiddenState.data[i].scelta[k] - hiddenState.data[i].presi.length) * 5;\n              } else {\n                x = 21 - hiddenState.data[i].scelta[k] * 3;\n                y += 10 * (1 - 2 * i);\n              }\n            }\n            return <Sprite key={`player-${i}-${k}`} src={teams[i]} alt=\"Giocatore\" x={x} y={y} height={h} />;\n          });\n        })}\n      </Canvas>\n      <Variables\n        variables={{\n          ...blocklyVariables,\n          Fibonacci: hiddenState.data[0].H.length - hiddenState.data[0].pos,\n          Turing: hiddenState.data[1].H.length - hiddenState.data[1].pos,\n        }}\n      />\n    </>\n  );\n}\n","import initialBlocks from \"./initialBlocks.json\";\nimport customBlocks from \"./customBlocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nBunny deve selezionare due squadre di basket da **più giocatori possibile** per la sfida tra la fattoria Fibonacci e la fattoria Turing!\nPer fare una partita bilanciata, vuole che le due squadre siano composte da uno stesso numero di giocatori della stessa altezza, come in questo caso:\n\n![esempio](asy/fig.asy)\n\nBunny ha quindi messo in fila, in ordine crescente di altezza, i conigli di entrambe le fattorie.\nOra può fare queste operazioni:\n- `fine della fila Fibonacci`: condizione vera se la fila della fattoria Fibonacci è terminata.\n- `fine della fila Turing`: condizione vera se la fila della fattoria Turing è terminata.\n- `altezza primo della fila Fibonacci`: l'altezza del primo coniglio nella fila della fattoria Fibonacci.\n- `altezza primo della fila Turing`: l'altezza del primo coniglio nella fila della fattoria Turing.\n- `prendi dalla fila Fibonacci`: prendi il prossimo coniglio dalla fila della fattoria Fibonacci.\n- `prendi dalla fila Turing`: prendi il prossimo coniglio dalla fila della fattoria Turing.\n- `scarta dalla fila Fibonacci`: scarta il prossimo coniglio dalla fila della fattoria Fibonacci.\n- `scarta dalla fila Turing`: scarta il prossimo coniglio dalla fila della fattoria Turing.\n- `termina`: completa le squadre e inizia la partita a basket.\n\nAiuta Bunny a fare le squadre per la partita!\n\n<Blockly\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  debug={{ logBlocks: false, logJs: false, logVariables: false }}\n  Visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Questo programma procede a selezionare i conigli fino a che una delle due file non si svuota.\n> Se i due primi della fila hanno la stessa altezza, è possibile prenderli entrambi per\n> ingrandire la squadra. Se non hanno la stessa altezza Bunny scarta il più basso dei due,\n> visto che non ha più speranze di trovare un avversario della stessa altezza nell'altra fila.\n>\n> ![primarie](primarie.asy) ![secondarie](secondarie.asy)\n"],"names":["image","_jsx","MathExpr","_jsxs","_components","module","Visualizer","variables","blocklyVariables","hiddenState","_Fragment","Canvas","gravity","scale","range","N","flatMap","i","H","map","h","Sprite","src","hay","alt","x","y","bunny","pos","follow","carrot","carrots","length","col","Variables","pile","children","strong","span","customBlocks","initialBlocks","testcases","logBlocks","logJs","logVariables","em","teams","fibonacci","turing","ball","len","data","k","scelta","presi","height","Fibonacci","Turing"],"mappings":"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"}