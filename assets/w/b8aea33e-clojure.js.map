{"version":3,"file":"b8aea33e-clojure.js","sources":["../../../node_modules/shiki/dist/langs/clojure.mjs"],"sourcesContent":["const lang = Object.freeze({ \"displayName\": \"Clojure\", \"name\": \"clojure\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#shebang-comment\" }, { \"include\": \"#quoted-sexp\" }, { \"include\": \"#sexp\" }, { \"include\": \"#keyfn\" }, { \"include\": \"#string\" }, { \"include\": \"#vector\" }, { \"include\": \"#set\" }, { \"include\": \"#map\" }, { \"include\": \"#regexp\" }, { \"include\": \"#var\" }, { \"include\": \"#constants\" }, { \"include\": \"#dynamic-variables\" }, { \"include\": \"#metadata\" }, { \"include\": \"#namespace-symbol\" }, { \"include\": \"#symbol\" }], \"repository\": { \"comment\": { \"begin\": \"(?<!\\\\\\\\);\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.comment.clojure\" } }, \"end\": \"$\", \"name\": \"comment.line.semicolon.clojure\" }, \"constants\": { \"patterns\": [{ \"match\": \"(nil)(?=(\\\\s|\\\\)|\\\\]|\\\\}))\", \"name\": \"constant.language.nil.clojure\" }, { \"match\": \"(true|false)\", \"name\": \"constant.language.boolean.clojure\" }, { \"match\": \"(##(?:Inf|-Inf|NaN))\", \"name\": \"constant.numeric.symbol.clojure\" }, { \"match\": \"([-+]?\\\\d+/\\\\d+)\", \"name\": \"constant.numeric.ratio.clojure\" }, { \"match\": \"([-+]?(?:(?:3[0-6])|(?:[12]\\\\d)|[2-9])[rR][0-9A-Za-z]+N?)\", \"name\": \"constant.numeric.arbitrary-radix.clojure\" }, { \"match\": \"([-+]?0[xX][0-9a-fA-F]+N?)\", \"name\": \"constant.numeric.hexadecimal.clojure\" }, { \"match\": \"([-+]?0[0-7]+N?)\", \"name\": \"constant.numeric.octal.clojure\" }, { \"match\": \"([-+]?\\\\d+(?:(\\\\.|(?=[eEM]))\\\\d*([eE][-+]?\\\\d+)?)M?)\", \"name\": \"constant.numeric.double.clojure\" }, { \"match\": \"([-+]?\\\\d+N?)\", \"name\": \"constant.numeric.long.clojure\" }, { \"include\": \"#keyword\" }] }, \"dynamic-variables\": { \"match\": \"\\\\*[\\\\w\\\\.\\\\-_:+=><!?\\\\d]+\\\\*\", \"name\": \"meta.symbol.dynamic.clojure\" }, \"keyfn\": { \"patterns\": [{ \"match\": \"(?<=(\\\\s|\\\\(|\\\\[|\\\\{))(if(-[-\\\\p{Ll}?]*)?|when(-[-\\\\p{Ll}]*)?|for(-[-\\\\p{Ll}]*)?|cond|do|let(-[-\\\\p{Ll}?]*)?|binding|loop|recur|fn|throw[\\\\p{Ll}\\\\-]*|try|catch|finally|([\\\\p{Ll}]*case))(?=(\\\\s|\\\\)|\\\\]|\\\\}))\", \"name\": \"storage.control.clojure\" }, { \"match\": \"(?<=(\\\\s|\\\\(|\\\\[|\\\\{))(declare-?|(in-)?ns|import|use|require|load|compile|(def[\\\\p{Ll}\\\\-]*))(?=(\\\\s|\\\\)|\\\\]|\\\\}))\", \"name\": \"keyword.control.clojure\" }] }, \"keyword\": { \"match\": \"(?<=(\\\\s|\\\\(|\\\\[|\\\\{)):[\\\\w#\\\\.\\\\-_:+=><\\\\/!?\\\\*]+(?=(\\\\s|\\\\)|\\\\]|\\\\}|\\\\,))\", \"name\": \"constant.keyword.clojure\" }, \"map\": { \"begin\": \"(\\\\{)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.section.map.begin.clojure\" } }, \"end\": \"(\\\\}(?=[}\\\\])\\\\s]*(?:;|$)))|(\\\\})\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.section.map.end.trailing.clojure\" }, \"2\": { \"name\": \"punctuation.section.map.end.clojure\" } }, \"name\": \"meta.map.clojure\", \"patterns\": [{ \"include\": \"$self\" }] }, \"metadata\": { \"patterns\": [{ \"begin\": \"(\\\\^\\\\{)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.section.metadata.map.begin.clojure\" } }, \"end\": \"(\\\\}(?=[}\\\\])\\\\s]*(?:;|$)))|(\\\\})\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.section.metadata.map.end.trailing.clojure\" }, \"2\": { \"name\": \"punctuation.section.metadata.map.end.clojure\" } }, \"name\": \"meta.metadata.map.clojure\", \"patterns\": [{ \"include\": \"$self\" }] }, { \"begin\": \"(\\\\^)\", \"end\": \"(\\\\s)\", \"name\": \"meta.metadata.simple.clojure\", \"patterns\": [{ \"include\": \"#keyword\" }, { \"include\": \"$self\" }] }] }, \"namespace-symbol\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"meta.symbol.namespace.clojure\" } }, \"match\": \"([\\\\p{L}\\\\.\\\\-_+=><!?\\\\*][\\\\w\\\\.\\\\-_:+=><!?\\\\*\\\\d]*)/\" }] }, \"quoted-sexp\": { \"begin\": \"(['``]\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.section.expression.begin.clojure\" } }, \"end\": \"(\\\\))$|(\\\\)(?=[}\\\\])\\\\s]*(?:;|$)))|(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.section.expression.end.trailing.clojure\" }, \"2\": { \"name\": \"punctuation.section.expression.end.trailing.clojure\" }, \"3\": { \"name\": \"punctuation.section.expression.end.clojure\" } }, \"name\": \"meta.quoted-expression.clojure\", \"patterns\": [{ \"include\": \"$self\" }] }, \"regexp\": { \"begin\": '#\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.regexp.begin.clojure\" } }, \"end\": '\"', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.regexp.end.clojure\" } }, \"name\": \"string.regexp.clojure\", \"patterns\": [{ \"include\": \"#regexp_escaped_char\" }] }, \"regexp_escaped_char\": { \"match\": \"\\\\\\\\.\", \"name\": \"constant.character.escape.clojure\" }, \"set\": { \"begin\": \"(\\\\#\\\\{)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.section.set.begin.clojure\" } }, \"end\": \"(\\\\}(?=[}\\\\])\\\\s]*(?:;|$)))|(\\\\})\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.section.set.end.trailing.clojure\" }, \"2\": { \"name\": \"punctuation.section.set.end.clojure\" } }, \"name\": \"meta.set.clojure\", \"patterns\": [{ \"include\": \"$self\" }] }, \"sexp\": { \"begin\": \"(\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.section.expression.begin.clojure\" } }, \"end\": \"(\\\\))$|(\\\\)(?=[}\\\\])\\\\s]*(?:;|$)))|(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.section.expression.end.trailing.clojure\" }, \"2\": { \"name\": \"punctuation.section.expression.end.trailing.clojure\" }, \"3\": { \"name\": \"punctuation.section.expression.end.clojure\" } }, \"name\": \"meta.expression.clojure\", \"patterns\": [{ \"begin\": \"(?<=\\\\()(ns|declare|def[\\\\w\\\\d._:+=><!?*-]*|[\\\\w._:+=><!?*-][\\\\w\\\\d._:+=><!?*-]*/def[\\\\w\\\\d._:+=><!?*-]*)\\\\s+\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.clojure\" } }, \"end\": \"(?=\\\\))\", \"name\": \"meta.definition.global.clojure\", \"patterns\": [{ \"include\": \"#metadata\" }, { \"include\": \"#dynamic-variables\" }, { \"match\": \"([\\\\p{L}\\\\.\\\\-_+=><!?\\\\*][\\\\w\\\\.\\\\-_:+=><!?\\\\*\\\\d]*)\", \"name\": \"entity.global.clojure\" }, { \"include\": \"$self\" }] }, { \"include\": \"#keyfn\" }, { \"include\": \"#constants\" }, { \"include\": \"#vector\" }, { \"include\": \"#map\" }, { \"include\": \"#set\" }, { \"include\": \"#sexp\" }, { \"captures\": { \"1\": { \"name\": \"entity.name.function.clojure\" } }, \"match\": \"(?<=\\\\()(.+?)(?=\\\\s|\\\\))\", \"patterns\": [{ \"include\": \"$self\" }] }, { \"include\": \"$self\" }] }, \"shebang-comment\": { \"begin\": \"^(#!)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.definition.comment.shebang.clojure\" } }, \"end\": \"$\", \"name\": \"comment.line.shebang.clojure\" }, \"string\": { \"begin\": '(?<!\\\\\\\\)(\")', \"beginCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.begin.clojure\" } }, \"end\": '(\")', \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.clojure\" } }, \"name\": \"string.quoted.double.clojure\", \"patterns\": [{ \"match\": \"\\\\\\\\.\", \"name\": \"constant.character.escape.clojure\" }] }, \"symbol\": { \"patterns\": [{ \"match\": \"([\\\\p{L}\\\\.\\\\-_+=><!?\\\\*][\\\\w\\\\.\\\\-_:+=><!?\\\\*\\\\d]*)\", \"name\": \"meta.symbol.clojure\" }] }, \"var\": { \"match\": \"(?<=(\\\\s|\\\\(|\\\\[|\\\\{)\\\\#)'[\\\\w\\\\.\\\\-_:+=><\\\\/!?\\\\*]+(?=(\\\\s|\\\\)|\\\\]|\\\\}))\", \"name\": \"meta.var.clojure\" }, \"vector\": { \"begin\": \"(\\\\[)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.section.vector.begin.clojure\" } }, \"end\": \"(\\\\](?=[}\\\\])\\\\s]*(?:;|$)))|(\\\\])\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.section.vector.end.trailing.clojure\" }, \"2\": { \"name\": \"punctuation.section.vector.end.clojure\" } }, \"name\": \"meta.vector.clojure\", \"patterns\": [{ \"include\": \"$self\" }] } }, \"scopeName\": \"source.clojure\", \"aliases\": [\"clj\"] });\nvar clojure = [\n  lang\n];\n\nexport { clojure as default };\n"],"names":["lang","clojure"],"mappings":"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","x_google_ignoreList":[0]}