{"version":3,"file":"question-CiGV3k7o.js","sources":["../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/p-2-condizioni/code.asy","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/p-2-condizioni/question.md","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/p-3-mediana/code.asy","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/p-3-mediana/opz1.asy","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/p-3-mediana/opz2.asy","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/p-3-mediana/opz3.asy","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/p-3-mediana/opz4.asy","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/p-3-mediana/question.md","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/s-2-alza-torre/sol.png","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/s-2-alza-torre/testcases.py","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/s-2-alza-torre/asy/bunny.asy?w=66","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/s-2-alza-torre/asy/stairs.asy?w=80","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/s-2-alza-torre/visualizer.jsx","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/s-2-alza-torre/question.mdx","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/s-3-gira-ruota/sol.png","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/s-3-gira-ruota/testcases.py","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/s-3-gira-ruota/asy/bunny.asy?w=45","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/s-3-gira-ruota/visualizer.jsx","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/s-3-gira-ruota/question.mdx"],"sourcesContent":["import \"/scolastiche/src/asy_library/structures/layout.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_BhG1ceeS,\n  width: \"1426.6666666666665\",\n  height: \"1126.6666666666665\",\n};\nexport default image;","Considera questo procedimento, che usa le tre **variabili** numeriche di nome $A$, $B$ e $C$.\n\n![code](code.asy)\n\nQuesto programma viene eseguito due volte:\n\n- La prima volta impostando $A$ a $7$, $B$ a $4$, e $C$ a $6$.\n- La seconda volta impostando invece $A$ a $5$, $B$ a $7$, e $C$ a $9$.\n\nQuali numeri stampa il procedimento?\n\n- [x] 7 e 9\n- [ ] 6 e 9\n- [ ] 7 e 7\n- [ ] 5 e 7\n- [ ] 4 e 5\n\n> Il procedimento ogni volta stampa il numero più grande tra $A$, $B$ e $C$.\n>\n> La prima volta che viene eseguito il programma, $A$ è più grande di $B$, si controlla quindi se $A$ è più grande di $C$. Essendo $A$ più grande di $C$, il programma scrive il valore di $A$, che è $7$.\n>\n> La seconda volta, $A$ è più piccolo di $B$, si controlla quindi se $B$ è più grande di $C$, ma $B$ è più piccolo di $C$. Il programma scrive quindi il valore di $C$, che è $9$.\n","import \"/scolastiche/src/asy_library/structures/layout.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_75pa65rr,\n  width: \"660\",\n  height: \"768\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/structures/layout.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_CMFXPqF9,\n  width: \"660\",\n  height: \"280\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/structures/layout.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_BRvdPNpz,\n  width: \"658.6666666666666\",\n  height: \"280\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/structures/layout.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_BbiNdajW,\n  width: \"625.3333333333333\",\n  height: \"118.66666666666666\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/structures/layout.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_D1A0kqnP,\n  width: \"660\",\n  height: \"280\",\n};\nexport default image;","Considera questo procedimento, che si riferisce alle tre **variabili** numeriche $A$, $B$ e $C$:\n\n![code](code.asy)\n\nQuesto procedimento dovrebbe stampare la _mediana_ tra le tre variabili, ovvero il valore di mezzo tra i tre. Ad esempio, la mediana di $5$, $3$ e $10$ è $5$, e la mediana di $4$, $1$ e $1$ è $1$. Tuttavia, mancano dei blocchi per completare il procedimento!\n\nQuale delle seguenti può essere la parte mancante, da sostituire al blocco indicato con **???**, affinché il procedimento stampi sempre la mediana?\n\n- [x] ![opzione1](opz1.asy)\n- [ ] ![opzione2](opz2.asy)\n- [ ] ![opzione3](opz3.asy)\n- [ ] ![opzione4](opz4.asy)\n- [ ] Il procedimento è già completo, non servono altri blocchi\n\n> La risposta è\n>\n> ![opzione1](opz1.asy)\n>\n> Vediamo cosa fa il procedimento dopo averlo completato nel modo proposto.\n>\n> 1. Per prima cosa, le due variabili $A$ e $B$ vengono ordinate, scambiandone i valori se necessario.\n> 2. A questo punto, $B$ e $C$ vengono ordinate. In questo momento, $C$ contiene il massimo dei tre valori iniziali.\n> 3. Per finire, $A$ e $B$ vengono nuovamente ordinate. Adesso $B$ contiene il massimo dei due valori più piccoli, ovvero il valore centrale (la mediana)!\n>\n> _Approfondimento:_ questo procedimento si chiama **BubbleSort** su tre variabili, uno dei più semplici (ma poco efficienti) algoritmi di ordinamento.","\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_iN9_Wf$F,\n  width: \"1110\",\n  height: \"693\",\n};\nexport default image;","const module = [{\"N\":3,\"altezze\":[7,7,1],\"larghezze\":[5,9,8],\"rot\":[false,false,false],\"pos\":0},{\"N\":8,\"altezze\":[5,3,2,6,5,4,9,3],\"larghezze\":[7,5,8,10,10,9,10,3],\"rot\":[false,false,false,false,false,false,false,false],\"pos\":0},{\"N\":12,\"altezze\":[5,2,2,6,8,9,2,6,7,6,10,4],\"larghezze\":[9,8,8,9,5,1,9,1,2,7,1,10],\"rot\":[false,false,false,false,false,false,false,false,false,false,false,false],\"pos\":0}];\nexport default module;","import \"/scolastiche/src/asy_library/pictures/bunny_polychrome.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_Dgst4Qx9,\n  width: \"66\",\n  height: \"116.23880597014924\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/pictures/stairs.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_C6Wd_7GE,\n  width: \"80\",\n  height: \"970.6666666666666\",\n};\nexport default image;","import React, { useEffect, useRef } from \"react\";\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=66\";\nimport stairs from \"./asy/stairs.asy?w=80\";\n\nexport default function Visualizer({ variables }) {\n  const { blocklyVariables, hiddenState: state } = variables;\n\n  const colors = [\n    \"#4093b0\",\n    \"#bf4eb4\",\n    \"#44c966\",\n    \"#4473c9\",\n    \"#c2a948\",\n    \"#7468c5\",\n    \"#9c5ebd\",\n    \"#7cc258\",\n    \"#a3b651\",\n    \"#40af91\",\n    \"#4473c9\",\n    \"#c2a948\",\n    \"#7468c5\",\n    \"#9c5ebd\",\n    \"#7cc258\",\n    \"#a3b651\",\n  ];\n\n  const ref = useRef();\n  useEffect(() => {\n    const container = ref.current?.parentElement;\n    if (container) {\n      container.scrollTop = container.scrollHeight;\n    }\n  }, [ref.current]);\n\n  if (!state) return;\n\n  const y = [0];\n  for (let i = 0; i < state.N; i++) {\n    y[i + 1] = y[i] + (state.rot[i] ? state.larghezze[i] : state.altezze[i]);\n  }\n\n  return (\n    <div ref={ref}>\n      <Canvas gravity=\"bottom\" scale={10}>\n        {range(state.N).map((i) => {\n          const px = 16 - state.larghezze[i] / 2;\n          const py = y[i] + (state.rot[i] && (state.larghezze[i] - state.altezze[i]) / 2);\n          const rotation = state.rot[i] ? 0.25 : 0;\n          return (\n            <Rectangle\n              key={i}\n              color={colors[i]}\n              height={state.altezze[i]}\n              width={state.larghezze[i]}\n              x={px}\n              y={py}\n              rotation={rotation}\n            />\n          );\n        })}\n        <Sprite src={stairs} alt=\"Scale\" x={0.6} y={0} />\n        <Sprite src={bunny} alt=\"Bunny\" x={1.5} y={y[state.pos]} follow />\n      </Canvas>\n      <Variables variables={{ scatole: state.N, ...blocklyVariables }} />\n    </div>\n  );\n}\n","import initialBlocks from \"./initialBlocks.json\";\nimport customBlocks from \"./customBlocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nBunny e i suoi amici stanno cercando gli ovetti di pasqua nascosti in giro per la fattoria Fibonacci!\nBunny è convinto che ci siano ovetti nascosti anche sui tetti, quindi ha deciso di costruire una\ntorre che gli consenta di arrivare più in alto possibile.\n\nPer farlo, ha impilato $N$ scatole rettangolari di varie dimensioni. Bunny può misurare queste dimensioni,\ntramite le operazioni:\n\n- `altezza della scatola i`: l'altezza della $i$-esima scatola.\n- `larghezza della scatola i`: la larghezza della $i$-esima scatola.\n\nTuttavia, Bunny non è convinto di aver realizzato la torre più alta che potrebbe fare. Per aggiustare\nla torre, Bunny può fare la seguente operazione:\n\n- `ruota la scatola i`: ruota di 90 gradi la scatola $i$-esima, scambiando quindi di conseguenza\n  la sua altezza con la sua larghezza.\n\nAiuta Bunny a realizzare la torre più alta! Aiutalo anche a capire per quali tetti la torre sarà\nabbastanza alta, riportando l'altezza totale della torre con l'operazione:\n\n- `riporta altezza t`: termina il programma riportando il numero $t$ come altezza della torre.\n\n<Blockly\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  debug={{ logBlocks: false, logJs: false, logVariables: false }}\n  Visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> In questo programma, dopo aver inizializzato la variabile $t$ a zero, Bunny itera sulle $N$ scatole,\n> numerandole tramite la variabile $i$ che cresce da $1$ a $N$ a ogni iterazione. In ciascun passo,\n> controlla se l'altezza della scatola $i$-esima è minore della sua larghezza: in questo caso, conviene\n> ruotarla per alzare la torre. Volendo inoltre calcolare l'altezza totale della torre, Bunny aggiunge\n> l'altezza della scatola (possibilmente ruotata) alla variabile $t$. Una volta terminato di esaminare\n> tutte le scatole, Bunny può terminare riportando il valore di $t$ come altezza della torre.","\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_du2Uj4gj,\n  width: \"675\",\n  height: \"809\",\n};\nexport default image;","const module = [{\"S\":5,\"N\":3,\"C\":14,\"prizes\":[6,6,0,4,8],\"friends\":[1,3,4],\"pos\":0,\"good_pos\":[1,2,4]},{\"S\":9,\"N\":4,\"C\":12,\"prizes\":[7,5,9,3,8,2,4,2,1],\"friends\":[0,2,4,7],\"pos\":0,\"good_pos\":[6,8]},{\"S\":13,\"N\":6,\"C\":28,\"prizes\":[1,5,7,8,1,5,6,5,9,3,8,7,7],\"friends\":[0,1,4,8,10,12],\"pos\":0,\"good_pos\":[4,8,12]}];\nexport default module;","import \"/scolastiche/src/asy_library/pictures/bunny_silouhette.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_yKRByK_I,\n  width: \"45\",\n  height: \"49.35164835164835\",\n};\nexport default image;","import React from \"react\";\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=45\";\n\nfunction Sector({ color, from, portion, text }) {\n  const deg = 0.5 - portion;\n  return (\n    <Rectangle\n      x={8}\n      y={12}\n      width={200}\n      height={100}\n      rotation={from + portion - 0.25}\n      className=\"origin-bottom overflow-hidden !border-0\">\n      <div\n        style={{ transform: `rotate(${deg}turn)`, backgroundColor: color }}\n        className=\"absolute size-full origin-bottom rounded-t-full\"\n      />\n      <div\n        style={{ transform: `rotate(${deg / 2}turn)` }}\n        className=\"absolute mt-1 size-full origin-bottom text-center text-2xl text-slate-900 underline decoration-slate-900\">\n        {text}\n      </div>\n    </Rectangle>\n  );\n}\n\nexport default function Visualizer({ variables }) {\n  const { blocklyVariables, hiddenState } = variables;\n  if (!hiddenState) return;\n\n  const { S, N, C, pos, prizes, friends } = hiddenState;\n\n  const colors = [\n    \"#4093b0\",\n    \"#bf4eb4\",\n    \"#44c966\",\n    \"#4473c9\",\n    \"#c2a948\",\n    \"#7468c5\",\n    \"#9c5ebd\",\n    \"#7cc258\",\n    \"#a3b651\",\n    \"#40af91\",\n    \"#4473c9\",\n    \"#c2a948\",\n    \"#7468c5\",\n  ];\n\n  return (\n    <>\n      <Canvas>\n        {range(S).map((i) => (\n          <Sector key={i} color={colors[i]} from={(i + pos) / S} portion={1 / S} text={prizes[i]} />\n        ))}\n        {range(N).map((i) => (\n          <Sprite\n            key={i}\n            src={bunny}\n            alt=\"Amico\"\n            y={4}\n            rotation={(0.5 + friends[i]) / S + 0.125}\n            className=\"origin-[108px_108px]\"\n          />\n        ))}\n      </Canvas>\n      <Variables variables={{ carote: C, ...blocklyVariables }} />\n    </>\n  );\n}\n","import initialBlocks from \"./initialBlocks.json\";\nimport customBlocks from \"./customBlocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nTip-Tap ha appena raccolto ben $C$ carote dal suo orto, e vuole condividerle con i suoi $N$ amici.\nLi ha quindi invitati tutti a giocare alla ruota della fortuna, per decidere come dividerle divertendosi!\n\nLa ruota della fortuna è un cerchio diviso in $S$ spicchi, e su ciascuno di essi c'è scritto un numero.\nTutti i giocatori si siedono intorno alla ruota davanti a uno spicchio e poi la ruota viene fatta girare:\nquando la ruota si ferma, ognuno otterrà tante carote quanto è il numero scritto sullo spicchio che a\nquel punto avrà davanti a sé.\n\nOra gli amici sono arrivati, ma Tip-Tap si è reso conto di non aver fatto bene i conti: potrebbe non avere\nabbastanza carote per pagare i premi! Per non fare brutta figura con gli amici, decide quindi di far girare\nlentamente la ruota e poi fermarla di nascosto non appena si trova in una posizione in cui ha abbastanza\ncarote per tutti. Per farlo, Tip-Tap può fare le seguenti azioni:\n\n- `gira la ruota`: lascia girare la ruota di un ulteriore spicchio.\n- `premio di i`: quante carote riceverebbe al momento l'$i$-esimo amico.\n- `ferma la ruota`: ferma la ruota e termina il programma.\n\nAiuta Tip-Tap, facendo girare la ruota fino a che non raggiunge la prima posizione per cui Tip-Tap\nha abbastanza carote per pagare tutti i premi!\n\n_**Attenzione:** c'è sempre almeno una posizione della ruota che consente a Tip-Tap di pagare tutti i premi._\n\n<Blockly\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  debug={{ logBlocks: false, logJs: false, logVariables: false }}\n  Visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> In questo programma, Tip-Tap prova a far girare la ruota fino ad un massimo di $S$ volte, provando quindi\n> tutte le rotazioni possibili. Per ogni rotazione, calcola il premio totale da assegnare ai suoi amici\n> nella variabile **somma**, inizializzandola a zero e poi iterando su tutti gli $N$ amici, ogni volta\n> incrementando **somma** del valore del premio per l'amico $i$-esimo in questa rotazione. Se la somma\n> così calcolata risulta minore del numero di carote a disposizione, Tip-Tap ferma la ruota, altrimenti\n> lascia che la ruota continui a girare e continua a provare la prossima rotazione.\n"],"names":["image","_jsx","_components","_jsxs","MathExpr","module","Visualizer","variables","blocklyVariables","hiddenState","state","colors","ref","useRef","useEffect","container","current","parentElement","scrollTop","scrollHeight","y","i","N","rot","larghezze","altezze","div","Canvas","gravity","scale","range","map","px","py","rotation","Rectangle","color","height","width","x","Sprite","src","stairs","alt","bunny","pos","follow","Variables","scatole","children","span","customBlocks","initialBlocks","testcases","logBlocks","logJs","logVariables","Sector","from","portion","text","deg","className","style","transform","backgroundColor","S","C","prizes","friends","_Fragment","carote","strong"],"mappings":"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"}