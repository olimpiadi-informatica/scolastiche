{"version":3,"file":"page-fibonacci2-demo-IOSFRmlm.js","sources":["../../src/fibonacci2-demo/contest/header.md","../../src/fibonacci2-demo/contest/p-1-sequenza/code.asy","../../src/fibonacci2-demo/contest/p-1-sequenza/question.md","../../src/fibonacci2-demo/contest/p-2-condizioni/code.asy","../../src/fibonacci2-demo/contest/p-2-condizioni/question.md","../../src/fibonacci2-demo/contest/p-3-mediana/code.asy","../../src/fibonacci2-demo/contest/p-3-mediana/opz1.asy","../../src/fibonacci2-demo/contest/p-3-mediana/opz2.asy","../../src/fibonacci2-demo/contest/p-3-mediana/opz3.asy","../../src/fibonacci2-demo/contest/p-3-mediana/opz4.asy","../../src/fibonacci2-demo/contest/p-3-mediana/question.md","../../src/fibonacci2-demo/contest/p-4-ciclo-lista/code.asy","../../src/fibonacci2-demo/contest/p-4-ciclo-lista/fig1.asy?w=650","../../src/fibonacci2-demo/contest/p-4-ciclo-lista/question.md","../../src/fibonacci2-demo/contest/s-1-apri-porte/sol.png","../../src/fibonacci2-demo/contest/s-1-apri-porte/testcases.py","../../src/utils/visualizer.jsx","../../src/fibonacci2-demo/contest/s-1-apri-porte/asy/bunny.asy?w=66","../../src/fibonacci2-demo/contest/s-1-apri-porte/asy/rock.asy?w=93","../../src/fibonacci2-demo/contest/s-1-apri-porte/asy/closed-door.asy?w=55","../../src/fibonacci2-demo/contest/s-1-apri-porte/asy/opened-door.asy?w=100","../../src/fibonacci2-demo/contest/s-1-apri-porte/asy/carrot.asy?w=40","../../src/fibonacci2-demo/contest/s-1-apri-porte/visualizer.jsx","../../src/fibonacci2-demo/contest/s-1-apri-porte/question.mdx","../../src/fibonacci2-demo/contest/s-2-alza-torre/sol.png","../../src/fibonacci2-demo/contest/s-2-alza-torre/testcases.py","../../src/fibonacci2-demo/contest/s-2-alza-torre/asy/bunny.asy?w=66","../../src/fibonacci2-demo/contest/s-2-alza-torre/asy/stairs.asy?w=80","../../src/fibonacci2-demo/contest/s-2-alza-torre/visualizer.jsx","../../src/fibonacci2-demo/contest/s-2-alza-torre/question.mdx","../../src/fibonacci2-demo/contest/s-3-gira-ruota/sol.png","../../src/fibonacci2-demo/contest/s-3-gira-ruota/testcases.py","../../src/fibonacci2-demo/contest/s-3-gira-ruota/asy/bunny.asy?w=45","../../src/fibonacci2-demo/contest/s-3-gira-ruota/visualizer.jsx","../../src/fibonacci2-demo/contest/s-3-gira-ruota/question.mdx","../../src/fibonacci2-demo/contest/s-4-muro/sol.png","../../src/fibonacci2-demo/contest/s-4-muro/testcases.py","../../src/fibonacci2-demo/contest/s-4-muro/asy/paint1.asy?w=40","../../src/fibonacci2-demo/contest/s-4-muro/asy/paint10.asy?w=40","../../src/fibonacci2-demo/contest/s-4-muro/asy/paint11.asy?w=40","../../src/fibonacci2-demo/contest/s-4-muro/asy/paint2.asy?w=40","../../src/fibonacci2-demo/contest/s-4-muro/asy/paint3.asy?w=40","../../src/fibonacci2-demo/contest/s-4-muro/asy/paint4.asy?w=40","../../src/fibonacci2-demo/contest/s-4-muro/asy/paint5.asy?w=40","../../src/fibonacci2-demo/contest/s-4-muro/asy/paint6.asy?w=40","../../src/fibonacci2-demo/contest/s-4-muro/asy/paint7.asy?w=40","../../src/fibonacci2-demo/contest/s-4-muro/asy/paint8.asy?w=40","../../src/fibonacci2-demo/contest/s-4-muro/asy/paint9.asy?w=40","../../src/fibonacci2-demo/contest/s-4-muro/asy/bunny.asy?w=66","../../src/fibonacci2-demo/contest/s-4-muro/visualizer.jsx","../../src/fibonacci2-demo/contest/s-4-muro/question.mdx","../../src/fibonacci2-demo/contest/contest.mdx","../../src/fibonacci2-demo/index.jsx"],"sourcesContent":["# Giochi di Fibonacci 2023/2024 -- Allenamento per la Fase II\n\nQuesta prova contiene _8 domande_ da risolvere in _90 minuti_.\nLe domande sono a **scelta multipla** o a **blocchi**, e sono divise in due parti:\n\n- domande di interpretazione di **procedimenti procedurali** come programmi a blocchi, e\n- domande di **programmazione** tramite blocchi.\n\nIn entrambe le parti, le domande sono ordinate per difficoltà crescente.\n**Attento che la difficoltà è soggettiva!** Se stai passando tanto tempo cercando di risolvere una domanda, prova a passare ad altre domande e altre categorie!\n\n## Punteggio\n\nTutte le domande a _scelta multipla_ hanno 5 opzioni, di cui **solo una** è corretta. Il punteggio che puoi ottenere è:\n\n- 5 punti per una risposta _corretta_;\n- 1 punto per una risposta _non data_;\n- 0 punti per una risposta _sbagliata_.\n\nLe domande a _blocchi_ richiedono di scrivere un programma a blocchi, che viene valutato su tre diversi livelli.\nPer ciascuna domanda e per ciascun livello, Il punteggio che puoi ottenere è:\n\n- 5 punti se il programma produce la risposta _corretta_;\n- 0 punti se il programma produce una risposta _sbagliata_.\n","import \"/scolastiche/src/asy_library/structures/layout.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_D6et_7ER,\n  width: \"976.289\",\n  height: \"973.122\",\n};\nexport default image;","Quali dei tre procedimenti consentono a Tip-Tap di prepararsi un piatto di carote? All'inizio piatto e carote sono nella dispensa, e alla fine devono trovarsi entrambi sul suo tavolo.\n\n![test](code.asy)\n\n- [x] Solo 1\n- [ ] Solo 2\n- [ ] Solo 3\n- [ ] 1 e 2\n- [ ] 2 e 3\n\n> Il procedimento 1 consente a Tip-Tap di preparare un piatto di carote, portando prima il piatto e poi le carote dalla dispensa al tavolo. Il procedimento 2 non funziona, perché impone a Tip-Tap di posare il piatto prima di averlo preso. Il procedimento 3 non funziona, perché impone a Tip-Tap di prendere il piatto mentre si trova al tavolo, anche se il piatto si trova nella dispensa.\n","import \"/scolastiche/src/asy_library/structures/layout.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_75pa65rr,\n  width: \"1426.224\",\n  height: \"1125.417\",\n};\nexport default image;","Considera questo procedimento, che usa le tre **variabili** numeriche di nome $A$, $B$ e $C$.\n\n![code](code.asy)\n\nQuesto programma viene eseguito due volte:\n\n- La prima volta impostando $A$ a $7$, $B$ a $4$, e $C$ a $6$.\n- La seconda volta impostando invece $A$ a $5$, $B$ a $7$, e $C$ a $9$.\n\nQuali numeri stampa il procedimento?\n\n- [x] 7 e 9\n- [ ] 6 e 9\n- [ ] 7 e 7\n- [ ] 5 e 7\n- [ ] 4 e 5\n\n> Il procedimento ogni volta stampa il numero più grande tra $A$, $B$ e $C$.\n>\n> La prima volta che viene eseguito il programma, $A$ è più grande di $B$, si controlla quindi se $A$ è più grande di $C$. Essendo $A$ più grande di $C$, il programma scrive il valore di $A$, che è $7$.\n>\n> La seconda volta, $A$ è più piccolo di $B$, si controlla quindi se $B$ è più grande di $C$, ma $B$ è più piccolo di $C$. Il programma scrive quindi il valore di $C$, che è $9$.\n","import \"/scolastiche/src/asy_library/structures/layout.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_CsQy2gPm,\n  width: \"659.977\",\n  height: \"767.47\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/structures/layout.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_CMFXPqF9,\n  width: \"658.755\",\n  height: \"279.314\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/structures/layout.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_BRvdPNpz,\n  width: \"658.055\",\n  height: \"279.314\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/structures/layout.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_BbiNdajW,\n  width: \"624.039\",\n  height: \"118.275\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/structures/layout.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_D1A0kqnP,\n  width: \"658.755\",\n  height: \"279.314\",\n};\nexport default image;","Considera questo procedimento, che si riferisce alle tre **variabili** numeriche $A$, $B$ e $C$:\n\n![code](code.asy)\n\nQuesto procedimento dovrebbe stampare la _mediana_ tra le tre variabili, ovvero il valore di mezzo tra i tre. Ad esempio, la mediana di $5$, $3$ e $10$ è $5$, e la mediana di $4$, $1$ e $1$ è $1$. Tuttavia, mancano dei blocchi per completare il procedimento!\n\nQuale delle seguenti può essere la parte mancante, da sostituire al blocco indicato con **???**, affinché il procedimento stampi sempre la mediana?\n\n- [x] ![opzione1](opz1.asy)\n- [ ] ![opzione2](opz2.asy)\n- [ ] ![opzione3](opz3.asy)\n- [ ] ![opzione4](opz4.asy)\n- [ ] Il procedimento è già completo, non servono altri blocchi\n\n> La risposta è\n>\n> ![opzione1](opz1.asy)\n>\n> Vediamo cosa fa il procedimento dopo averlo completato nel modo proposto.\n>\n> 1. Per prima cosa, le due variabili $A$ e $B$ vengono ordinate, scambiandone i valori se necessario.\n> 2. A questo punto, $B$ e $C$ vengono ordinate. In questo momento, $C$ contiene il massimo dei tre valori iniziali.\n> 3. Per finire, $A$ e $B$ vengono nuovamente ordinate. Adesso $B$ contiene il massimo dei due valori più piccoli, ovvero il valore centrale (la mediana)!\n>\n> _Approfondimento:_ questo procedimento si chiama **BubbleSort** su tre variabili, uno dei più semplici (ma poco efficienti) algoritmi di ordinamento.","import \"/scolastiche/src/asy_library/structures/layout.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_BhG1ceeS,\n  width: \"1068.951\",\n  height: \"883.969\",\n};\nexport default image;","import \"/scolastiche/src/fibonacci2-demo/contest/p-4-ciclo-lista/util.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_C4kFWqMR,\n  width: \"650\",\n  height: \"298.8255033557047\",\n};\nexport default image;","Considera questo procedimento, che si riferisce ad un **lista** di numeri $A$, di dimensione rappresentata dalla **variabile** numerica $N$, e con l'ausilio della **variabile** numerica $P$.\n\n![code](code.asy)\n\nIl procedimento viene eseguito tre volte, sempre con $N$ pari a $9$ e con i tre seguenti valori per la lista $A$:\n\n![array](fig1.asy?w=650)\n\nPer quali di questi valori di $A$ il procedimento stampa _\"trovato\"_?\n\n- [x] Solo il valore 1.\n- [ ] Solo il valore 2.\n- [ ] Solo il valore 3.\n- [ ] Tutti.\n- [ ] Solo i valori 1 e 3.\n\n> Il procedimento scandisce la lista di numeri dall'inizio, andando a cercare una posizione che contiene uno zero seguito da un uno: se la trova stampa _\"trovato\"_, altrimenti non stampa nulla.\n>\n> Nel primo caso il procedimento stampa _\"trovato\"_, infatti quando $P$ è uguale a $2$ il valore in posizione $P$ di $A$ è $0$ e il valore in posizione $P+1$ è $1$.\n>\n> Nel secondo e nel terzo caso invece il procedimento non stampa nulla, dato che non esiste nessun valore di $P$ tale che la posizione $P$ di $A$ sia uguale a $0$ e la posizione $P+1$ di $A$ sia uguale a $1$.\n","\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_Cw1rVv8j,\n  width: \"439\",\n  height: \"565\",\n};\nexport default image;","const module = [{\"door\":[1,1,0,0,1],\"open\":[false,false,false,false,false],\"pos\":0,\"N\":5,\"eaten\":false},{\"door\":[1,1,1,1,1,1,1,1,1,1],\"open\":[false,false,false,false,false,false,false,false,false,false],\"pos\":0,\"N\":10,\"eaten\":false},{\"door\":[0,1,0,0,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,0],\"open\":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false],\"pos\":0,\"N\":20,\"eaten\":false}];\nexport default module;","import React, {\n  Fragment,\n  createContext,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\n\nconst VisualizerContext = createContext({ gravity: \"top\", scale: 1 });\n\nexport function Canvas({ gravity, scale, children }) {\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n\n  return (\n    <VisualizerContext.Provider\n      value={{ gravity: gravity ?? \"top\", scale: scale ?? 1, setWidth, setHeight }}>\n      <div\n        className=\"relative m-8 w-full\"\n        style={{ width: width + 32, height: height + 32 }}>\n        {children}\n      </div>\n    </VisualizerContext.Provider>\n  );\n}\n\nexport function Sprite({ src, alt, x, y, rotation, follow, className }) {\n  x ??= 0;\n  y ??= 0;\n  rotation ??= 0;\n\n  const ref = useRef();\n\n  const pos = useRef({ x, y, changed: false });\n  useEffect(() => {\n    if (x !== pos.current.x || y !== pos.current.y) {\n      pos.current = { x, y, changed: true };\n    }\n  }, [pos.current, x, y]);\n\n  const { gravity, scale, setWidth, setHeight } = useContext(VisualizerContext);\n  useEffect(() => {\n    const box = ref.current?.getBoundingClientRect();\n\n    setTimeout(() => {\n      setWidth((w) => Math.max(w, x * scale + (box?.width ?? src.width)));\n      setHeight((h) => Math.max(h, y * scale + (box?.height ?? src.height)));\n    }, 5);\n\n    if (!pos.current.changed || !follow) return;\n    const id = setTimeout(() => {\n      return ref.current?.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"nearest\",\n        inline: \"center\",\n      });\n    }, 160);\n    return () => clearTimeout(id);\n  }, [ref.current, pos.current, x, y]);\n\n  return (\n    <img\n      ref={ref}\n      alt={alt}\n      {...src}\n      className={`absolute transition-all ${className ?? \"\"}`}\n      style={{\n        [gravity]: `${y * scale}px`,\n        left: `${x * scale}px`,\n        transform: `rotate(${rotation}turn)`,\n      }}\n    />\n  );\n}\n\nexport function Rectangle({ color, height, width, x, y, rotation, className, children }) {\n  x ??= 0;\n  y ??= 0;\n  rotation ??= 0;\n\n  const ref = useRef();\n  const { gravity, scale, setWidth, setHeight } = useContext(VisualizerContext);\n\n  useEffect(() => {\n    const box = ref.current?.getBoundingClientRect();\n    setTimeout(() => {\n      setWidth((w) => Math.max(w, x * scale + (box?.width ?? width)));\n      setHeight((h) => Math.max(h, y * scale + (box?.height ?? height)));\n    }, 5);\n  }, [x, y, width, height]);\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        backgroundColor: color,\n        height: `${height * scale}px`,\n        width: `${width * scale}px`,\n        left: `${x * scale}px`,\n        [gravity]: `${y * scale}px`,\n        transform: `rotate(${rotation}turn)`,\n      }}\n      className={`absolute border-2 border-solid border-black transition ${className ?? \"\"}`}>\n      {children}\n    </div>\n  );\n}\n\nexport function Variables({ variables }) {\n  return (\n    <div className=\"m-4 grid max-w-sm grid-cols-2 gap-y-2 text-slate-950 *:bg-orange-400 *:px-4 *:py-1.5\">\n      {Object.entries(variables).map(([name, value]) => (\n        <Fragment key={name}>\n          <div className=\"rounded-l-2xl\">{name}</div>\n          <div className=\"rounded-r-2xl\">\n            <div className=\"rounded-lg bg-white px-2\">{value == null ? \"-\" : value}</div>\n          </div>\n        </Fragment>\n      ))}\n    </div>\n  );\n}\n","import \"/scolastiche/src/asy_library/pictures/bunny_polychrome.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_D6g6GNFU,\n  width: \"66\",\n  height: \"117.16092318853724\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/pictures/flat_rock.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_BHK7XDzQ,\n  width: \"93\",\n  height: \"26.934057427610732\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/pictures/diagonal_door.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_DF2XiYRB,\n  width: \"55\",\n  height: \"174.3830824820691\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/pictures/diagonal_door.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_CNUalUTl,\n  width: \"100\",\n  height: \"162.2065233729145\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/pictures/carrot.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_CLLZF_q6,\n  width: \"40\",\n  height: \"40\",\n};\nexport default image;","import React, { Fragment } from \"react\";\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=66\";\nimport rock from \"./asy/rock.asy?w=93\";\nimport closedDoor from \"./asy/closed-door.asy?w=55\";\nimport openedDoor from \"./asy/opened-door.asy?w=100\";\nimport carrot from \"./asy/carrot.asy?w=40\";\n\nexport default function Visualizer({ variables }) {\n  const { blocklyVariables, hiddenState } = variables;\n  if (!hiddenState) return null;\n\n  return (\n    <>\n      <Canvas scale={130}>\n        {range(hiddenState.N).map((i) => (\n          <Fragment key={i}>\n            {!!hiddenState.door[i] &&\n              (hiddenState.open[i] ? (\n                <Sprite src={openedDoor} alt=\"Porta aperta\" x={i + 0.77} y={-0.23} />\n              ) : (\n                <Sprite src={closedDoor} alt=\"Porta chiusa\" x={i + 0.65} y={0} />\n              ))}\n          </Fragment>\n        ))}\n        {range(hiddenState.N + 1).map((i) => (\n          <Sprite key={i} src={rock} alt=\"Sasso\" x={i} y={0.92} />\n        ))}\n        <Sprite src={bunny} alt=\"Bunny\" x={hiddenState.pos + 0.15} y={0.15} follow />\n        <Sprite\n          src={carrot}\n          alt=\"Carota\"\n          x={hiddenState.N + (hiddenState.eaten ? 0.43 : 0.46)}\n          y={hiddenState.eaten ? 0.37 : 0.77}\n        />\n      </Canvas>\n      <Variables variables={blocklyVariables} />\n    </>\n  );\n}\n","import initialBlocks from \"./initialBlocks.json\";\nimport customBlocks from \"./customBlocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nTip-Tap vorrebbe tanto mangiare la sua carota, prima però deve raggiungerla!\nA separarlo dal suo obiettivo ci sono $N$ rocce, alcune divise da porte chiuse.\nTip-Tap sa compiere le seguenti azioni:\n\n- `avanza`: salta alla roccia più vicina a destra, solo se non c'è una porta chiusa in mezzo.\n- `vedi porta`: condizione vera se di fianco a te c'è una porta chiusa.\n- `apri porta`: apri la porta a destra, ma solo se è di fianco a te.\n- `mangia carota`: mangia la carota a destra (solo se è di fianco a te) e termina il programma.\n\nScrivi un programma che consenta a Tip-Tap di mangiare sempre la carota!\n\n<Blockly\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  debug={{ logBlocks: false, logJs: false, logVariables: false }}\n  Visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Secondo questo programma, per ognuno degli $N$ passi che Tip-Tap deve fare, il protagonista\n> controlla innanzitutto se vede una porta chiusa. Se la vede, allora la apre; e poi in ogni caso\n> avanza alla roccia successiva. Completati tutti gli $N$ passi, Tip-Tap procede quindi a mangiare la carota.\n","\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_iN9_Wf$F,\n  width: \"1110\",\n  height: \"693\",\n};\nexport default image;","const module = [{\"N\":3,\"altezze\":[7,7,1],\"larghezze\":[5,9,8],\"rot\":[false,false,false],\"pos\":0},{\"N\":8,\"altezze\":[5,3,2,6,5,4,9,3],\"larghezze\":[7,5,8,10,10,9,10,3],\"rot\":[false,false,false,false,false,false,false,false],\"pos\":0},{\"N\":12,\"altezze\":[5,2,2,6,8,9,2,6,7,6,10,4],\"larghezze\":[9,8,8,9,5,1,9,1,2,7,1,10],\"rot\":[false,false,false,false,false,false,false,false,false,false,false,false],\"pos\":0}];\nexport default module;","import \"/scolastiche/src/asy_library/pictures/bunny_polychrome.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_yKRByK_I,\n  width: \"66\",\n  height: \"117.16092318853724\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/pictures/stairs.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_C6Wd_7GE,\n  width: \"80\",\n  height: \"985.8697146348293\",\n};\nexport default image;","import React, { useEffect, useRef } from \"react\";\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=66\";\nimport stairs from \"./asy/stairs.asy?w=80\";\n\nexport default function Visualizer({ variables }) {\n  const { blocklyVariables, hiddenState: state } = variables;\n\n  const colors = [\n    \"#4093b0\",\n    \"#bf4eb4\",\n    \"#44c966\",\n    \"#4473c9\",\n    \"#c2a948\",\n    \"#7468c5\",\n    \"#9c5ebd\",\n    \"#7cc258\",\n    \"#a3b651\",\n    \"#40af91\",\n    \"#4473c9\",\n    \"#c2a948\",\n    \"#7468c5\",\n    \"#9c5ebd\",\n    \"#7cc258\",\n    \"#a3b651\",\n  ];\n\n  const ref = useRef();\n  useEffect(() => {\n    const container = ref.current?.parentElement;\n    if (container) {\n      container.scrollTop = container.scrollHeight;\n    }\n  }, [ref.current]);\n\n  if (!state) return;\n\n  const y = [0];\n  for (let i = 0; i < state.N; i++) {\n    y[i + 1] = y[i] + (state.rot[i] ? state.larghezze[i] : state.altezze[i]);\n  }\n\n  return (\n    <div ref={ref}>\n      <Canvas gravity=\"bottom\" scale={10}>\n        {range(state.N).map((i) => {\n          const px = 16 - state.larghezze[i] / 2;\n          const py = y[i] + (state.rot[i] && (state.larghezze[i] - state.altezze[i]) / 2);\n          const rotation = state.rot[i] ? 0.25 : 0;\n          return (\n            <Rectangle\n              key={i}\n              color={colors[i]}\n              height={state.altezze[i]}\n              width={state.larghezze[i]}\n              x={px}\n              y={py}\n              rotation={rotation}\n            />\n          );\n        })}\n        <Sprite src={stairs} alt=\"Scale\" x={0.6} y={0} />\n        <Sprite src={bunny} alt=\"Bunny\" x={1.5} y={y[state.pos]} follow />\n      </Canvas>\n      <Variables variables={{ scatole: state.N, ...blocklyVariables }} />\n    </div>\n  );\n}\n","import initialBlocks from \"./initialBlocks.json\";\nimport customBlocks from \"./customBlocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nBunny e i suoi amici stanno cercando gli ovetti di pasqua nascosti in giro per la fattoria Fibonacci!\nBunny è convinto che ci siano ovetti nascosti anche sui tetti, quindi ha deciso di costruire una\ntorre che gli consenta di arrivare più in alto possibile.\n\nPer farlo, ha impilato $N$ scatole rettangolari di varie dimensioni. Bunny può misurare queste dimensioni,\ntramite le operazioni:\n\n- `altezza della scatola i`: l'altezza della $i$-esima scatola.\n- `larghezza della scatola i`: la larghezza della $i$-esima scatola.\n\nTuttavia, Bunny non è convinto di aver realizzato la torre più alta che potrebbe fare. Per aggiustare\nla torre, Bunny può fare la seguente operazione:\n\n- `ruota la scatola i`: ruota di 90 gradi la scatola $i$-esima, scambiando quindi di conseguenza\n  la sua altezza con la sua larghezza.\n\nAiuta Bunny a realizzare la torre più alta! Aiutalo anche a capire per quali tetti la torre sarà\nabbastanza alta, riportando l'altezza totale della torre con l'operazione:\n\n- `riporta altezza t`: termina il programma riportando il numero $t$ come altezza della torre.\n\n<Blockly\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  debug={{ logBlocks: false, logJs: false, logVariables: false }}\n  Visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> In questo programma, dopo aver inizializzato la variabile $t$ a zero, Bunny itera sulle $N$ scatole,\n> numerandole tramite la variabile $i$ che cresce da $1$ a $N$ a ogni iterazione. In ciascun passo,\n> controlla se l'altezza della scatola $i$-esima è minore della sua larghezza: in questo caso, conviene\n> ruotarla per alzare la torre. Volendo inoltre calcolare l'altezza totale della torre, Bunny aggiunge\n> l'altezza della scatola (possibilmente ruotata) alla variabile $t$. Una volta terminato di esaminare\n> tutte le scatole, Bunny può terminare riportando il valore di $t$ come altezza della torre.","\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_du2Uj4gj,\n  width: \"675\",\n  height: \"809\",\n};\nexport default image;","const module = [{\"S\":5,\"N\":3,\"C\":14,\"prizes\":[6,6,0,4,8],\"friends\":[1,3,4],\"pos\":0,\"good_pos\":[1,2,4]},{\"S\":9,\"N\":4,\"C\":12,\"prizes\":[7,5,9,3,8,2,4,2,1],\"friends\":[0,2,4,7],\"pos\":0,\"good_pos\":[6,8]},{\"S\":13,\"N\":6,\"C\":28,\"prizes\":[1,5,7,8,1,5,6,5,9,3,8,7,7],\"friends\":[0,1,4,8,10,12],\"pos\":0,\"good_pos\":[4,8,12]}];\nexport default module;","import \"/scolastiche/src/asy_library/pictures/bunny_silouhette.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_Dgst4Qx9,\n  width: \"45\",\n  height: \"49.33578799876551\",\n};\nexport default image;","import React from \"react\";\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=45\";\n\nfunction Sector({ color, from, portion, text }) {\n  const deg = 0.5 - portion;\n  return (\n    <Rectangle\n      x={8}\n      y={12}\n      width={200}\n      height={100}\n      rotation={from + portion - 0.25}\n      className=\"origin-bottom overflow-hidden !border-0\">\n      <div\n        style={{ transform: `rotate(${deg}turn)`, backgroundColor: color }}\n        className=\"absolute size-full origin-bottom rounded-t-full\"\n      />\n      <div\n        style={{ transform: `rotate(${deg / 2}turn)` }}\n        className=\"absolute mt-1 size-full origin-bottom text-center text-2xl text-slate-900 underline decoration-slate-900\">\n        {text}\n      </div>\n    </Rectangle>\n  );\n}\n\nexport default function Visualizer({ variables }) {\n  const { blocklyVariables, hiddenState } = variables;\n  if (!hiddenState) return;\n\n  const { S, N, C, pos, prizes, friends } = hiddenState;\n\n  const colors = [\n    \"#4093b0\",\n    \"#bf4eb4\",\n    \"#44c966\",\n    \"#4473c9\",\n    \"#c2a948\",\n    \"#7468c5\",\n    \"#9c5ebd\",\n    \"#7cc258\",\n    \"#a3b651\",\n    \"#40af91\",\n    \"#4473c9\",\n    \"#c2a948\",\n    \"#7468c5\",\n  ];\n\n  return (\n    <>\n      <Canvas>\n        {range(S).map((i) => (\n          <Sector key={i} color={colors[i]} from={(i + pos) / S} portion={1 / S} text={prizes[i]} />\n        ))}\n        {range(N).map((i) => (\n          <Sprite\n            key={i}\n            src={bunny}\n            alt=\"Amico\"\n            y={4}\n            rotation={(0.5 + friends[i]) / S + 0.125}\n            className=\"origin-[108px_108px]\"\n          />\n        ))}\n      </Canvas>\n      <Variables variables={{ carote: C, ...blocklyVariables }} />\n    </>\n  );\n}\n","import initialBlocks from \"./initialBlocks.json\";\nimport customBlocks from \"./customBlocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nTip-Tap ha appena raccolto ben $C$ carote dal suo orto, e vuole condividerle con i suoi $N$ amici.\nLi ha quindi invitati tutti a giocare alla ruota della fortuna, per decidere come dividerle divertendosi!\n\nLa ruota della fortuna è un cerchio diviso in $S$ spicchi, e su ciascuno di essi c'è scritto un numero.\nTutti i giocatori si siedono intorno alla ruota davanti a uno spicchio e poi la ruota viene fatta girare:\nquando la ruota si ferma, ognuno otterrà tante carote quanto è il numero scritto sullo spicchio che a\nquel punto avrà davanti a sé.\n\nOra gli amici sono arrivati, ma Tip-Tap si è reso conto di non aver fatto bene i conti: potrebbe non avere\nabbastanza carote per pagare i premi! Per non fare brutta figura con gli amici, decide quindi di far girare\nlentamente la ruota e poi fermarla di nascosto non appena si trova in una posizione in cui ha abbastanza\ncarote per tutti. Per farlo, Tip-Tap può fare le seguenti azioni:\n\n- `gira la ruota`: lascia girare la ruota di un ulteriore spicchio.\n- `premio di i`: quante carote riceverebbe al momento l'$i$-esimo amico.\n- `ferma la ruota`: ferma la ruota e termina il programma.\n\nAiuta Tip-Tap, facendo girare la ruota fino a che non raggiunge la prima posizione per cui Tip-Tap\nha abbastanza carote per pagare tutti i premi!\n\n_**Attenzione:** c'è sempre almeno una posizione della ruota che consente a Tip-Tap di pagare tutti i premi._\n\n<Blockly\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  debug={{ logBlocks: false, logJs: false, logVariables: false }}\n  Visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> In questo programma, Tip-Tap prova a far girare la ruota fino ad un massimo di $S$ volte, provando quindi\n> tutte le rotazioni possibili. Per ogni rotazione, calcola il premio totale da assegnare ai suoi amici\n> nella variabile **somma**, inizializzandola a zero e poi iterando su tutti gli $N$ amici, ogni volta\n> incrementando **somma** del valore del premio per l'amico $i$-esimo in questa rotazione. Se la somma\n> così calcolata risulta minore del numero di carote a disposizione, Tip-Tap ferma la ruota, altrimenti\n> lascia che la ruota continui a girare e continua a provare la prossima rotazione.\n","\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_gV$xxbaK,\n  width: \"1128\",\n  height: \"772\",\n};\nexport default image;","const module = [{\"L\":[4,1,4,3,3],\"N\":5,\"C\":5,\"i\":0,\"pos\":0,\"muro\":[0,0,0,0,0],\"sol\":3},{\"L\":[4,3,2,5,3,2,3,2],\"N\":9,\"C\":8,\"i\":0,\"pos\":0,\"muro\":[0,0,0,0,0,0,0,0,0],\"sol\":8},{\"L\":[6,6,11,4,8,9,1,13,9,1,12],\"N\":15,\"C\":11,\"i\":0,\"pos\":0,\"muro\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"sol\":4}];\nexport default module;","import \"/scolastiche/src/asy_library/pictures/paint_bucket.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_CXo0XsZ_,\n  width: \"40\",\n  height: \"55.862251803479985\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/pictures/paint_bucket.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_CheJW1Sj,\n  width: \"40\",\n  height: \"55.862251803479985\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/pictures/paint_bucket.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_CKa5i9M6,\n  width: \"40\",\n  height: \"55.862251803479985\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/pictures/paint_bucket.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_By2NEHp5,\n  width: \"40\",\n  height: \"55.862251803479985\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/pictures/paint_bucket.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_D_8Ix_Z4,\n  width: \"40\",\n  height: \"55.862251803479985\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/pictures/paint_bucket.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_Zx3fa3Bz,\n  width: \"40\",\n  height: \"55.862251803479985\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/pictures/paint_bucket.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_D6nezCwF,\n  width: \"40\",\n  height: \"55.862251803479985\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/pictures/paint_bucket.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_BnzJ2_4m,\n  width: \"40\",\n  height: \"55.862251803479985\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/pictures/paint_bucket.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_BhOcjlKR,\n  width: \"40\",\n  height: \"55.862251803479985\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/pictures/paint_bucket.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_AoACKHOt,\n  width: \"40\",\n  height: \"55.862251803479985\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/pictures/paint_bucket.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_BGnr00Sy,\n  width: \"40\",\n  height: \"55.862251803479985\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/pictures/bunny_polychrome.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_CdW3hNOo,\n  width: \"66\",\n  height: \"117.16092318853724\",\n};\nexport default image;","import React, { Fragment } from \"react\";\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=66\";\n\nconst paints = import.meta.glob(\"./asy/paint*.asy\", {\n  eager: true,\n  import: \"default\",\n  query: { w: 40 },\n});\n\nexport default function Visualizer({ variables }) {\n  const { blocklyVariables, hiddenState } = variables;\n  if (!hiddenState) return;\n\n  const colors = [\n    \"#ffffff\",\n    \"#0000ff\",\n    \"#ff0000\",\n    \"#00ff00\",\n    \"#ff00ff\",\n    \"#ffff00\",\n    \"#00ffff\",\n    \"#7f7f7f\",\n    \"#7f0000\",\n    \"#007f00\",\n    \"#7f7f00\",\n    \"#000000\",\n  ];\n\n  return (\n    <>\n      <Canvas scale={40}>\n        {range(hiddenState.N).map((i) => (\n          <Rectangle\n            key={i}\n            color={colors[hiddenState.muro[i]]}\n            width={1}\n            height={4}\n            x={i + 2}\n            y={0}\n          />\n        ))}\n        <Sprite src={bunny} alt=\"Bunny\" x={1 + hiddenState.pos} y={1.4} />\n        <Sprite\n          src={paints[`./asy/paint${Math.min(hiddenState.i + 1, hiddenState.C)}.asy`]}\n          alt=\"Vernice\"\n          x={0}\n          y={3}\n        />\n      </Canvas>\n      <Variables variables={{ colori: hiddenState.C, ...blocklyVariables }} />\n    </>\n  );\n}\n","import initialBlocks from \"./initialBlocks.json\";\nimport customBlocks from \"./customBlocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nBunny ha comprato $C$ colori diversi per dipingere il muro della fattoria, che è composto\nda $N$ pannelli verticali. L'obiettivo di Bunny è di dipingere il muro in zone rettangolari\nche seguono i pannelli con la supervisione di Carol, l'artista della fattoria.\n\nBunny utilizzerà un colore alla volta nell'ordine che gli viene dato da Carol. Inoltre, Carol\nsa quali colori sono i più belli, e quindi vuole che il colore $i$-esimo sia utilizzato per\ndipingere un rettangolo largo $L_i$ pannelli.\n\nBunny è però libero di scegliere dove posizionare ogni rettangolo nel muro, e cioè da quale\npannello cominciare a dipingere, a patto di non dipingere oltre i bordi del muro.\nAttenzione che Bunny può anche dipingere sopra i vecchi colori!\n\nA Bunny piacciono le pareti colorate, e quindi vorrebbe che alla fine del lavoro rimangano\nvisibili sul muro più colori possibile (senza considerare il bianco iniziale del muro).\nAiutalo a raggiungere il suo scopo, rispettando però le indicazioni di Carol!\n\nBunny può fare le seguenti azioni:\n\n- `pannelli da pitturare`: quanti pannelli $L_i$ sono da pitturare con il colore corrente $i$ secondo Carol.\n- `colora dalla posizione p`: usa il colore corrente $i$ per pitturare completamente $L_i$\n  pannelli, a partire dal pannello $p$-esimo in poi, poi passa al prossimo colore. Attenzione che devono esistere almeno $L_i$\n  pannelli nel muro a partire dal $p$-esimo!\n- `metti via i pennelli`: finisce di pitturare e termina il programma.\n\nAiuta Bunny a pitturare di modo da lasciare più colori possibile alla fine del lavoro!\n\n<Blockly\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  debug={{ logBlocks: false, logJs: false, logVariables: false }}\n  Visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> In questo programma, Bunny per avere più colori possibile sfrutta un'idea: far sì che tutti i colori dall'inizio\n> fino alla sua posizione siano tutti diversi. Per ogni colore, prova quindi ad iniziare a colorare dalla posizione\n> **pos** che è subito dopo alla posizione da cui ha colorato precedentemente, incrementando quindi **pos** di $1$\n> _(all'inizio, parte a colorare dalla prima posizione)_. Tuttavia, potrebbe essere che Carol gli chieda di pitturare\n> più pannelli di quelli che sono disponibili dalla posizione **pos** in avanti: questo succede se **pos** sommato ai\n> pannelli da pitturare supera $N+1$. In questo caso, Bunny è costretto a cancellare alcuni dei colori che ha già\n> usato: torna quindi indietro il meno possibile, finché non ha abbastanza spazio per pitturare il numero di pannelli\n> che gli è stato richiesto. Dopo aver ripetuto questo procedimento per tutti i colori, Bunny può mettere via i pennelli.\n","import { P1Sequenza, P2Condizioni, P3Mediana, P4CicloLista } from \"problemset\";\nimport { S1ApriPorte, S2AlzaTorre, S3GiraRuota, S4Muro } from \"problemset\";\n\n<Contest>\n\n## Sezione 1: procedimenti procedurali\n\n<Section>\n  <Problem points={[5, 1, 0]} statement={P1Sequenza} />\n  <Problem points={[5, 1, 0]} statement={P2Condizioni} />\n  <Problem points={[5, 1, 0]} statement={P3Mediana} />\n  <Problem points={[5, 1, 0]} statement={P4CicloLista} />\n</Section>\n\n## Sezione 2: programmazione\n\n<Section>\n  <Problem points={[5, 0, 0]} statement={S1ApriPorte} />\n  <Problem points={[5, 0, 0]} statement={S2AlzaTorre} />\n  <Problem points={[5, 0, 0]} statement={S3GiraRuota} />\n  <Problem points={[5, 0, 0]} statement={S4Muro} />\n</Section>\n\n</Contest>\n","import { OlinfoAuth } from \"~/utils/olinfo-auth\";\n\nimport Header from \"./contest/header.md\";\nimport Statement from \"./contest/contest.mdx\";\n\nimport \"~/index.css\";\n\nexport const title = \"Giochi di Fibonacci 2023/2024 - Demo Fase 2\";\nexport const description = \"Prova di allenamento per la seconda fase dei Giochi di Fibonacci 2023/2024\";\n\nexport function App() {\n  return (\n    <OlinfoAuth questionCount={16} duration={90}>\n      <Header />\n      <Statement />\n    </OlinfoAuth>\n  );\n}\n"],"names":["_jsx","_components","image","_jsxs","MathExpr","module","VisualizerContext","createContext","gravity","scale","Canvas","children","width","setWidth","useState","height","setHeight","Provider","value","div","className","style","Sprite","src","alt","x","y","rotation","follow","ref","useRef","pos","changed","useEffect","current","useContext","box","getBoundingClientRect","setTimeout","w","Math","max","h","id","scrollIntoView","behavior","block","inline","clearTimeout","img","left","transform","Rectangle","color","backgroundColor","Variables","variables","Object","entries","map","name","Fragment","Visualizer","blocklyVariables","hiddenState","_Fragment","range","N","i","door","open","openedDoor","closedDoor","rock","bunny","carrot","eaten","customBlocks","initialBlocks","testcases","logBlocks","logJs","logVariables","state","colors","container","parentElement","scrollTop","scrollHeight","rot","larghezze","altezze","px","py","stairs","scatole","span","Sector","from","portion","text","deg","S","C","prizes","friends","carote","strong","paints","__vite_glob_0_0","__vite_glob_0_1","__vite_glob_0_2","__vite_glob_0_3","__vite_glob_0_4","__vite_glob_0_5","__vite_glob_0_6","__vite_glob_0_7","__vite_glob_0_8","__vite_glob_0_9","__vite_glob_0_10","muro","min","colori","em","points","P1Sequenza","P2Condizioni","P3Mediana","P4CicloLista","S1ApriPorte","S2AlzaTorre","S3GiraRuota","S4Muro","title","App","OlinfoAuth","questionCount","duration","Header","Statement"],"mappings":"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"}