{"version":3,"file":"page-fibonacci-primarie-2023-seconda-fase-demo-D_MsbqAH.js","sources":["../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/header.md","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/p-1-sequenza/code.asy","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/p-1-sequenza/question.md","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/s-1-apri-porte/sol.png","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/s-1-apri-porte/testcases.py","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/s-1-apri-porte/asy/bunny.asy?w=66","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/s-1-apri-porte/asy/rock.asy?w=93","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/s-1-apri-porte/asy/closed-door.asy?w=55","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/s-1-apri-porte/asy/opened-door.asy?w=100","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/s-1-apri-porte/asy/carrot.asy?w=40","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/s-1-apri-porte/visualizer.jsx","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/s-1-apri-porte/question.mdx","../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/contest.mdx","../../src/fibonacci-primarie/2023-seconda-fase-demo/index.jsx"],"sourcesContent":["Questa prova contiene _6 domande_ da risolvere in _100 minuti_.\nLe domande sono a **scelta multipla** o a **blocchi**, e sono divise in due parti:\n\n- domande di interpretazione di **procedimenti procedurali** come programmi a blocchi, e\n- domande di **programmazione** tramite blocchi.\n\nIn entrambe le parti, le domande sono ordinate per difficoltà crescente.\n**Attento che la difficoltà è soggettiva!** Se stai passando tanto tempo cercando di risolvere una domanda, prova a passare ad altre domande e altre categorie!\n\n## Punteggio\n\nTutte le domande a _scelta multipla_ hanno 5 opzioni, di cui **solo una** è corretta. Il punteggio che puoi ottenere è:\n\n- 5 punti per una risposta _corretta_;\n- 1 punto per una risposta _non data_;\n- 0 punti per una risposta _sbagliata_.\n\nLe domande a _blocchi_ richiedono di scrivere un singolo programma a blocchi, che viene valutato su tre diversi livelli.\nPer ciascuna domanda e per ciascun livello, Il punteggio che puoi ottenere è:\n\n- 5 punti se il programma produce la risposta _corretta_;\n- 0 punti se il programma produce una risposta _sbagliata_.\n\nQuindi ogni domanda a blocchi può valere fino a 15 punti in totale.\n","import \"/scolastiche/src/asy_library/structures/layout.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_DNTJ1fCG,\n  width: \"976.289\",\n  height: \"973.122\",\n};\nexport default image;","Quali dei tre procedimenti consentono a Tip-Tap di prepararsi un piatto di carote? All'inizio piatto e carote sono nella dispensa, e alla fine devono trovarsi entrambi sul suo tavolo.\n\n![test](code.asy)\n\n- [x] Solo 1\n- [ ] Solo 2\n- [ ] Solo 3\n- [ ] 1 e 2\n- [ ] 2 e 3\n\n> Il procedimento 1 consente a Tip-Tap di preparare un piatto di carote, portando prima il piatto e poi le carote dalla dispensa al tavolo. Il procedimento 2 non funziona, perché impone a Tip-Tap di posare il piatto prima di averlo preso. Il procedimento 3 non funziona, perché impone a Tip-Tap di prendere il piatto mentre si trova al tavolo, anche se il piatto si trova nella dispensa.\n","\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_gV$xxbaK,\n  width: \"439\",\n  height: \"565\",\n};\nexport default image;","const module = [{\"door\":[1,1,0,0,1],\"open\":[false,false,false,false,false],\"pos\":0,\"N\":5,\"eaten\":false},{\"door\":[1,1,1,1,1,1,1,1,1,1],\"open\":[false,false,false,false,false,false,false,false,false,false],\"pos\":0,\"N\":10,\"eaten\":false},{\"door\":[0,1,0,0,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,0],\"open\":[false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false],\"pos\":0,\"N\":20,\"eaten\":false}];\nexport default module;","import \"/scolastiche/src/asy_library/pictures/bunny_polychrome.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_CdW3hNOo,\n  width: \"66\",\n  height: \"117.16092318853724\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/pictures/flat_rock.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_BHK7XDzQ,\n  width: \"93\",\n  height: \"26.934057427610732\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/pictures/diagonal_door.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_DF2XiYRB,\n  width: \"55\",\n  height: \"174.3830824820691\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/pictures/diagonal_door.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_CNUalUTl,\n  width: \"100\",\n  height: \"162.2065233729145\",\n};\nexport default image;","import \"/scolastiche/src/asy_library/pictures/carrot.asy?url\";\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_CLLZF_q6,\n  width: \"40\",\n  height: \"40\",\n};\nexport default image;","import React, { Fragment } from \"react\";\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=66\";\nimport rock from \"./asy/rock.asy?w=93\";\nimport closedDoor from \"./asy/closed-door.asy?w=55\";\nimport openedDoor from \"./asy/opened-door.asy?w=100\";\nimport carrot from \"./asy/carrot.asy?w=40\";\n\nexport default function Visualizer({ variables }) {\n  const { blocklyVariables, hiddenState } = variables;\n  if (!hiddenState) return null;\n\n  return (\n    <>\n      <Canvas scale={130}>\n        {range(hiddenState.N).map((i) => (\n          <Fragment key={i}>\n            {!!hiddenState.door[i] &&\n              (hiddenState.open[i] ? (\n                <Sprite src={openedDoor} alt=\"Porta aperta\" x={i + 0.77} y={-0.23} />\n              ) : (\n                <Sprite src={closedDoor} alt=\"Porta chiusa\" x={i + 0.65} y={0} />\n              ))}\n          </Fragment>\n        ))}\n        {range(hiddenState.N + 1).map((i) => (\n          <Sprite key={i} src={rock} alt=\"Sasso\" x={i} y={0.92} />\n        ))}\n        <Sprite src={bunny} alt=\"Bunny\" x={hiddenState.pos + 0.15} y={0.15} follow />\n        <Sprite\n          src={carrot}\n          alt=\"Carota\"\n          x={hiddenState.N + (hiddenState.eaten ? 0.43 : 0.46)}\n          y={hiddenState.eaten ? 0.37 : 0.77}\n        />\n      </Canvas>\n      <Variables variables={blocklyVariables} />\n    </>\n  );\n}\n","import initialBlocks from \"./initialBlocks.json\";\nimport customBlocks from \"./customBlocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nTip-Tap vorrebbe tanto mangiare la sua carota, prima però deve raggiungerla!\nA separarlo dal suo obiettivo ci sono $N$ rocce, alcune divise da porte chiuse.\nTip-Tap sa compiere le seguenti azioni:\n\n- `avanza`: salta alla roccia più vicina a destra, solo se non c'è una porta chiusa in mezzo.\n- `vedi porta`: condizione vera se di fianco a te c'è una porta chiusa.\n- `apri porta`: apri la porta a destra, ma solo se è di fianco a te.\n- `mangia carota`: mangia la carota a destra (solo se è di fianco a te) e termina il programma.\n\nScrivi un programma che consenta a Tip-Tap di mangiare sempre la carota!\n\n<Blockly\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  debug={{ logBlocks: false, logJs: false, logVariables: false }}\n  Visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Secondo questo programma, per ognuno degli $N$ passi che Tip-Tap deve fare, il protagonista\n> controlla innanzitutto se vede una porta chiusa. Se la vede, allora la apre; e poi in ogni caso\n> avanza alla roccia successiva. Completati tutti gli $N$ passi, Tip-Tap procede quindi a mangiare la carota.\n","import { P1Sequenza, P2Condizioni, P3Mediana } from \"problemset\";\nimport { S1ApriPorte, S2AlzaTorre, S3GiraRuota } from \"problemset\";\n\n<Contest>\n\n## Sezione 1: procedimenti procedurali\n\n<Section>\n  <Problem points={[5, 1, 0]} statement={P1Sequenza} />\n  <Problem points={[5, 1, 0]} statement={P2Condizioni} />\n  <Problem points={[5, 1, 0]} statement={P3Mediana} />\n</Section>\n\n## Sezione 2: programmazione\n\n<Section>\n  <Problem points={[5, 0, 0]} statement={S1ApriPorte} />\n  <Problem points={[5, 0, 0]} statement={S2AlzaTorre} />\n  <Problem points={[5, 0, 0]} statement={S3GiraRuota} />\n</Section>\n\n</Contest>\n","import { OlinfoAuth } from \"~/utils/olinfo-auth\";\n\nimport Header from \"./contest/header.md\";\nimport Statement from \"./contest/contest.mdx\";\n\nimport \"~/index.css\";\n\nexport const title = \"Giochi di Fibonacci 2023/2024 - Demo Fase II - Scuole primarie\";\nexport const description = \"Prova di allenamento per la seconda fase dei Giochi di Fibonacci 2023/2024 per le scuole primarie\";\n\nexport function App() {\n  return (\n    <OlinfoAuth contestName={description} questionCount={12} duration={100}>\n      <Header />\n      <Statement />\n    </OlinfoAuth>\n  );\n}\n"],"names":["_jsx","_components","image","module","Visualizer","variables","blocklyVariables","hiddenState","_Fragment","Canvas","scale","range","N","map","i","Fragment","door","open","Sprite","src","openedDoor","alt","x","y","closedDoor","rock","bunny","pos","follow","carrot","eaten","Variables","children","MathExpr","customBlocks","initialBlocks","testcases","logBlocks","logJs","logVariables","points","P1Sequenza","P2Condizioni","P3Mediana","S1ApriPorte","S2AlzaTorre","S3GiraRuota","title","description","App","OlinfoAuth","contestName","questionCount","duration","Header","Statement"],"mappings":"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"}