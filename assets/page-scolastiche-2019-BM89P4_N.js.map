{"version":3,"file":"page-scolastiche-2019-BM89P4_N.js","sources":["../../src/scolastiche/2019/contest/logica-1-pt-01/question.md","../../src/scolastiche/2019/contest/logica-1-pt-02/question.md","../../src/scolastiche/2019/contest/logica-2-pt-03/question.md","../../src/scolastiche/2019/contest/logica-2-pt-04/question.md","../../src/scolastiche/2019/contest/logica-3-pt-05/question.md","../../src/scolastiche/2019/contest/prog-1-pt-06/es6.svg?s=2","../../src/scolastiche/2019/contest/prog-1-pt-06/question.md","../../src/scolastiche/2019/contest/prog-2-pt-07/es7.svg?s=2","../../src/scolastiche/2019/contest/prog-2-pt-07/question.md","../../src/scolastiche/2019/contest/prog-2-pt-08/es8.svg?s=2","../../src/scolastiche/2019/contest/prog-2-pt-08/question.md","../../src/scolastiche/2019/contest/prog-2-pt-09/es9.svg?s=2","../../src/scolastiche/2019/contest/prog-2-pt-09/question.md","../../src/scolastiche/2019/contest/prog-2-pt-10/es10.svg?s=2","../../src/scolastiche/2019/contest/prog-2-pt-10/question.md","../../src/scolastiche/2019/contest/prog-3-pt-11/es11.svg?s=2","../../src/scolastiche/2019/contest/prog-3-pt-11/question.md","../../src/scolastiche/2019/contest/prog-3-pt-12/es12.png?w=400","../../src/scolastiche/2019/contest/prog-3-pt-12/es12b.png","../../src/scolastiche/2019/contest/prog-3-pt-12/question.md","../../src/scolastiche/2019/contest/algo-1-pt-13/question.md","../../src/scolastiche/2019/contest/algo-1-pt-14/question.md","../../src/scolastiche/2019/contest/algo-2-pt-15/es15a.png","../../src/scolastiche/2019/contest/algo-2-pt-15/es15b.png","../../src/scolastiche/2019/contest/algo-2-pt-15/question.md","../../src/scolastiche/2019/contest/algo-2-pt-16/es16.png","../../src/scolastiche/2019/contest/algo-2-pt-16/es16b.png","../../src/scolastiche/2019/contest/algo-2-pt-16/question.md","../../src/scolastiche/2019/contest/algo-2-pt-17/question.md","../../src/scolastiche/2019/contest/algo-2-pt-18/es18.png","../../src/scolastiche/2019/contest/algo-2-pt-18/question.md","../../src/scolastiche/2019/contest/algo-3-pt-19/es19.png","../../src/scolastiche/2019/contest/algo-3-pt-19/question.md","../../src/scolastiche/2019/contest/algo-3-pt-20/es20.png","../../src/scolastiche/2019/contest/algo-3-pt-20/question.md","../../src/scolastiche/2019/contest/contest.mdx","../../src/scolastiche/2019/index.jsx"],"sourcesContent":["---\nvariants:\n  - bianchi: 50\n    neri: 50\n    sol: 3\n  - bianchi: 30\n    neri: 30\n    sol: 3\n  - bianchi: 60\n    neri: 60\n    sol: 3\n  - bianchi: 10\n    neri: 10\n    sol: 3\n---\n\nDato un cassetto con {bianchi} calzini bianchi e {neri} calzini neri qual è il numero minimo di\ncalzini da estrarre per essere sicuri di averne almeno due dello stesso colore?\n\n?> {sol}\n","---\nvariants:\n  - sol: 5000\n    soldi: 13\\,000\n  - sol: 10000\n    soldi: 26\\,000\n  - sol: 15000\n    soldi: 39\\,000\n  - sol: 20000\n    soldi: 52\\,000\n---\n\nValerio e Martina hanno scoperto di aver ereditato una piccola somma da un lontano parente venuto a mancare da poco.\nIl testamento contiene le indicazioni sull’importo che spetta a ciascuno dei due ragazzi, ovvero quanto segue:\n\n``_Vorrei che il doppio di quanto spetti a Martina sia pari al triplo di quanto spetti a Valerio;\nvorrei inoltre che il doppio di quanto spetti a Valerio, sommato con il triplo di quanto spetti a Martina,\nsia pari a $\\js{soldi}$ euro._''\n\nQual è il valore complessivo dell'eredità di Martina e Valerio?\n\n?> {sol}\n","Dato il seguente insieme $A = \\{1, 2, 3, 4, 7, 32, 89, 145, 106, 33, 36, 39\\}$,\nqual è il numero di possibili coppie non ordinate di insiemi $A_1$ e $A_2$ tali\nche $|A_1| = |A_2|$ (dove con $|X|$ si intende il numero di elementi contenuti\nnell'insieme $X$), $A_1 \\cup A_2 = A$, $A_1 \\cap A_2 = \\emptyset$ e\n$\\text{somma}(A_1) = \\text{somma}(A_2)$ (dove $\\text{somma}(X)$ è la somma di tutti\ngli elementi nell'insieme $X$)?\n\n?> 0\n","Un numero naturale è palindromo se letto in senso inverso è identico a sé stesso; ad esempio, $151$ e $17271$\nsono numeri palindromi. Un numero naturale $n$ si dice palizero se ha un numero dispari di cifre, è palindromo\ne la cifra che appare una sola volta al centro è lo $0$. Es. $1234567890987654321$ è palizero, $3980893$ è palizero,\n$23732$, $23400432$ e $124421$ sono palindromi ma non palizeri.\n\nSi dica quanti sono i numeri palizeri compresi tra $10^3$ e $10^5$ estremi esclusi.\n\n?> 90\n","Due treni sono sullo stesso binario e viaggiano uno verso l'altro; la distanza iniziale tra di loro è di 300 km; il\nprimo treno viaggia a 80km/h, il secondo a 70km/h. Un velocissimo colibrì, che vola a 120km/h, parte dalla\nlocomotiva del primo treno e arriva a toccare la locomotiva del secondo, a quel punto si gira e torna indietro\nfino a toccare la locomotiva del primo, dove si gira e torna indietro e così via finché i due treni si scontrano.\n\nQuanti chilometri ha percorso, complessivamente, il colibrì?\n\n?> 240\n","\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_ByAfBE_o,\n  width: \"682\",\n  height: \"542\",\n};\nexport default image;","Data la seguente funzione:\n\n![](es6.svg?s=2)\n\nIndicare l'affermazione vera tra le seguenti:\n\n- [ ] Questa funzione restituisce 1 solo se la coppia (`par1`, `par2`) si trova nel cerchio di raggio `par3`\n- [x] Questa funzione restituisce 1 se chiamata sulla terna $(1, 0, 3)$\n- [ ] Questa funzione restituisce 0 per tutte le terne della forma $(a, 2a, 3a)$\n- [ ] Questa funzione deve essere chiamata con `par3` $\\geq 0$\n","\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_DEQmys0g,\n  width: \"428\",\n  height: \"642\",\n};\nexport default image;","Dato il seguente programma:\n\n![](es7.svg?s=2)\n\nDando in input il vettore `v = [3.45, 5.67, 8.92, 2.12, 7.33, 8.21, 4.21, 9.03]` alla procedura insieme all'intero `n = 8`, quanto vale la somma di `v` al termine della procedura?\n\n?> 50\n","\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_BCMY_cX$,\n  width: \"556\",\n  height: \"518\",\n};\nexport default image;","Cosa scrive a video il seguente programma?\n\n![](es8.svg?s=2)\n\n- [ ] Lo array dopo l’esecuzione di `pp` vale `[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]`\n- [ ] Lo array dopo l’esecuzione di `pp` vale `[6.25, 6.25, 6.25, 6.25, 6.25, 6.25, 6.25, 0, 0, 0]`\n- [x] Lo array dopo l’esecuzione di `pp` vale `[6.25, 6.25, 6.25, 6.25, 6.25, 0, 0, 0, 0, 0]`\n- [ ] Lo array dopo l’esecuzione di `pp` vale `[0, 0, 0, 0, 0, 6.25, 6.25, 6.25, 6.25, 6.25]`\n","\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_CQB02YG5,\n  width: \"480\",\n  height: \"1000\",\n};\nexport default image;","Quale disposizione di asterischi viene stampata a schermo tra le seguenti?\n\n![](es9.svg?s=2)\n\nRispondere con un numero a 5 cifre: ogni cifra corrisponde al numero di asterischi nella corrispondente riga, dall'alto verso il basso.\n\n?> 12121\n","\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_C4y03at2,\n  width: \"410\",\n  height: \"570\",\n};\nexport default image;","Dato il seguente programma:\n\n![](es10.svg?s=2)\n\nScegliere quella corretta fra le seguenti opzioni:\n\n- [ ] Il programma stampa `p1 = 40.00`, `p2 = 35.71`\n- [x] Il programma stampa il rapporto, in percentuale, degli elementi appartenenti all’intersezione dei due insiemi (`v` e `w`) sul totale degli elementi rispettivamente del primo e del secondo insieme\n- [ ] Il programma stampa il rapporto, in percentuale, degli elementi appartenenti all’unione dei due insiemi sul totale degli elementi rispettivamente del primo (`v`) e del secondo insieme (`w`)\n- [ ] Il programma stampa `p1 = 200.00`, `p2 = 120.71`\n","\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_DrTtevQP,\n  width: \"488\",\n  height: \"400\",\n};\nexport default image;","Dato il seguente programma:\n\n![](es11.svg?s=2)\n\nSi supponga di eseguire `rec1(4, 6)`.\n\nQuante chiamate rispettivamente di `rec1` (NUMREC1) e `rec2` (NUMREC2) sono necessarie prima che una\ndelle due funzioni restituisca il valore zero? Nelle chiamate di `rec1` contare anche la chiamata iniziale\n`rec1(4, 6)`.\n\nRispondere con $100 \\cdot \\text{NUMREC1} + \\text{NUMREC2}$.\n\n?> 202\n","\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_GkU32Yir,\n  width: \"400\",\n  height: \"514\",\n};\nexport default image;","\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_BQYVL62M,\n  width: \"1208\",\n  height: \"159\",\n};\nexport default image;","Un file di testo conteneva due diverse funzioni per il calcolo del numero di modi diversi in cui è possibile\nordinare `n` oggetti.\nLe linee dello pseudocodice sono state accidentalmente disordinate, come riportato qui sotto.\n\n![](es12.png?w=400)\n\nPer ricostruire l'ordinamento corretto delle linee di codice è necessario produrre una lista di coppie (LETT,\nNUM), in cui LETT corrisponde alla lettera che identifica una riga, come indicato sopra e NUM corrisponde al\nnumero che tale riga avrebbe nell'ordinamento corretto (nota: i numeri di riga partono da 1), come indicato\nnella seguente griglia, in cui alcuni numeri sono già stati inseriti:\n\n![](es12b.png)\n\nSi chiede quindi di riportare i numeri corretti associati alle lettere A, E, G, H, N, P, R, S e U che completino\ncorrettamente la suddetta griglia. Rispondere concatenando i numeri di riga associati alle lettere mancanti.\n\n?> 10715815141719\n","Nell’informatica si parla di “edit distance” quando si vuole misurare quanto sono diverse due parole $w_1$ e $w_2$.\nSi dice che due parole $w_1$ e $w_2$ hanno distanza:\n\n- 1 se $w_1$ è ottenuta da $w_2$ modificando una lettera (ad esempio, sono a distanza 1 “cane” e “cene”) o viceversa;\n- 2 se $w_1$ è ottenuta da $w_2$ inserendo una lettera in una qualunque posizione (ad esempio, sono a distanza 2 “mangia” e “mangiai”) o viceversa.\n\nLuca ha saputo che Mario partecipa alle Olimpiadi di Informatica e ha deciso di cercare su Google che cosa\nsono, ma ha commesso alcuni errori di battitura e ha scritto: “Olinpiadi Italianer de Informatia”.\n\nSapendo che la distanza tra due frasi è la somma delle distanze tra le parole corrispondenti,\novvero quanto la frase scritta da Luca si discosta da “Olimpiadi Italiane di Informatica”\n\n?> 6\n","Siano A e B due insiemi tali che $A = \\{1, 2, 5, 8\\}$ e $B = \\{3, 5, 9, 11, 42\\}$.\nSi definisce $D(x, X)$ il numero di elementi presenti in X di cui x è un divisore\n(formalmente $D(x, X) = \\#\\{y \\text{ in } X \\text{ such that } x | y\\}$).\nIndicare il più piccolo numero c tale che risulti $D(c, A) > D(c, B)$.\n\n?> 2\n","\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_D5q5RwRd,\n  width: \"746\",\n  height: \"153\",\n};\nexport default image;","\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_YJInjTDM,\n  width: \"736\",\n  height: \"148\",\n};\nexport default image;","Data la funzione $f(x) = 2x \\mod 7$ (ovvero $f(x)$ è il resto ottenuto dividendo $2x$ per $7$) si consideri la seguente\ntabella, denominata BF1:\n\n![](es15a.png)\n\nUna generica tabella di tipo BF rappresenta un insieme di interi.\n\nLa regola per inserire valori nella tabella BF è la seguente: inizialmente sono tutti zero. Se si vuole inserire in\nBF un intero $x$, si deve applicare a $x$ la funzione $f$ e poi scrivere un $1$ nella posizione numero $f(x)$. Se era già\npresente un $1$ in posizione $f(x)$ non si deve fare niente.\n\nAd esempio, se si vuole inserire nella tabella BF1 il numero $6$ non si deve far altro che osservare che $6\\cdot 2$\nmodulo $7$ fa $5$ e inserire un $1$ in posizione $5$, ottenendo la tabella BF2:\n\n![](es15b.png)\n\nIndicare la corretta fra le seguenti affermazioni, riferite alla prima tabella BF1:\n\n- [ ] In BF1 è presente il numero $4$\n- [ ] In BF1 non è presente il numero $19$\n- [ ] In BF1 potrebbe essere presente il numero $6$\n- [x] In BF1 potrebbe essere presente il numero $12$\n","\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_Ceahtdj3,\n  width: \"1126\",\n  height: \"377\",\n};\nexport default image;","\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_CsSNcyo6,\n  width: \"254\",\n  height: \"250\",\n};\nexport default image;","Nel gioco Lights Out si ha una matrice di $5\\times 5$ luci, che possono essere accese o spente. Premendo su un\nelemento della matrice, si cambia lo stato di quell'elemento e dei suoi quattro vicini (alto, basso, destra e\nsinistra), come mostrato nella figura di seguito.\n\n![](es16.png)\n\nSi consideri una versione semplificata, con una matrice $4\\times 4$ come quella mostrata nella figura qui sotto.\n\n![](es16b.png)\n\nInizialmente le luci sono tutte spente. Una mossa consiste nel premere un elemento della matrice. Qual è il\nnumero minimo di mosse che bisogna fare per arrivare alla configurazione in cui tutte le luci sono accese?\n\n?> 4\n","Si prenda $R = \\{00101, 101, 1010101, 1111001\\}$.\n\nSi indichi una stringa binaria w (fatta di soli 0 e 1) che contenga al più 13 caratteri tale che ogni stringa\npresente nell'insieme $R$ sia una sottostringa di w. La stringa w deve iniziare con un 1.\n\n?> 1111001010101\n","\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_D_Fogdwo,\n  width: \"408\",\n  height: \"483\",\n};\nexport default image;","La grafica della tartaruga prevede che si possano impartire degli ordini di movimento a una tartaruga, che li\neseguirà lasciando sul terreno una traccia dei suoi movimenti, come se avesse una penna attaccata sotto la\npancia. Gli ordini possono essere impartiti tramite un semplice linguaggio, stando attenti che:\n\n- le istruzioni destra e sinistra sono relative all'orientamento attuale della tartaruga, e il numero che segue è un angolo di rotazione (rispettivamente orario e antiorario) espresso in gradi;\n- le istruzioni pennasu e pennagiu sollevano e abbassano rispettivamente la penna sotto la pancia della tartaruga: quando la penna è sollevata ovviamente non lascia tracce sul terreno;\n- l'istruzione ripeti fa ripetere il blocco che segue, delimitato da parentesi graffe, per un numero di volte indicato a fianco dell'istruzione.\n\n![](es18.png)\n\nQuest’anno la tartaruga vuole realizzare un\nautoritratto. Prima ha disegnato la sua sagoma a\nmatita (in figura la linea tratteggiata) e poi ha\niniziato a ricalcarla con la penna.\nIn questo momento la tartaruga si trova nel vertice\nin alto a sinistra dell’esagono più alto ed è nella\ncondizione pennagiu, sapendo che gli esagoni\ndel carapace sono regolari e hanno lato l,\nscegliere tra le seguenti quattro alternative quella\nche **non** fa il disegno corretto.\n\n- [ ] {\" \"}\n  ```\n  ripeti 4 {\n      destra 60\n      avanti l\n      sinistra 60\n      avanti l\n  }\n  ripeti 4 {\n      sinistra 60\n      avanti l\n  }\n  ripeti 3 {\n      pennasu\n      destra 180\n      avanti l\n      pennagiu\n      ripeti 3 {\n          sinistra 60\n          avanti l\n      }\n  }\n  ```\n- [ ] {\" \"}\n  ```\n  ripeti 4 {\n      destra 60\n      avanti l\n      sinistra 60\n      avanti l\n  }\n  ripeti 4 {\n      sinistra 60\n      avanti l\n  }\n  ripeti 3 {\n      pennasu\n      sinistra 180\n      avanti l\n      pennagiu\n      ripeti 3 {\n          sinistra 60\n          avanti l\n      }\n  }\n  ```\n- [x] {\" \"}\n  ```\n  ripeti 4 {\n      avanti l\n      destra 60\n      sinistra 60\n      avanti l\n  }\n  ripeti 4 {\n      sinistra 60\n      avanti l\n  }\n  ripeti 3 {\n      pennasu\n      destra 180\n      avanti l\n      pennagiu\n      ripeti 3 {\n          sinistra 60\n          avanti l\n      }\n  }\n  ```\n- [ ] {\" \"}\n  ```\n  ripeti 4 {\n      destra 60\n      avanti l\n      sinistra 60\n      avanti l\n  }\n  ripeti 4 {\n      sinistra 60\n      avanti l\n  }\n  ripeti 3 {\n      destra 180\n      pennasu\n      avanti l\n      pennagiu\n      ripeti 3 {\n          sinistra 60\n          avanti l\n      }\n  }\n  ```\n","\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_OfccrSQF,\n  width: \"663\",\n  height: \"341\",\n};\nexport default image;","In un vecchio edificio ci sono 10 computer che devono essere collegati in rete. Dato l’elevato spessore delle\npareti, non è possibile usare una rete wifi e si decide, quindi, di collegarli via cavo. Non sono possibili tutti i\ncollegamenti, e ogni collegamento ha un costo diverso. Si deve aiutare a progettare la rete scegliendo i nove\ncollegamenti necessari per fare in modo che ogni computer sia collegato alla rete (ovvero ad almeno un altro\ncomputer) e che il costo complessivo sia minimo. Dopo che i nove collegamenti saranno stati scelti, indicare\nil costo totale, pari alla somma dei costi dei nove collegamenti selezionati.\n\n![](es19.png)\n\n?> 88\n","\nconst image = {\n  src: import.meta.ROLLUP_FILE_URL_VQ5sn639,\n  width: \"319\",\n  height: \"465\",\n};\nexport default image;","La famosa Sushi Squad, composta da 5 studenti delle scuole\nsuperiori, si trova nel noto sushi bar Minimax Hao. Dal tavolo del\nsashimi (riportato in figura) i 5 protagonisti possono prendere un\nsolo piatto, ma la squadra si divide in 2: gli amanti del salmone\n(S) e gli amanti del tonno (T), in cui ognuna delle due fazioni\nvuole che dal tavolo venga preso il piatto contenente la maggior\nquantità del pesce preferito.\n\n![](es20.png)\n\nLe due squadre S e T si disputano la scelta del piatto giocando\nsecondo questa logica: la squadra S ha diritto a selezionare una\nriga, la squadra T una colonna.\nValutare i due seguenti scenari.\n\nA) Sia la squadra S ad iniziare il gioco.\nS seleziona la riga in modo tale che, qualunque sia la colonna che sceglierà T nella mossa successiva, sia\nmassimo il numero minimo di filetti di salmone nel piatto. T, quando arriva il suo turno, sceglie semplicemente\nil piatto con più filetti di tonno.\n\nB) Sia la squadra T ad iniziare il gioco.\nT seleziona la colonna in modo tale che, qualunque sia la riga scelta da S nella mossa successiva, sia\nmassimo il numero minimo di filetti di tonno nel piatto. Quando arriva il turno di S, questa sceglie\nsemplicemente il piatto con più filetti di salmone.\nSi devono indicare RA e CA (ovvero i numeri di riga e colonna scelti nello scenario A) e RB e CB (ovvero\ni numeri di riga e colonna scelti nello scenario B). Per esempio, la risposta “1” (numero intero di una sola\ncifra) per RA indica che si intende dare come risposta la prima riga dello scenario A.\n\nRispondere concatenando i valori RA, CA, RB, CB.\n\n?> 1232\n","import { Logica1pt01, Logica1pt02 } from \"problemset\";\nimport { Logica2pt03, Logica2pt04 } from \"problemset\";\nimport { Logica3pt05 } from \"problemset\";\nimport { Prog1pt06 } from \"problemset\";\nimport { Prog2pt07, Prog2pt08, Prog2pt09, Prog2pt10 } from \"problemset\";\nimport { Prog3pt11, Prog3pt12 } from \"problemset\";\nimport { Algo1pt13, Algo1pt14 } from \"problemset\";\nimport { Algo2pt15, Algo2pt16, Algo2pt17, Algo2pt18 } from \"problemset\";\nimport { Algo3pt19, Algo3pt20 } from \"problemset\";\n\n<Contest>\n\n## Sezione 1: Esercizi a carattere logico-matematico\n\n<Section>\n  <Problem points={[1, 0, 0]} statement={Logica1pt01} />\n  <Problem points={[1, 0, 0]} statement={Logica1pt02} />\n  <Problem points={[2, 0, 0]} statement={Logica2pt03} />\n  <Problem points={[2, 0, 0]} statement={Logica2pt04} />\n  <Problem points={[3, 0, 0]} statement={Logica3pt05} />\n</Section>\n\n## Sezione 2: Esercizi di programmazione\n\n<Section>\n  <Problem points={[1, 0, 0]} statement={Prog1pt06} />\n  <Problem points={[2, 0, 0]} statement={Prog2pt07} />\n  <Problem points={[2, 0, 0]} statement={Prog2pt08} />\n  <Problem points={[2, 0, 0]} statement={Prog2pt09} />\n  <Problem points={[2, 0, 0]} statement={Prog2pt10} />\n  <Problem points={[3, 0, 0]} statement={Prog3pt11} />\n  <Problem points={[3, 0, 0]} statement={Prog3pt12} />\n</Section>\n\n## Sezione 3: Esercizi a carattere algoritmico\n\n<Section>\n  <Problem points={[1, 0, 0]} statement={Algo1pt13} />\n  <Problem points={[1, 0, 0]} statement={Algo1pt14} />\n  <Problem points={[2, 0, 0]} statement={Algo2pt15} />\n  <Problem points={[2, 0, 0]} statement={Algo2pt16} />\n  <Problem points={[2, 0, 0]} statement={Algo2pt17} />\n  <Problem points={[2, 0, 0]} statement={Algo2pt18} />\n  <Problem points={[3, 0, 0]} statement={Algo3pt19} />\n  <Problem points={[3, 0, 0]} statement={Algo3pt20} />\n</Section>\n\n</Contest>\n","import { OlinfoAuth } from \"~/utils/olinfo-auth\";\n\nimport Contest from \"./contest/contest.mdx\";\n\nexport const title = \"Scolastiche 2019\";\nexport const description = \"Olimpiadi Italiane di Informatica 2019/2020 - Selezione scolastica\";\n\nexport function App() {\n  return (\n    <OlinfoAuth contestName={description} questionCount={20} duration={90}>\n      <Contest />\n    </OlinfoAuth>\n  );\n}\n"],"names":["bianchi","neri","_jsxs","_components","_jsx","MathExpr","image","Code","children","points","Logica1pt01","Logica1pt02","Logica2pt03","Logica2pt04","Logica3pt05","Prog1pt06","Prog2pt07","Prog2pt08","Prog2pt09","Prog2pt10","Prog3pt11","Prog3pt12","Algo1pt13","Algo1pt14","Algo2pt15","Algo2pt16","Algo2pt17","Algo2pt18","Algo3pt19","Algo3pt20","title","description","App","OlinfoAuth","contestName","questionCount","duration","Contest"],"mappings":"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"}