{"version":3,"file":"78d6c375-move.js","sources":["../../../node_modules/shiki/dist/langs/move.mjs"],"sourcesContent":["const lang = Object.freeze({ \"displayName\": \"Move\", \"name\": \"move\", \"patterns\": [{ \"include\": \"#address\" }, { \"include\": \"#comments\" }, { \"include\": \"#module\" }, { \"include\": \"#script\" }, { \"include\": \"#annotation\" }, { \"include\": \"#comments\" }, { \"include\": \"#annotation\" }, { \"include\": \"#entry\" }, { \"include\": \"#public-scope\" }, { \"include\": \"#public\" }, { \"include\": \"#native\" }, { \"include\": \"#import\" }, { \"include\": \"#friend\" }, { \"include\": \"#const\" }, { \"include\": \"#struct\" }, { \"include\": \"#has_ability\" }, { \"include\": \"#enum\" }, { \"include\": \"#macro\" }, { \"include\": \"#fun\" }, { \"include\": \"#spec\" }], \"repository\": { \"=== DEPRECATED_BELOW ===\": {}, \"abilities\": { \"comment\": \"Ability\", \"match\": \"\\\\b(store|key|drop|copy)\\\\b\", \"name\": \"support.type.ability.move\" }, \"address\": { \"begin\": \"\\\\b(address)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.type.address.keyword.move\" } }, \"comment\": \"Address block\", \"end\": \"(?<=})\", \"name\": \"meta.address_block.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"begin\": \"(?<=address)\", \"comment\": \"Address value/const\", \"end\": \"(?=[{])\", \"name\": \"meta.address.definition.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#address_literal\" }, { \"comment\": \"Named Address\", \"match\": \"\\\\b(\\\\w+)\\\\b\", \"name\": \"entity.name.type.move\" }] }, { \"include\": \"#module\" }] }, \"annotation\": { \"begin\": \"#\\\\[\", \"end\": \"\\\\]\", \"name\": \"support.constant.annotation.move\", \"patterns\": [{ \"comment\": \"Annotation name\", \"match\": \"\\\\b(\\\\w+)\\\\s*(?==)\", \"name\": \"meta.annotation.name.move\" }, { \"begin\": \"=\", \"comment\": \"Annotation value\", \"end\": \"(?=[,\\\\]])\", \"name\": \"meta.annotation.value.move\", \"patterns\": [{ \"include\": \"#literals\" }] }] }, \"as\": { \"comment\": \"Keyword as (highlighted)\", \"match\": \"\\\\b(as)\\\\b\", \"name\": \"keyword.control.as.move\" }, \"as-import\": { \"comment\": \"Keyword as in import statement; not highlighted\", \"match\": \"\\\\b(as)\\\\b\", \"name\": \"meta.import.as.move\" }, \"block\": { \"begin\": \"{\", \"comment\": \"Block expression or definition\", \"end\": \"}\", \"name\": \"meta.block.move\", \"patterns\": [{ \"include\": \"#expr\" }] }, \"block-comments\": { \"patterns\": [{ \"begin\": \"/\\\\*[\\\\*!](?![\\\\*/])\", \"comment\": \"Block documentation comment\", \"end\": \"\\\\*/\", \"name\": \"comment.block.documentation.move\" }, { \"begin\": \"/\\\\*\", \"comment\": \"Block comment\", \"end\": \"\\\\*/\", \"name\": \"comment.block.move\" }] }, \"capitalized\": { \"comment\": \"MyType - capitalized type name\", \"match\": \"\\\\b([A-Z][a-zA-Z_0-9]*)\\\\b\", \"name\": \"entity.name.type.use.move\" }, \"comments\": { \"name\": \"meta.comments.move\", \"patterns\": [{ \"include\": \"#doc-comments\" }, { \"include\": \"#line-comments\" }, { \"include\": \"#block-comments\" }] }, \"const\": { \"begin\": \"\\\\b(const)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.const.move\" } }, \"end\": \";\", \"name\": \"meta.const.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#primitives\" }, { \"include\": \"#literals\" }, { \"include\": \"#types\" }, { \"match\": \"\\\\b([A-Z_]+)\\\\b\", \"name\": \"constant.other.move\" }, { \"include\": \"#error_const\" }] }, \"control\": { \"comment\": \"Control flow\", \"match\": \"\\\\b(return|while|loop|if|else|break|continue|abort)\\\\b\", \"name\": \"keyword.control.move\" }, \"doc-comments\": { \"begin\": \"///\", \"comment\": \"Documentation comment\", \"end\": \"$\", \"name\": \"comment.block.documentation.move\", \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"markup.underline.link.move\" } }, \"comment\": \"Escaped member / link\", \"match\": \"`(\\\\w+)`\" }] }, \"entry\": { \"comment\": \"entry\", \"match\": \"\\\\b(entry)\\\\b\", \"name\": \"storage.modifier.visibility.entry.move\" }, \"enum\": { \"begin\": \"\\\\b(enum)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.enum.move\" } }, \"comment\": \"Enum syntax\", \"end\": \"(?<=})\", \"name\": \"meta.enum.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#escaped_identifier\" }, { \"include\": \"#type_param\" }, { \"comment\": \"Enum name (ident)\", \"match\": \"\\\\b[A-Z][a-zA-Z_0-9]*\\\\b\", \"name\": \"entity.name.type.enum.move\" }, { \"include\": \"#has\" }, { \"include\": \"#abilities\" }, { \"begin\": \"{\", \"end\": \"}\", \"name\": \"meta.enum.definition.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"match\": \"\\\\b([A-Z][A-Za-z_0-9]*)\\\\b(?=\\\\s*\\\\()\", \"name\": \"entity.name.function.enum.move\" }, { \"match\": \"\\\\b([A-Z][A-Za-z_0-9]*)\\\\b\", \"name\": \"entity.name.type.enum.move\" }, { \"begin\": \"\\\\(\", \"end\": \"\\\\)\", \"name\": \"meta.enum.tuple.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#expr_generic\" }, { \"include\": \"#capitalized\" }, { \"include\": \"#types\" }] }, { \"begin\": \"{\", \"end\": \"}\", \"name\": \"meta.enum.struct.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#escaped_identifier\" }, { \"include\": \"#expr_generic\" }, { \"include\": \"#capitalized\" }, { \"include\": \"#types\" }] }] }] }, \"error_const\": { \"match\": \"\\\\b(E[A-Z][A-Za-z_]*)\\\\b\", \"name\": \"variable.other.error.const.move\" }, \"escaped_identifier\": { \"begin\": \"`\", \"comment\": \"Escaped variable\", \"end\": \"`\", \"name\": \"variable.language.escaped.move\" }, \"expr\": { \"comment\": \"Aggregate Expression\", \"name\": \"meta.expression.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#escaped_identifier\" }, { \"include\": \"#expr_generic\" }, { \"include\": \"#packed_field\" }, { \"include\": \"#import\" }, { \"include\": \"#as\" }, { \"include\": \"#mut\" }, { \"include\": \"#let\" }, { \"include\": \"#types\" }, { \"include\": \"#literals\" }, { \"include\": \"#control\" }, { \"include\": \"#move_copy\" }, { \"include\": \"#resource_methods\" }, { \"include\": \"#self_access\" }, { \"include\": \"#module_access\" }, { \"include\": \"#label\" }, { \"include\": \"#macro_call\" }, { \"include\": \"#local_call\" }, { \"include\": \"#method_call\" }, { \"include\": \"#path_access\" }, { \"include\": \"#match_expression\" }, { \"match\": \"\\\\$(?=[a-z])\", \"name\": \"keyword.operator.macro.dollar.move\" }, { \"match\": \"(?<=[$])[a-z][A-Z_0-9a-z]*\", \"name\": \"variable.other.meta.move\" }, { \"comment\": \"ALL_CONST_CAPS\", \"match\": \"\\\\b([A-Z][A-Z_]+)\\\\b\", \"name\": \"constant.other.move\" }, { \"include\": \"#error_const\" }, { \"comment\": \"CustomType\", \"match\": \"\\\\b([A-Z][a-zA-Z_0-9]*)\\\\b\", \"name\": \"entity.name.type.move\" }, { \"include\": \"#paren\" }, { \"include\": \"#block\" }] }, \"expr_generic\": { \"begin\": \"<(?=([\\\\sa-z_,0-9A-Z<>]+>))\", \"comment\": \"< angle brackets >\", \"end\": \">\", \"name\": \"meta.expression.generic.type.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#types\" }, { \"include\": \"#capitalized\" }, { \"include\": \"#expr_generic\" }] }, \"friend\": { \"begin\": \"\\\\b(friend)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.type.move\" } }, \"end\": \";\", \"name\": \"meta.friend.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#address_literal\" }, { \"comment\": \"Name of the imported module\", \"match\": \"\\\\b([a-zA-Z][A-Za-z_0-9]*)\\\\b\", \"name\": \"entity.name.type.module.move\" }] }, \"fun\": { \"patterns\": [{ \"include\": \"#fun_signature\" }, { \"include\": \"#block\" }] }, \"fun_body\": { \"begin\": \"{\", \"comment\": \"Function body\", \"end\": \"(?<=})\", \"name\": \"meta.fun_body.move\", \"patterns\": [{ \"include\": \"#expr\" }] }, \"fun_call\": { \"begin\": \"\\\\b(\\\\w+)\\\\s*(?:<[\\\\w\\\\s,]+>)?\\\\s*[(]\", \"beginCaptures\": { \"1\": { \"name\": \"entity.name.function.call.move\" } }, \"comment\": \"Function call\", \"end\": \"[)]\", \"name\": \"meta.fun_call.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#resource_methods\" }, { \"include\": \"#self_access\" }, { \"include\": \"#module_access\" }, { \"include\": \"#move_copy\" }, { \"include\": \"#literals\" }, { \"include\": \"#fun_call\" }, { \"include\": \"#block\" }, { \"include\": \"#mut\" }, { \"include\": \"#as\" }] }, \"fun_signature\": { \"begin\": \"\\\\b(fun)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.fun.move\" } }, \"comment\": \"Function signature\", \"end\": \"(?=[;{])\", \"name\": \"meta.fun_signature.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#module_access\" }, { \"include\": \"#capitalized\" }, { \"include\": \"#types\" }, { \"include\": \"#mut\" }, { \"begin\": \"(?<=\\\\bfun)\", \"comment\": \"Function name\", \"end\": \"(?=[<(])\", \"name\": \"meta.function_name.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#escaped_identifier\" }, { \"match\": \"\\\\b(\\\\w+)\\\\b\", \"name\": \"entity.name.function.move\" }] }, { \"include\": \"#type_param\" }, { \"begin\": \"[(]\", \"comment\": \"Parentheses\", \"end\": \"[)]\", \"name\": \"meta.parentheses.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#self_access\" }, { \"include\": \"#expr_generic\" }, { \"include\": \"#escaped_identifier\" }, { \"include\": \"#module_access\" }, { \"include\": \"#capitalized\" }, { \"include\": \"#types\" }, { \"include\": \"#mut\" }] }, { \"comment\": \"Keyword acquires\", \"match\": \"\\\\b(acquires)\\\\b\", \"name\": \"storage.modifier\" }] }, \"has\": { \"comment\": \"Has Abilities\", \"match\": \"\\\\b(has)\\\\b\", \"name\": \"keyword.control.ability.has.move\" }, \"has_ability\": { \"begin\": \"(?<=[})])\\\\s+(has)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.type.move\" } }, \"end\": \";\", \"name\": \"meta.has.ability.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#abilities\" }] }, \"ident\": { \"match\": \"\\\\b([a-zA-Z][A-Z_a-z0-9]*)\\\\b\", \"name\": \"meta.identifier.move\" }, \"import\": { \"begin\": \"\\\\b(use)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.type.move\" } }, \"end\": \";\", \"name\": \"meta.import.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#use_fun\" }, { \"include\": \"#address_literal\" }, { \"include\": \"#as-import\" }, { \"comment\": \"Uppercase entities\", \"match\": \"\\\\b([A-Z]\\\\w*)\\\\b\", \"name\": \"entity.name.type.move\" }, { \"begin\": \"{\", \"comment\": \"Module members\", \"end\": \"}\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#as-import\" }, { \"comment\": \"Uppercase entities\", \"match\": \"\\\\b([A-Z]\\\\w*)\\\\b\", \"name\": \"entity.name.type.move\" }] }, { \"comment\": \"Name of the imported module\", \"match\": \"\\\\b(\\\\w+)\\\\b\", \"name\": \"meta.entity.name.type.module.move\" }] }, \"inline\": { \"comment\": \"inline\", \"match\": \"\\\\b(inline)\\\\b\", \"name\": \"storage.modifier.visibility.inline.move\" }, \"label\": { \"comment\": \"Label\", \"match\": \"'[a-z][a-z_0-9]*\", \"name\": \"string.quoted.single.label.move\" }, \"let\": { \"comment\": \"Keyword let\", \"match\": \"\\\\b(let)\\\\b\", \"name\": \"keyword.control.move\" }, \"line-comments\": { \"begin\": \"//\", \"comment\": \"Single-line comment\", \"end\": \"$\", \"name\": \"comment.line.double-slash.move\" }, \"literals\": { \"comment\": \"Literals supported in Move\", \"name\": \"meta.literal.move\", \"patterns\": [{ \"comment\": \"base16 address literal\", \"match\": \"@0x[A-F0-9a-f]+\", \"name\": \"support.constant.address.base16.move\" }, { \"comment\": \"named address literal @[ident]\", \"match\": \"@[a-zA-Z][a-zA-Z_0-9]*\", \"name\": \"support.constant.address.name.move\" }, { \"comment\": \"Hex literal\", \"match\": \"0x[_a-fA-F0-9]+(?:u(?:8|16|32|64|128|256))?\", \"name\": \"constant.numeric.hex.move\" }, { \"comment\": \"Numeric literal\", \"match\": \"(?<!(?:\\\\w|(?:(?<!\\\\.)\\\\.)))\\\\d[_0-9]*(?:\\\\.(?!\\\\.)(?:\\\\d[_0-9]*)?)?(?:[eE][+\\\\-]?[_0-9]+)?(?:[u](?:8|16|32|64|128|256))?\", \"name\": \"constant.numeric.move\" }, { \"begin\": '\\\\bb\"', \"comment\": \"vector ascii bytestring literal\", \"end\": '\"', \"name\": \"meta.vector.literal.ascii.move\", \"patterns\": [{ \"comment\": \"character escape\", \"match\": \"\\\\\\\\.\", \"name\": \"constant.character.escape.move\" }, { \"comment\": \"Special symbol escape\", \"match\": '\\\\\\\\[nrt\\\\0\"]', \"name\": \"constant.character.escape.move\" }, { \"comment\": \"HEX Escape\", \"match\": \"\\\\\\\\x[a-fA-F0-9][A-Fa-f0-9]\", \"name\": \"constant.character.escape.hex.move\" }, { \"comment\": \"ASCII Character\", \"match\": \"[\\\\x00-\\\\x7F]\", \"name\": \"string.quoted.double.raw.move\" }] }, { \"begin\": 'x\"', \"comment\": \"vector hex literal\", \"end\": '\"', \"name\": \"meta.vector.literal.hex.move\", \"patterns\": [{ \"comment\": \"vector hex literal\", \"match\": \"[A-Fa-f0-9]+\", \"name\": \"constant.character.move\" }] }, { \"comment\": \"bool literal\", \"match\": \"\\\\b(?:true|false)\\\\b\", \"name\": \"constant.language.boolean.move\" }, { \"begin\": \"vector\\\\[\", \"comment\": \"vector literal (macro?)\", \"end\": \"\\\\]\", \"name\": \"meta.vector.literal.macro.move\", \"patterns\": [{ \"include\": \"#expr\" }] }] }, \"local_call\": { \"comment\": \"call to a local / imported fun\", \"match\": \"\\\\b([a-z][_a-z0-9]*)(?=[<(])\", \"name\": \"entity.name.function.call.local.move\" }, \"macro\": { \"begin\": \"\\\\b(macro)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.macro.move\" } }, \"comment\": \"macro fun [ident] {}\", \"end\": \"(?<=})\", \"name\": \"meta.macro.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#fun\" }] }, \"macro_call\": { \"captures\": { \"2\": { \"name\": \"support.function.macro.move\" } }, \"comment\": \"Macro fun call\", \"match\": \"(\\\\b|\\\\.)([a-z][A-Za-z0-9_]*)!\", \"name\": \"meta.macro.call\" }, \"match_expression\": { \"begin\": \"\\\\b(match)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.match.move\" } }, \"comment\": \"enum pattern matching\", \"end\": \"(?<=})\", \"name\": \"meta.match.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#escaped_identifier\" }, { \"include\": \"#types\" }, { \"begin\": \"{\", \"comment\": \"Block expression or definition\", \"end\": \"}\", \"name\": \"meta.match.block.move\", \"patterns\": [{ \"comment\": \"arrow operator\", \"match\": \"\\\\b(=>)\\\\b\", \"name\": \"operator.match.move\" }, { \"include\": \"#expr\" }] }, { \"include\": \"#expr\" }] }, \"method_call\": { \"captures\": { \"1\": { \"name\": \"entity.name.function.call.path.move\" } }, \"comment\": \"<expr>.[ident]<>?() call\", \"match\": \"\\\\.([a-z][_a-z0-9]*)(?=[<(])\", \"name\": \"meta.path.call.move\" }, \"module\": { \"begin\": \"\\\\b(module)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.type.move\" } }, \"comment\": \"Module definition\", \"end\": \"(?<=[;}])\", \"name\": \"meta.module.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"begin\": \"(?<=\\\\b(module)\\\\b)\", \"comment\": \"Module name\", \"end\": \"(?=[;{])\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#escaped_identifier\" }, { \"begin\": \"(?<=\\\\b(module))\", \"comment\": \"Module namespace / address\", \"end\": \"(?=[(::){])\", \"name\": \"constant.other.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#escaped_identifier\" }] }, { \"begin\": \"(?<=::)\", \"comment\": \"Module name\", \"end\": \"(?=[\\\\s;{])\", \"name\": \"entity.name.type.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#escaped_identifier\" }] }] }, { \"begin\": \"{\", \"comment\": \"Module scope\", \"end\": \"}\", \"name\": \"meta.module_scope.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#annotation\" }, { \"include\": \"#entry\" }, { \"include\": \"#public-scope\" }, { \"include\": \"#public\" }, { \"include\": \"#native\" }, { \"include\": \"#import\" }, { \"include\": \"#friend\" }, { \"include\": \"#const\" }, { \"include\": \"#struct\" }, { \"include\": \"#has_ability\" }, { \"include\": \"#enum\" }, { \"include\": \"#macro\" }, { \"include\": \"#fun\" }, { \"include\": \"#spec\" }] }] }, \"module_access\": { \"captures\": { \"1\": { \"name\": \"meta.entity.name.type.accessed.module.move\" }, \"2\": { \"name\": \"entity.name.function.call.move\" } }, \"comment\": \"Use of module type or method\", \"match\": \"\\\\b(\\\\w+)::(\\\\w+)\\\\b\", \"name\": \"meta.module_access.move\" }, \"module_label\": { \"begin\": \"^\\\\s*(module)\\\\b\", \"comment\": \"Module label, inline module definition\", \"end\": \";\\\\s*$\", \"name\": \"meta.module.label.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#escaped_identifier\" }, { \"begin\": \"(?<=\\\\bmodule\\\\b)\", \"comment\": \"Module namespace / address\", \"end\": \"(?=[(::){])\", \"name\": \"constant.other.move\" }, { \"begin\": \"(?<=::)\", \"comment\": \"Module name\", \"end\": \"(?=[\\\\s{])\", \"name\": \"entity.name.type.move\" }] }, \"move_copy\": { \"comment\": \"Keywords move and copy\", \"match\": \"\\\\b(move|copy)\\\\b\", \"name\": \"variable.language.move\" }, \"mut\": { \"comment\": \"Mutable reference and let mut\", \"match\": \"\\\\b(mut)\\\\b\", \"name\": \"storage.modifier.mut.move\" }, \"native\": { \"comment\": \"native\", \"match\": \"\\\\b(native)\\\\b\", \"name\": \"storage.modifier.visibility.native.move\" }, \"packed_field\": { \"comment\": \"[ident]: \", \"match\": \"[a-z][a-z0-9_]+\\\\s*:\\\\s*(?=\\\\s)\", \"name\": \"meta.struct.field.move\" }, \"paren\": { \"begin\": \"\\\\(\", \"end\": \"\\\\)\", \"name\": \"meta.paren.move\", \"patterns\": [{ \"include\": \"#expr\" }] }, \"path_access\": { \"comment\": \"<expr>.[ident] access\", \"match\": \"\\\\.[a-z][_a-z0-9]*\\\\b\", \"name\": \"meta.path.access.move\" }, \"phantom\": { \"comment\": \"Keyword phantom inside type parameters\", \"match\": \"\\\\b(phantom)\\\\b\", \"name\": \"keyword.control.phantom.move\" }, \"primitives\": { \"comment\": \"Primitive types\", \"match\": \"\\\\b(u8|u16|u32|u64|u128|u256|address|bool|signer)\\\\b\", \"name\": \"support.type.primitives.move\" }, \"public\": { \"comment\": \"public\", \"match\": \"\\\\b(public)\\\\b\", \"name\": \"storage.modifier.visibility.public.move\" }, \"public-scope\": { \"begin\": \"(?<=\\\\b(public))\\\\s*\\\\(\", \"comment\": \"public (friend/script/package)\", \"end\": \"\\\\)\", \"name\": \"meta.public.scoped.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"match\": \"\\\\b(friend|script|package)\\\\b\", \"name\": \"keyword.control.public.scope.move\" }] }, \"resource_methods\": { \"comment\": \"Methods to work with resource\", \"match\": \"\\\\b(borrow_global|borrow_global_mut|exists|move_from|move_to_sender|move_to)\\\\b\", \"name\": \"support.function.typed.move\" }, \"script\": { \"begin\": \"\\\\b(script)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.script.move\" } }, \"end\": \"(?<=})\", \"name\": \"meta.script.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"begin\": \"{\", \"comment\": \"Script scope\", \"end\": \"}\", \"name\": \"meta.script_scope.move\", \"patterns\": [{ \"include\": \"#const\" }, { \"include\": \"#comments\" }, { \"include\": \"#import\" }, { \"include\": \"#fun\" }] }] }, \"self_access\": { \"captures\": { \"1\": { \"name\": \"variable.language.self.move\" }, \"2\": { \"name\": \"entity.name.function.call.move\" } }, \"comment\": \"Use of Self\", \"match\": \"\\\\b(Self)::(\\\\w+)\\\\b\", \"name\": \"meta.self_access.move\" }, \"spec\": { \"begin\": \"\\\\b(spec)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.spec.move\" } }, \"end\": \"(?<=[;}])\", \"name\": \"meta.spec.move\", \"patterns\": [{ \"comment\": \"Spec target\", \"match\": \"\\\\b(module|schema|struct|fun)\", \"name\": \"storage.modifier.spec.target.move\" }, { \"comment\": \"Spec define inline\", \"match\": \"\\\\b(define)\", \"name\": \"storage.modifier.spec.define.move\" }, { \"comment\": \"Target name\", \"match\": \"\\\\b(\\\\w+)\\\\b\", \"name\": \"entity.name.function.move\" }, { \"begin\": \"{\", \"comment\": \"Spec block\", \"end\": \"}\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#spec_block\" }, { \"include\": \"#spec_types\" }, { \"include\": \"#spec_define\" }, { \"include\": \"#spec_keywords\" }, { \"include\": \"#control\" }, { \"include\": \"#fun_call\" }, { \"include\": \"#literals\" }, { \"include\": \"#types\" }, { \"include\": \"#let\" }] }] }, \"spec_block\": { \"begin\": \"{\", \"comment\": \"Spec block\", \"end\": \"}\", \"name\": \"meta.spec_block.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#spec_block\" }, { \"include\": \"#spec_types\" }, { \"include\": \"#fun_call\" }, { \"include\": \"#literals\" }, { \"include\": \"#control\" }, { \"include\": \"#types\" }, { \"include\": \"#let\" }] }, \"spec_define\": { \"begin\": \"\\\\b(define)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.move.spec\" } }, \"comment\": \"Spec define keyword\", \"end\": \"(?=[;{])\", \"name\": \"meta.spec_define.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#spec_types\" }, { \"include\": \"#types\" }, { \"begin\": \"(?<=\\\\bdefine)\", \"comment\": \"Function name\", \"end\": \"(?=[(])\", \"patterns\": [{ \"include\": \"#comments\" }, { \"match\": \"\\\\b(\\\\w+)\\\\b\", \"name\": \"entity.name.function.move\" }] }] }, \"spec_keywords\": { \"match\": \"\\\\b(global|pack|unpack|pragma|native|include|ensures|requires|invariant|apply|aborts_if|modifies)\\\\b\", \"name\": \"keyword.control.move.spec\" }, \"spec_types\": { \"comment\": \"Spec-only types\", \"match\": \"\\\\b(range|num|vector|bool|u8|u16|u32|u64|u128|u256|address)\\\\b\", \"name\": \"support.type.vector.move\" }, \"struct\": { \"begin\": \"\\\\b(struct)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.type.move\" } }, \"end\": \"(?<=[};)])\", \"name\": \"meta.struct.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#escaped_identifier\" }, { \"include\": \"#has\" }, { \"include\": \"#abilities\" }, { \"comment\": \"Struct name (ident)\", \"match\": \"\\\\b[A-Z][a-zA-Z_0-9]*\\\\b\", \"name\": \"entity.name.type.struct.move\" }, { \"begin\": \"\\\\(\", \"comment\": \"Positional fields\", \"end\": \"\\\\)\", \"name\": \"meta.struct.paren.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#capitalized\" }, { \"include\": \"#types\" }] }, { \"include\": \"#type_param\" }, { \"begin\": \"\\\\(\", \"comment\": \"Simple struct\", \"end\": \"(?<=[)])\", \"name\": \"meta.struct.paren.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#types\" }] }, { \"begin\": \"{\", \"comment\": \"Struct body\", \"end\": \"}\", \"name\": \"meta.struct.body.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#self_access\" }, { \"include\": \"#escaped_identifier\" }, { \"include\": \"#module_access\" }, { \"include\": \"#expr_generic\" }, { \"include\": \"#capitalized\" }, { \"include\": \"#types\" }] }, { \"include\": \"#has_ability\" }] }, \"struct_pack\": { \"begin\": \"(?<=[A-Za-z0-9_>])\\\\s*{\", \"comment\": \"Struct { field: value... }; identified as generic / ident followed by curly's\", \"end\": \"}\", \"name\": \"meta.struct.pack.move\", \"patterns\": [{ \"include\": \"#comments\" }] }, \"type_param\": { \"begin\": \"<\", \"comment\": \"Generic type param\", \"end\": \">\", \"name\": \"meta.generic_param.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#phantom\" }, { \"include\": \"#capitalized\" }, { \"include\": \"#module_access\" }, { \"include\": \"#abilities\" }] }, \"types\": { \"comment\": \"Built-in types + vector\", \"name\": \"meta.types.move\", \"patterns\": [{ \"include\": \"#primitives\" }, { \"include\": \"#vector\" }] }, \"use_fun\": { \"begin\": \"\\\\b(fun)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.fun.move\" } }, \"comment\": \"use { fun } internals\", \"end\": \"(?=;)\", \"name\": \"meta.import.fun.move\", \"patterns\": [{ \"include\": \"#comments\" }, { \"comment\": \"as keyword\", \"match\": \"\\\\b(as)\\\\b\", \"name\": \"keyword.control.as.move\" }, { \"comment\": \"Self keyword\", \"match\": \"\\\\b(Self)\\\\b\", \"name\": \"variable.language.self.use.fun.move\" }, { \"comment\": \"Function name\", \"match\": \"\\\\b(_______[a-z][a-z_0-9]+)\\\\b\", \"name\": \"entity.name.function.use.move\" }, { \"include\": \"#types\" }, { \"include\": \"#escaped_identifier\" }, { \"include\": \"#capitalized\" }] }, \"vector\": { \"comment\": \"vector type\", \"match\": \"\\\\b(vector)\\\\b\", \"name\": \"support.type.vector.move\" } }, \"scopeName\": \"source.move\" });\nvar move = [\n  lang\n];\n\nexport { move as default };\n"],"names":["lang","move"],"mappings":"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","x_google_ignoreList":[0]}