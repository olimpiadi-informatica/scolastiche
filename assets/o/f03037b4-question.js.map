{"version":3,"file":"f03037b4-question.js","sources":["../../../../src/fibonacci-primarie/2024-seconda-fase/contest/p-1-salto-ostacoli/question.md","../../../../src/fibonacci-primarie/2024-seconda-fase/contest/p-2-spiedino/question.md","../../../../src/fibonacci-primarie/2024-seconda-fase/contest/s-1-pranzo/visualizer.jsx","../../../../src/fibonacci-primarie/2024-seconda-fase/contest/s-1-pranzo/question.mdx","../../../../src/fibonacci-primarie/2024-seconda-fase/contest/s-3-corridoio/visualizer.jsx","../../../../src/fibonacci-primarie/2024-seconda-fase/contest/s-3-corridoio/question.mdx"],"sourcesContent":["Bunny è ormai appassionato di percorsi ad ostacoli, e si trova quindi ora sulla casella $1$ di questo nuovo percorso:\n\n![fig](fig.asy)\n\nCome sempre, il suo obbiettivo è **raggiungere o superare** la casella numero $17$ dove c'è la bandierina del traguardo.\nBunny può fare le seguenti cose:\n+ **avanza**: Bunny avanza alla casella successiva;\n+ **salta**: Bunny supera la casella successiva con un salto, atterrando su quella dopo;\n+ **posizione**: la posizione corrente di Bunny;\n+ **traguardo**: la posizione del traguardo;\n+ **pietra marrone**: vero se Bunny si trova ora su una pietra marrone.\n\nCome nell'ultimo percorso ad ostacoli, sul percorso ci sono delle *grandi rocce*! Bunny non può arrivare su una casella occupata da una *grande roccia*, altrimenti cadrebbe, ma può superarla grazie ad un'azione **salta**.\nSe Bunny segue il procedimento qui sotto, riesce a raggiungere la bandierina?\n\n![code](code.asy)\n\n- [ ] no, perchè si ferma prima di arrivare al traguardo senza cadere\n- [ ] si, raggiunge o supera la bandierina\n- [ ] no, perchè cade sulla *grande roccia* in posizione $4$\n- [X] no, perchè cade sulla *grande roccia* in posizione $10$\n- [ ] no, perchè cade sulla *grande roccia* in posizione $16$\n\n> Bunny cade sulla *grande roccia* in posizione $10$.\n>\n> Inizialmente si trova su una roccia marrone, e quindi salta arrivando in posizione $3$.\n> Anche lì la roccia è marrone quindi salta di nuovo fino in posizione 5, e ancora una volta fino in posizione 7.\n> A questo punto la roccia è grigia, e quindi avanza alla posizione 8.\n> Ma dato che la roccia lì è marrone, salta cadendo direttamente sulla *grande roccia* in posizione $10$.\n>\n> ![primarie](primarie1.asy)\n> ![secondarie](secondarie1.asy)\n\n---\n\nSempre nello stesso percorso ad ostacoli, Bunny vuole provare un po' di strategie diverse:\n\n![fig](fig.asy)\n\n![code](code-alt.asy)\n\nQuali di queste strategie gli consentono di raggiungere o superare il traguardo?\n\n\n- [ ] la strategia 1\n- [ ] la strategia 2\n- [ ] la strategia 3\n- [x] le strategie 1 e 2\n- [ ] le strategie 2 e 3\n\n> Funzionano entrambe le strategie 1 e 2.\n>\n> Nella strategia 2 Bunny salta sempre, toccando tutte le posizioni dispari e quindi evitando tutte le grandi rocce,\n> che si trovano invece in posizioni pari, fino ad arrivare al traguardo in posizione $17$.\n>\n> Nella strategia 1, Bunny fa i salti a coppie: questo lo porta attraverso le posizioni $5$, $9$ e $13$, che hanno tutte\n> la roccia marrone, per poi arrivare sul traguardo in posizione $17$ senza aver mai fatto avanza.\n>\n> Nella strategia 3, invece, Bunny cade sulla roccia $16$.\n> Inizia saltando sulle rocce marroni in posizione $3$ e $5$ per arrivare alla posizione $7$.\n> Da lì avanza due volte alla posizione $9$.\n> A quel punto salta ancora alla posizione $11$, per poi avanzare due volte fino alla posizione $13$.\n> Quindi salta in posizione $15$, e da lì avanza andando a scontrarsi contro la grande roccia.\n>\n> ![primarie](primarie2.asy)\n> ![secondarie](secondarie2.asy)\n","Allie ha preparato un lungo spiedino di 25 gustosi cibi:\n\n![spiedino](fig.asy)\n\nOra deve determinare il **valore** dello spiedino per portarlo al mercato. Per calcolarlo, deve seguire questo procedimento:\n\n![code](code.asy)\n\nQuanto è il valore calcolato alla fine di questo procedimento?\n\n- [ ] 4\n- [x] 8\n- [ ] 12\n- [ ] 18\n- [ ] 25\n\n> Ragionando sul programma di Allie, si può vedere che con un ciclo percorre tutti i valori $i$ da $1$ a $24$,\n> esaminando per ciascuno se i cibi nelle posizioni $i$ e $i+1$ sono diversi. In altre parole, Allie sta\n> esaminando tutte le coppie di cibi vicini, contando quante sono diverse. Questo in pratica conta quanti\n> diverse zone di frutta uguale ci sono sullo spiedino, che sono 8:\n> \n> 1. le due patate;\n> 2. la mela;\n> 3. le due carote;\n> 4. le cinque fette di anguria;\n> 5. le due melanzane;\n> 6. le quattro fragole;\n> 7. le due banane; e infine\n> 8. i sette pomodori.\n>\n> ![primarie](primarie1.asy)\n> ![secondarie](secondarie1.asy)\n\n---\n\nCarol sta pensando che gli piacerebbe cambiare un po' il suo spiedino, di modo che il suo valore aumenti di $5$.\nQuanti frutti dovrà modificare al minimo per ottenere questo risultato?\n\n- [ ] 2\n- [x] 3\n- [ ] 4\n- [ ] 5\n- [ ] 6\n\n> Possiamo creare $5$ zone di frutta in più cambiando solo tre frutti.\n> Con un singolo frutto possiamo spezzare una zona che sia lunga almeno tre per farla diventare tre zone.\n> Questa cosa possiamo farla due volte per aumentare il valore di $4$, per esempio sostituendo\n> una fetta di anguria nel mezzo con una patata e una delle fragole nel mezzo con una mela.\n> \n> A questo punto dobbiamo ancora aumentare il valore di $1$. Questo possiamo farlo sostituendo un cibo\n> alla fine della zona con un'altro diverso: per esempio sostituendo una banana con una carota.\n> Questo sarebbe il risultato finale:\n>\n> ![soluzione](sol.asy)\n>\n> ![primarie](primarie2.asy)\n> ![secondarie](secondarie2.asy)\n","\"use client\";\n\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=66\";\nimport stoveOn from \"./asy/fornello-acceso.asy?w=120\";\nimport stoveBack from \"./asy/fornello-retro.asy?w=120\";\nimport stoveOff from \"./asy/fornello-spento.asy?w=120\";\n\nconst foods = import.meta.glob(\"./asy/cibo-*.asy\", {\n  eager: true,\n  import: \"default\",\n  query: { w: 120 },\n});\n\nexport default function Visualizer({ variables, state }) {\n  function position(x, cook) {\n    if (x === -1) return [1.4, 1.3];\n    if (cook) return [2.2, 1.5];\n    return [0.5 * x + 2.4, 1.3];\n  }\n\n  return (\n    <>\n      <Canvas scale={130}>\n        <Sprite src={bunny} alt=\"Tip-Tap\" x={1.6} y={0.9} follow />\n        <Sprite src={stoveBack} alt=\"Fornello\" x={2.2} y={1.5} />\n        {range(Math.max(state.pos - 1, 0), state.N).map((i) => {\n          const pos = position(i - state.pos, state.queue[i].endsWith(\" cotta\"));\n          return (\n            <Sprite\n              key={i}\n              src={foods[`./asy/cibo-${state.queue[i].split(\" \")[0]}.asy`]}\n              alt={state.queue[i]}\n              x={pos[0]}\n              y={pos[1]}\n            />\n          );\n        })}\n        <Sprite\n          src={\n            state.pos < state.N && state.queue[state.pos].endsWith(\" cotta\") ? stoveOn : stoveOff\n          }\n          alt=\"Fornello\"\n          x={2.2}\n          y={1.5}\n        />\n      </Canvas>\n      <Variables variables={{ ...variables, \"N (num. cibi)\": state.N }} />\n    </>\n  );\n}\n","import initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s1.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nTip-Tap deve preparare il pranzo ed ha allineato $N$ cibi che vuole mangiare.\nOgni cibo è una verdura o un frutto, e Tip-Tap vuole solo mangiare **frutta cruda** e **verdura cotta**.\nHai a disposizione questi blocchi:\n\n- `N`: il numero di cibi che Tip-Tap ha allineato.\n- `prossimo cibo`: il prossimo cibo che Tip-Tap non ha ancora mangiato.\n- $x$ `è una verdura`: vero se il cibo $x$ è una verdura.\n- `cuoci` $x$: cuoci il cibo $x$.\n- `mangia` $x$: mangia il cibo $x$.\n- `termina`: smetti di mangiare.\n\nScrivi un programma che consenta a Tip-Tap di pranzare come più preferisce!\n\n<Blockly\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](code.png)\n>\n> Secondo questo programma, per ognuno degli $N$ cibi che Tip-Tap vuole mangiare, il protagonista\n> controlla se il prossimo cibo è una verdura, e in caso affermativo la cuoce prima di mangiarla.\n> A questo punto mangia il prossimo cibo (che sia verdura o frutta), che sarà di suo gradimento:\n> verdura cotta o frutta cruda.\n>\n> ![primarie](primarie.asy)\n> ![secondarie](secondarie.asy)\n","\"use client\";\n\nimport { Fragment } from \"react\";\n\nimport clsx from \"clsx\";\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bulbOff from \"./asy/bulb-off.asy?w=30\";\nimport bulbOn from \"./asy/bulb-on.asy?w=30\";\nimport bunnyLeft from \"./asy/bunny-left.asy?w=66\";\nimport bunnyRight from \"./asy/bunny-right.asy?w=66\";\nimport closedDoor from \"./asy/closed-door.asy?w=55\";\nimport openedDoor from \"./asy/opened-door.asy?w=100\";\nimport switchOffOff from \"./asy/switch-off-off.asy?w=30\";\nimport switchOffOn from \"./asy/switch-off-on.asy?w=30\";\nimport switchOnOff from \"./asy/switch-on-off.asy?w=30\";\nimport switchOnOn from \"./asy/switch-on-on.asy?w=30\";\n\nexport default function Visualizer({ variables, state }) {\n  // const teams = [fibonacci, turing];\n\n  const height = 24;\n  const width = 18;\n\n  return (\n    <>\n      <Canvas gravity=\"bottom\" scale={10}>\n        {range(state.N).map((i) => (\n          <Rectangle\n            key={`rect${i}`}\n            color={state.light[i] ? \"#eee\" : \"#333\"}\n            height={height}\n            width={width}\n            x={width * (i + 1)}\n            y={6}>\n            <div\n              className={clsx(\n                \"absolute mt-1 size-full origin-bottom text-center text-2xl underline\",\n                state.light[i] ? \"text-black\" : \"text-white\",\n              )}>\n              {i + 1}\n            </div>\n          </Rectangle>\n        ))}\n        {range(state.N).map((i) => (\n          <Sprite\n            key={`bulb${i}`}\n            src={state.light[i] ? bulbOn : bulbOff}\n            alt=\"\"\n            x={width * (i + 1.5) - 1.5}\n            y={20}\n          />\n        ))}\n        {range(state.N * 2).map((i) => (\n          <Sprite\n            key={`switch${i}`}\n            src={\n              i > 0 && state.light[Math.floor((i - 1) / 2)]\n                ? state.switch[i]\n                  ? switchOnOn\n                  : switchOnOff\n                : state.switch[i]\n                  ? switchOffOn\n                  : switchOffOff\n            }\n            alt=\"\"\n            x={width * (0.5 * i + 0.75) - 1.5}\n            y={10}\n          />\n        ))}\n        {range(state.N).map((i) => (\n          <Fragment key={`door${i}`}>\n            {state.door[i] ? (\n              <Sprite src={openedDoor} alt=\"Porta aperta\" x={width * (i + 1) - 1.5} y={3} />\n            ) : (\n              <Sprite src={closedDoor} alt=\"Porta chiusa\" x={width * (i + 1) - 4} y={0} />\n            )}\n          </Fragment>\n        ))}\n        <Sprite\n          key=\"bunny\"\n          src={state.dir === 1 ? bunnyRight : bunnyLeft}\n          alt=\"Bunny\"\n          x={width * (state.pos + 0.5) - 3.5}\n          y={4}\n          follow\n        />\n      </Canvas>\n      <Variables\n        variables={{\n          ...variables,\n          \"N (num. stanze)\": state.N,\n        }}\n      />\n    </>\n  );\n}\n","import initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s3.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nBunny oggi è rimasto a studiare fino a tarda notte nella sua stanza, mentre i suoi amici hanno già iniziato a fare cena insieme intorno al fuoco in giardino.\nOra Bunny li vuole raggiungere, però c'è un problema: ha paura del buio, quindi non è disposto ad entrare in una stanza se prima non ne accende la luce.\nD'altra parte, Bunny è anche molto attento all'ambiente e non vuole lasciare luci accese prima di uscire fuori... neanche quelle che i suoi amici hanno\ndimenticato accese!\n\nLa Fattoria Fibonacci è fatta da $N$ stanze disposte in fila, come un lungo corridoio, separate da porte e numerate $1$, $2$, $\\ldots$, $N$.\nL'esterno della fattoria viene rappresentato come la stanza numero zero.\nIn ogni stanza ci sono due interruttori, che servono per accendere le lampadine delle stanze a destra e a sinistra.\nIl lampadario della prima stanza si può anche spegnere dall'esterno.\nQuando un interruttore viene premuto, accende la lampadina se è spenta e la spegne se è accesa.\nHai a disposizione questi blocchi:\n\n- `N`: il numero di stanze.\n- `stanza corrente`: il numero della stanza corrente, $0$ (esterno) oppure da $1$ a $N$ (stanze).\n- `muovi a destra/sinistra`: spostati nella stanza a destra/sinistra della stanza corrente.\n- `interruttore a destra/sinistra`: premi l'interruttore che comanda la stanza a destra/sinistra.\n- `lampadina a destra/sinistra accesa`: vero se la lampadina nella stanza a destra/sinistra è accesa.\n- `termina`: raggiungi i tuoi amici per la cena intorno al fuoco.\n\nAiuta Bunny a spegnere le luci e raggiungere gli amici, senza trovarsi mai al buio!\n\n<Blockly\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](code.png)\n>\n> Come prima cosa, Bunny deve controllare che non siano rimaste luci accese sulla sua destra, e\n> percorre quindi tutte le stanze andando a destra fino all'ultima stanza (numero $N$).\n> Prima di andare a destra deve però controllare se la lampadina fosse spenta, \n> accendendola quindi per evitare la sua paura del buio.\n>\n> Alla fine di questo primo ciclo, Bunny si troverà nell'ultima stanza della fattoria, e può\n> cominciare a tornare indietro spegnendo le luci dietro di sè. Procede quindi con un altro ciclo\n> in cui va a sinistra, come sempre controllando prima se la luce alla sua sinistra (dove vuole andare)\n> è spenta, e in caso la accende. Dopo essersi spostato a sinistra, spegne la luce della stanza\n> da cui è arrivato.\n>\n> Questo secondo ciclo termina quando Bunny è arrivato nella prima stanza della fattoria, avendo spento tutte\n> le altre luci. Non dovrà quindi fare altro che uscire, spegnere la luce nella prima stanza e poi raggiungere i suoi amici!\n>\n> ![primarie](primarie.asy)\n> ![secondarie](secondarie.asy)\n"],"names":["_jsx","Equation","_components","_jsxs","Image","foods","__vite_glob_0_0","__vite_glob_0_1","__vite_glob_0_2","__vite_glob_0_3","__vite_glob_0_4","__vite_glob_0_5","Visualizer","variables","state","position","x","cook","jsxs","Fragment","Canvas","jsx","Sprite","bunny","stoveBack","range","i","pos","stoveOn","stoveOff","Variables","Code","customBlocks","initialBlocks","testcases","Rectangle","clsx","bulbOn","bulbOff","switchOnOn","switchOnOff","switchOffOn","switchOffOff","openedDoor","closedDoor","bunnyRight","bunnyLeft"],"mappings":"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"}