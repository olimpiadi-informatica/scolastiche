{"version":3,"file":"4870a3ad-question.js","sources":["../../../src/scolastiche/2023/contest/a-1-ordina-colonne/question.md","../../../src/scolastiche/2023/contest/a-14-rettangoli-cornice/question.md","../../../src/scolastiche/2023/contest/a-5-cancella-permutazione/question.md","../../../src/scolastiche/2023/contest/a-5-cancella-permutazione-fib/question.md","../../../src/scolastiche/2023/contest/a-6-muro-mattoni/question.md","../../../src/scolastiche/2023/contest/a-8-grafo-disconnesso/question.md","../../../src/scolastiche/2023/contest/m-12-cavalieri-furfanti/question.md","../../../src/scolastiche/2023/contest/m-14-bigliettino/question.md","../../../src/scolastiche/2023/contest/m-17-quasi-ordinato/question.md","../../../src/scolastiche/2023/contest/m-3-permuta-sottrai/question.md","../../../src/scolastiche/2023/contest/m-5-palline-tricolori/question.md","../../../src/scolastiche/2023/contest/m-5-palline-tricolori-fib/question.md","../../../src/scolastiche/2023/contest/m-6-stringa-oii/question.md","../../../src/scolastiche/2023/contest/m-6-stringa-oii-fib/question.md","../../../src/scolastiche/2023/contest/m-8-gioco-oca/question.md","../../../src/scolastiche/2023/contest/m-9-easy-rettangoli-cornice-fib/question.md","../../../src/scolastiche/2023/contest/m-9-hard-rettangoli-cornice/question.md","../../../src/scolastiche/2023/contest/p-10-riordina-istruzioni/question.md","../../../src/scolastiche/2023/contest/p-11-oggetti-ifelse/question.md","../../../src/scolastiche/2023/contest/p-2-somma-zero/question.md","../../../src/scolastiche/2023/contest/p-3-step-invariante/question.md","../../../src/scolastiche/2023/contest/p-4-intervalli-nascosti/question.md","../../../src/scolastiche/2023/contest/p-5-piu-stampato/question.md","../../../src/scolastiche/2023/contest/p-6-walk-back/question.md","../../../src/scolastiche/2023/contest/p-7-terzo-numero/question.md","../../../src/scolastiche/2023/contest/p-7-terzo-numero-fib/question.md","../../../src/scolastiche/2023/contest/p-8-sostituisci-riga/question.md","../../../src/scolastiche/2023/contest/p-9-mangia-carota/question.md"],"sourcesContent":["import variants from \"./variants.py\";\n\nData una tabella $A$ con $K$ righe e $N$ colonne, contenente i numeri da $1$ a $NK$, una sua _simile_ è una tabella che si ottiene da $A$ riordinando i numeri nelle colonne, colonna per colonna (e in alcune colonne l'ordine potrebbe rimanere lo stesso).\n\nUna tabella è detta _crescente_ se in ogni sua riga i numeri sono in ordine crescente da sinistra verso destra.\nPer esempio, data la tabella a sinistra, quella a destra è una tabella simile crescente.\n\n![](examples.asy?v=variants.py)\n\nQuante sono le tabelle crescenti simili alla seguente tabella?\n\n![](table1.asy?v=variants.py)\n\n?> {ans1}\n\n---\n\nQuante sono le tabelle crescenti simili alla seguente tabella?\n\n![](table2.asy?v=variants.py)\n\n?> {ans2}\n","Tip-Tap ha ricevuto $5$ cartoline rettangolari, di dimensioni (in cm) $8 \\times 4$, $5 \\times 5$, $3 \\times 10$, $9 \\times 1$ e $4 \\times 6$.\n\nOra vuole acquistare una bacheca rettangolare in cui mettere le cartoline, possibilmente sovrapposte ma **non ruotate**. Per esempio, questa è una possibile bacheca di area $10 \\times 10 = 100$ che contiene le cartoline.\n\n![cornice](fig.asy)\n\nPer risparmiare, Tip-Tap vorrebbe acquistare la bacheca più piccola possibile: quanto vale al minimo l'area (in cm²) di una bacheca che può contenere le cartoline?\n\n?> 90\n\n> Per far stare le cartoline nella cornice, a Tip-Tap conviene sovrapporle il più possibile.\n>\n> La cornice deve però essere abbastanza larga da contenere la larghezza di tutte le cartoline: dato che le cartoline sono larghe $8, 5, 3, 9$ e $4$ cm, la cornice deve essere larga almeno $9$ cm.\n>\n> Inoltre, la cornice deve essere abbastanza alta da contenere l'altezza di tutte le cartoline: dato che le cartoline sono alte $4, 5, 10, 1$ e $6$ cm, la cornice deve essere alta almeno $10$ cm.\n>\n> Quindi la cornice più piccola sarà grande $9 \\times 10$ cm, per un'area di $90$ cm²! Una possibile disposizione di cartoline in questo caso è questa:\n>\n> ![soluzione1](soluzione1.asy)\n>\n> ![secondarie](5.1-secondarie.asy)\n\n---\n\nPer risparmiare ulteriormente, Tip-Tap sta pensando che in effetti potrebbe anche ruotare alcune cartoline di 90°. In questo caso, quale sarebbe la minima area?\n\n?> 50\n\n> In questo caso, la strategia migliore per Tip-Tap è di orientare le cartoline tutte nello stesso verso, per esempio di modo che siano strette e alte.\n> Come prima cosa, ruota quindi le cartoline facendole diventare di dimensioni (in cm) $4 \\times 8$, $5 \\times 5$, $3 \\times 10$, $1 \\times 9$ e $4 \\times 6$.\n>\n> A questo punto, dato che le cartoline ruotate sono larghe $4, 5, 3, 1$ e $4$ cm, la cornice deve essere larga almeno $5$ cm.\n> Inoltre, dato che le cartoline ruotate sono alte $8, 5, 10, 9$ e $6$ cm, la cornice deve essere alta almeno $10$ cm.\n>\n> Quindi la cornice più piccola sarà grande $5 \\times 10$ cm, per un'area di $50$ cm²! Una possibile disposizione di cartoline in questo caso è questa:\n>\n> ![soluzione2](soluzione2.asy)\n>\n> ![secondarie](5.2-secondarie.asy)\n","import variants from \"./variants.py\";\n\nHai la seguente lista di numeri: $[\\js{perm}]$.\nIn una mossa puoi scegliere due numeri consecutivi e togliere dalla lista il più piccolo dei due (eventualmente riunendo le due parti della lista).\n\nPer esempio, se scegli i numeri consecutivi $(\\js{pair})$, la lista diventa $[\\js{reduced}]$.\nDopo $\\js{perm.length - 2}$ mosse, quante sono le diverse liste di $2$ numeri che possono rimanere?\n\n?> {ans1}\n\n---\n\nDopo $\\js{perm.length - 3}$ mosse, quante sono le diverse liste di $3$ numeri che possono rimanere?\n\n?> {ans2}\n","Gli amici di Tip-Tap si sono messi tutti in fila per la conta!\nOgnuno di loro ha una diversa altezza, scritta sulla propria maglietta:\n\n![immage](fig.asy)\n\nTip-Tap in una mossa può scegliere due amici consecutivi e far uscire dalla fila il più basso dei due.\nQual è la minima altezza di un amico che può rimanere in fila dopo $5$ mosse?\n\n?> {6}\n\n> La risposta corretta è $6$.\n>\n> Ad ogni mossa, un amico esce dalla fila. Dato che all'inizio ci sono $6$ amici in fila, dopo $5$ mosse ne rimarrà uno soltanto.\n> Allora deve essere l'amico di altezza $6$: essendo il più alto di tutti, non potrò mai farlo uscire dalla fila\n> con nessuna delle mie mosse!\n>\n> ![primarie](5.1-primarie.asy) ![secondarie](4.1-secondarie.asy)\n\n---\n\nQual è la minima altezza di un amico che può rimanere in fila dopo $4$ mosse?\n\n?> {2}\n\n> La risposta corretta è $2$. Infatti, dopo $4$ mosse devono rimanere due amici e uno di loro deve essere l'amico di altezza $6$, per il ragionamento di prima.\n>\n> L'altro non può essere l'amico di altezza $1$: dovrei far uscire tutti gli altri amici, ma l'amico di altezza $4$\n> non può uscire senza prima far uscire quello di altezza $1$.\n>\n> Invece, l'altro può essere l'amico di altezza $2$, per esempio con questa sequenza di mosse:\n>\n> ![soluzione](soluzione.asy)\n>\n> ![primarie](5.2-primarie.asy) ![secondarie](4.2-secondarie.asy)\n","import variants from \"./variants.py\";\n\nDevi costruire $\\js{h.length}$ pile di mattoncini.\nAll’inizio ogni pila è vuota. Nella pila $i$-esima puoi aggiungere solo mattoncini di altezza $h_i$ dove $h = [\\js{h}]$.\n\nPer ragioni di stabilità, in ogni istante le altezze di due pile **adiacenti** possono differire di al più $d = \\js{d}$.\nQual è il massimo intero $M$ tale che si riescono a rendere tutte le pile alte almeno $M$?\n\n?> {ans1}\n\n---\n\nQual è il minimo valore intero per il parametro $d$ tale che si riescono a rendere tutte le pile alte almeno $\\js{M}$?\n\n?> {ans2}\n","import variants from \"./variants.py\";\n\nLuca ha trovato la cartina della rete idrica del suo paese. Sopra vi sono rappresentati gli snodi e le tubature che li collegano. Gli snodi sono indicati tramite dei cerchi numerati, mentre se esiste una tubatura tra lo snodo $a$ e lo snodo $b$ ci sarà una linea che li collega.\n\nDiciamo che uno snodo è _connesso_ ad un'altro se è esiste una sequenza di tubature che li collega. Per esempio, in questa rete:\n\n![Immagine](immagine1.asy?v=variants.py)\n\nlo snodo 1 è connesso allo snodo 6, mentre lo snodo 3 non è connesso allo snodo 5.\nLuca vuole aggiungere nuove tubature, ma l'ufficio di igiene gli ha chiesto di evitare\ndi mettere in connessione tutti gli snodi (in altre parole, devono esserci almeno\ndue snodi non connessi), e l'economato non vuole che due tubature diverse abbiano per\nestremi la stessa coppia di snodi. Quante tubature può aggiungere al massimo?\n\n?> {ans1}\n\n---\n\nLuca ora si sta occupando della rete idrica di un'altra città. Quante tubature al massimo può aggiungere in questa nuova rete, rispettando gli stessi vincoli?\n\n![Immagine](immagine2.asy?v=variants.py)\n\n?> {ans2}\n","import variants from \"./variants.py\";\n\nCi sono $\\js{n}$ persone in fila. Ognuna di esse è un furfante o un cavaliere.\nI cavalieri dicono sempre la verità, mentre i furfanti dicono sempre il falso.\nOgni persona che non si trova agli estremi della fila dichiara: \"I miei vicini sono entrambi furfanti o entrambi cavalieri\".\n\nQuanti sono al massimo i furfanti?\n\n- [x] $\\js{correct}$\n- [ ] $\\js{wrong[0]}$\n- [ ] $\\js{wrong[1]}$\n- [ ] $\\js{wrong[2]}$\n- [ ] $\\js{wrong[3]}$\n","Tip-Tap ha trovato in terra un bigliettino che due suoi compagni si sono **appena scambiati**! Dice:\n_“Domani mi presti la maglietta verde che indossi? Io non trovo la mia... Anche se tu sei più alto credo che non sarebbe troppo grande!”_\nI compagni di Tip-Tap sono:\n\n![friends](fig.asy)\n\nRiesci a capire quali dei compagni di classe di Tip-Tap si sono scambiati il bigliettino?\n\n- [x] Bunny e Carol\n- [ ] Amy e Carol\n- [ ] Amy e Bunny\n- [ ] Carol e Dippy\n- [ ] Bunny e Dippy\n\n> Dato che il bigliettino chiede _\"domani mi presti la maglietta verde che indossi\"_, deve averlo scritto qualcuno che **non ha la maglietta verde** (e quindi ce l'ha rossa) a qualcun altro che invece **ha la maglietta verde**.\n> Inoltre, il bigliettino dice che _\"tu sei più alto\"_, quindi il coniglietto con la maglietta verde deve essere più alto del coniglietto con la maglietta rossa.\n>\n> Dippy ha la maglietta rossa, ma non può aver scritto il bigliettino, perché nessuno è più alto di lui.\n>\n> Deve averlo scritto Carol, indirizzandolo a Bunny che è l'unico più alto di lui con la maglietta verde!\n>\n> ![primarie](1-primarie.asy)\n","import variants from \"./variants.py\";\n\nUna sequenza di numeri $A$, indicizzata da $0$ a $N-1$ è detta _quasi crescente_ se $A_i > A_{i+1}$ per **al più** un indice $i$.\nPer esempio `[1,3,7]` e `[3,5,8,2,6]` sono quasi crescenti, mentre `[2,6,5,3]` non lo è.\n\nData la sequenza `[{A}]` , quanti sono i suoi diversi riordinamenti, eventualmente incluso quello della sequenza iniziale, che sono _quasi crescenti_?\n\n- [x] $\\js{correct}$\n- [ ] $\\js{wrong[0]}$\n- [ ] $\\js{wrong[1]}$\n- [ ] $\\js{wrong[2]}$\n- [ ] $\\js{wrong[3]}$\n","import variants from \"./variants.py\";\n\nConsidera l’array $[a_1, \\ldots, a_6]$ = $[\\js{array}]$. Scegli una permutazione $[p_1, \\ldots, p_6]$, ovvero una sequenza contenente i numeri da $1$ a $6$ in un qualche ordine e senza ripetizioni. Poi, per $i$ = $1,\\ldots, 6$, sottrai il valore corrente di $a_{p_i}$ da tutti gli altri $a_j$. I numeri possono diventare negativi. Alla fine, la somma degli $a_i$ può essere:\n\n- [ ] $\\js{wrong[0]}$\n- [ ] $\\js{wrong[1]}$\n- [x] $\\js{correct}$\n- [ ] $\\js{wrong[2]}$\n- [ ] $\\js{wrong[3]}$\n","import variants from \"./variants.py\";\n\nAmy ha $\\js{r}$ palline rosse e $\\js{b}$ palline blu.\nAl negozio di palline, può comprare altre palline rosse e blu (quante ne vuole) al prezzo di $1$ euro ciascuna. Può anche dipingere **gratis** di verde tutte le palline che vuole.\n\n![Amy pittrice](fig.asy)\n\nAlla fine, vorrebbe avere lo stesso numero di palline rosse, blu e verdi. Nota che Amy **non può buttare** via palline!\nQual è il minimo numero di euro che Amy deve spendere per raggiungere il suo obiettivo?\n\n- [x] $\\js{correct}$\n- [ ] $\\js{wrong[0]}$\n- [ ] $\\js{wrong[1]}$\n- [ ] $\\js{wrong[2]}$\n- [ ] $\\js{wrong[3]}$\n","Bunny ha $10$ palline rosse e $2023$ palline blu.\nAl negozio di palline, può comprare altre palline rosse e blu (quante ne vuole) al prezzo di $1$ euro ciascuna. Può anche dipingere **gratis** di verde tutte le palline che vuole.\n\n![Bunny il pittore](fig.asy)\n\nAlla fine, vorrebbe avere lo stesso numero di palline rosse, blu e verdi. Nota che Bunny **non può buttare** via palline.\nQual è il minimo numero di euro che Bunny deve spendere per raggiungere il suo obiettivo?\n\n- [x] $1003$\n- [ ] $1006$\n- [ ] $1009$\n- [ ] $2013$\n- [ ] $2014$\n\n> Bunny ha moltissime palline blu: la cosa migliore che può fare per cercare di avere lo stesso numero di palline dei tre colori, è dipingerne circa la metà di verde.\n> A questo Bunny potrebbe avere $10$ palline rosse, $1011$ palline blu e $1012$ palline verdi. Per raggiungere l'obiettivo deve quindi ancora comprare $1$ pallina blu\n> e $1002$ palline rosse, per un totale di $1003$ palline.\n>\n> ![secondarie](2-secondarie.asy)\n","Valerio sta organizzando una gara di informatica, ma ne deve ancora decidere il nome.\nIl nome deve essere una parola di $6$ lettere, composta da solo $\\textsf{O}$ e $\\textsf{I}$.\nPer evitare problemi di copyright, il nome non deve contenere tre lettere consecutive che formano la parola $\\textsf{OII}$.\nPer esempio:\n\n![nomi](fig.asy)\n\nQuanti sono i possibili nomi che Valerio può dare alla gara?\n\n- [ ] $24$\n- [ ] $31$\n- [ ] $32$\n- [x] $33$\n- [ ] $36$\n","Tip-Tap sta organizzando una gara di informatica, ma ne deve ancora decidere il nome.\nIl nome deve essere una parola di $4$ lettere, composta da solo $\\textsf{O}$ e $\\textsf{I}$.\nPer evitare problemi di copyright, il nome non deve contenere tre lettere consecutive che formano la parola $\\textsf{OII}$.\nPer esempio:\n\n![nomi](fig.asy)\n\nQuanti sono i possibili nomi che Tip-Tap può dare alla gara?\n\n- [ ] $16$\n- [ ] $4$\n- [ ] $8$\n- [ ] $6$\n- [x] $12$\n\n> Potremmo elencare tutti i nomi ammissibili, ma sarebbe lungo e noioso!\n>\n> In alternativa, possiamo accorgerci che **in totale** le parole di $4$ lettere composte solo da $\\textsf{O}$ e $\\textsf{I}$ sono $2 \\times 2 \\times 2 \\times 2 = 16$.\n> Infatti, per ogni lettera in più ho il doppio delle possibilità: quelle che aggiungono una $\\textsf{O}$ (tante quante quelle con una lettera in meno)\n> e quelle che aggiungono una $\\textsf{I}$ (anche queste tante quante quelle con una lettera in meno).\n>\n> Ora elenchiamo invece i nomi **non ammissibili** (cioè che contengono la parola $\\textsf{OII}$), che sono questi $4$:\n>\n> - $\\textsf{OIIO}$\n> - $\\textsf{OIII}$\n> - $\\textsf{OOII}$\n> - $\\textsf{IOII}$\n>\n> Dato che i nomi ammissibili sono tutti gli altri, devono essere $16 - 4 = 12$.\n>\n> ![primarie](4-primarie.asy) ![secondarie](3-secondarie.asy)\n","import variants from \"./variants.py\";\n\nIl tabellone del gioco del coniglio contiene $10$ caselle, numerate da $1$ a $10$, con la casella $10$ adiacente alla $1$. Tip-Tap parte dalla casella $1$ e, in $4$ turni successivi, avanza di $\\js{a[0]}$, di $\\js{a[1]}$, di $\\js{a[2]}$ e infine di $\\js{a[3]}$ caselle.\n\n![tabellone](fig.asy)\n\nAlla fine, su che casella si trova?\n\n- [ ] $\\js{wrong[0]}$\n- [ ] $\\js{wrong[1]}$\n- [x] $\\js{correct}$\n- [ ] $\\js{wrong[2]}$\n- [ ] $\\js{wrong[3]}$\n\n> Potremmo contare come avanza il coniglio dopo tutti questi spostamenti, ma sarebbe lungo e noioso!\n>\n> Invece, pensiamo a quanto si sposterà il coniglio in totale: $\\js{a[0]} + \\js{a[1]} + \\js{a[2]} + \\js{a[3]} = \\js{a[0]+a[1]+a[2]+a[3]}$ caselle.\n> Inoltre, ogni 10 caselle il coniglio torna al punto di partenza! Quindi dopo i primi $\\js{a[0]+a[1]+a[2]+a[3]-(a[0]+a[1]+a[2]+a[3])%10}$\n> spostamenti il coniglio sarà di nuovo sulla casella 1, poi farà ancora gli ultimi $\\js{(a[0]+a[1]+a[2]+a[3])%10}$ spostamenti e\n> arriverà sulla casella $\\js{correct}$.\n>\n> ![primarie](2-primarie.asy) ![secondarie](1-secondarie.asy)\n","Tip-Tap ha ricevuto $5$ cartoline rettangolari, di dimensioni (in cm) $8 \\times 4$, $5 \\times 5$, $3 \\times 10$, $9 \\times 1$ e $4 \\times 6$.\n\nOra vuole acquistare una bacheca rettangolare in cui mettere le cartoline, possibilmente sovrapposte ma **non ruotate**. Per esempio, questa è una possibile bacheca di area $9 \\times 11 = 99$ che contiene le cartoline.\n\n![cornice](fig.asy)\n\nPer risparmiare, Tip-Tap vorrebbe acquistare la bacheca più piccola possibile: quanto vale la più piccola area (in cm²) di una bacheca che può contenere le cartoline?\n\n- [ ] $80$\n- [ ] $10$\n- [x] $90$\n- [ ] $85$\n- [ ] $0$\n\n> Per far stare le cartoline nella cornice, a Tip-Tap conviene sovrapporle il più possibile.\n>\n> La cornice deve però essere abbastanza larga da contenere la larghezza di tutte le cartoline: dato che le cartoline sono larghe $8, 5, 3, 9$ e $4$ cm, la cornice deve essere larga almeno $9$ cm.\n>\n> Inoltre, la cornice deve essere abbastanza alta da contenere l'altezza di tutte le cartoline: dato che le cartoline sono alte $4, 5, 10, 1$ e $6$ cm, la cornice deve essere alta almeno $10$ cm.\n>\n> Quindi la cornice più piccola sarà grande $9 \\times 10$ cm, per un'area di $90$ cm²! Una possibile disposizione di cartoline in questo caso è questa:\n>\n> ![soluzione](soluzione.asy)\n>\n> ![primarie](3-primarie.asy)\n","import variants from \"./variants.py\";\n\nFrancesco ha ricevuto $\\js{n}$ cartoline rettangolari di dimensioni $\\js{rettangoli[0][0]} \\times \\js{rettangoli[0][1]}$, $\\js{rettangoli[1][0]} \\times \\js{rettangoli[1][1]}$, $\\js{rettangoli[2][0]} \\times \\js{rettangoli[2][1]}$, $\\js{rettangoli[3][0]} \\times \\js{rettangoli[3][1]}$ e $\\js{rettangoli[4][0]} \\times \\js{rettangoli[4][1]}$.\nOra vuole acquistare una bacheca rettangolare in cui mettere le cartoline, possibilmente sovrapposte ed eventualmente ruotate di 90°.\n\nPer esempio se le dimensioni delle cartoline (in cm) **fossero** $8 \\times 4$, $5 \\times 5$, $3 \\times 10$, $9 \\times 1$ e $4 \\times 6$, questa sarebbe una **possibile** bacheca di area $9 \\times 11 = 99$ che contiene quelle cartoline (che **non** sono quelle che ha Francesco).\n\n![cornice](fig.asy)\n\nPer risparmiare, Francesco vorrebbe acquistare la bacheca più piccola possibile: quanto vale al minimo l'area (in cm²) di una bacheca che può contenere le cartoline?\n\n- [x] $\\js{correct}$\n- [ ] $\\js{wrong[0]}$\n- [ ] $\\js{wrong[1]}$\n- [ ] $\\js{wrong[2]}$\n- [ ] $\\js{wrong[3]}$\n","In quale ordine vanno messe queste istruzioni, per ottenere il numero $6$ nella variabile $x$?\n\n![x=2](code.asy)\n\n- [ ] $2$, $1$, $3$\n- [x] $1$, $3$, $2$\n- [ ] $3$, $2$, $1$\n- [ ] $1$, $2$, $3$\n- [ ] $2$, $3$, $1$\n\n> All'inizio non sappiamo quale numero potrebbe esserci nella variabile $x$!\n> Per essere sicuri di un risultato, dobbiamo iniziare mettendoci un valore definito, e quindi con il blocco $1$ che ci mette il valore $2$.\n>\n> A questo punto, se mettiamo prima il blocco $2$ la variabile $x$ raddoppierà a $4$, e poi con il blocco $3$ crescerà a $5$. Non va bene, perché dovevamo arrivare a $6$.\n>\n> Se invece mettiamo prima il blocco $3$ la variabile cresce a $3$, e poi con il blocco $2$ raddoppia a $6$, ottenendo il risultato voluto!\n>\n> ![primarie](6-primarie.asy) ![secondarie](6-secondarie.asy)\n","Tip-Tap deve decidere se buttare alcuni di questi palloni:\n\n![palloni](balls.asy)\n\nPer farlo, segue questo procedimento:\n\n![procedimento](code.asy)\n\nQuali palloni butta Tip-Tap?\n\n- [x] $3$, $4$\n- [ ] $1$, $5$\n- [ ] $2$, $3$, $4$\n- [ ] $1$, $2$, $5$\n- [ ] $1$, $4$\n\n> Leggendo i blocchi, vediamo che Tip-Tap butta i palloni da basket se **non sono rossi** (il pallone 4), mentre butta i palloni da calcio se **sono sgonfi** (il pallone 3).\n>\n> ![primarie](7-primarie.asy) ![secondarie](7-secondarie.asy)\n","import variants from \"./variants.py\";\n\nConsidera la seguente funzione, che prende come parametri un intero **positivo** `n` e un array di interi `a` di lunghezza `n`, e restituisce un intero:\n\n```srs\nfunction compute(a: integer[], n: integer) -> integer\n  variable ans: integer\n  ans <- 0\n\n  for i in [0 ... n) do\n    if a[0] == i then\n      ans <- ans + i\n    end if\n    for j in [0 ... n-1) do\n      (a[j], a[j + 1]) <- (a[j + 1], a[j])\n    end for\n  end for\n\n  return ans\nend function\n```\n\nSupponiamo di chiamare `compute(a, {n})`, dove `a = [{a}]`. Qual è il valore restituito dalla funzione?\n\n- [x] $\\js{correct}$\n- [ ] $\\js{wrong[0]}$\n- [ ] $\\js{wrong[1]}$\n- [ ] $\\js{wrong[2]}$\n- [ ] $\\js{wrong[3]}$\n","import variants from \"./variants.py\";\n\nConsidera la seguente funzione, che prende come parametri due interi **positivi** `a`, `b`, e restituisce un intero:\n\n```srs\nfunction step(a: integer, b: integer) -> integer\n  variable k: integer\n  k <- 0\n\n  while a > 0 or b > 0 do\n    if a * a < b then\n      b <- b - a - 1\n      a <- 2 * a\n    else\n      a <- a - 1\n    end if\n    k <- k + 1\n  end while\n\n  return k\nend function\n```\n\nPer quale delle seguenti coppie `(a, b)` il valore restituito da `step(a, b)` è {n}?\n\n- [x] $(\\js{correct})$\n- [ ] $(\\js{wrong[0]})$\n- [ ] $(\\js{wrong[1]})$\n- [ ] $(\\js{wrong[2]})$\n- [ ] $(\\js{wrong[3]})$\n","Considera la seguente funzione, che prende come parametri quattro interi **di segno qualunque** `a`, `b`, `c`, `d`, e restituisce un intero:\n\n```srs\nfunction loop(a: integer, b: integer, c: integer, d: integer) -> integer\n  variable ans: integer\n  ans <- 0\n  for i in [a, b + 1) do\n    if (i - c) * (i - d) <= 0 then\n      ans <- ans + 1\n    end if\n  end for\n  return ans\nend function\n```\n\nQuale delle seguenti affermazioni è vera?\n\n- [x] `loop(a, b, c, d)` è sempre uguale a `loop(c, d, a, b)`\n- [ ] `loop` restituisce sicuramente un numero $\\leq b - a$\n- [ ] `loop` restituisce sicuramente un numero $\\leq d - c$\n- [ ] `loop` non restituisce mai $0$\n- [ ] `loop(2 * a, 2 * b, 2 * c, 2 * d)` è sempre uguale a `2 * loop(a, b, c, d)`\n","import variants from \"./variants.py\";\n\nConsidera la seguente funzione:\n\n```srs\nfunction f(n: integer)\n  variable i: integer\n  variable j: integer\n  i <- 0\n  j <- 1\n  while j <= n do\n    for k in [i, j) do\n      output(k)\n    end for\n    i <- i + 2\n    j <- j + 3\n  end while\nend function\n```\n\nChiamando `f({n})`, quante volte viene stampato il numero che viene stampato più volte?\n\n- [x] {correct}\n- [ ] {wrong[0]}\n- [ ] {wrong[1]}\n- [ ] {wrong[2]}\n- [ ] {wrong[3]}\n","import variants from \"./variants.py\";\n\nConsideriamo la seguente funzione ricorsiva, dove `a` è un array di lunghezza `n`, `pos` è un intero tra $0$ e `n`, e `x` è un intero:\n\n```srs\nfunction walk(n: integer, a: integer[], pos: integer, x: integer)\n  if pos == n then\n    return\n  end if\n  if x < a[pos] then\n    output(\"back\")\n    walk(n, a, 0, x + 1)\n  else\n    walk(n, a, pos + 1, x)\n  end if\nend function\n```\n\nSupponiamo di chiamare `walk({n}, a, 0, 0)`, dove `a = [{a}]`. Quante volte viene stampata in output la stringa `”back”`?\n\n- [x] $\\js{correct}$\n- [ ] $\\js{wrong[0]}$\n- [ ] $\\js{wrong[1]}$\n- [ ] $\\js{wrong[2]}$\n- [ ] $\\js{wrong[3]}$\n","import variants from \"./variants.py\";\n\nQual è il **terzo** numero stampato dal seguente programma?\n\n```srs\nfor i in [1, {n+1}) do\n  for j in [1, {n+1}) do\n    if i * j == {n} then\n      output(j)\n    end if\n  end for\nend for\n```\n\n- [x] $\\js{correct}$\n- [ ] $\\js{wrong[0]}$\n- [ ] $\\js{wrong[1]}$\n- [ ] $\\js{wrong[2]}$\n- [ ] $\\js{wrong[3]}$\n","Qual è il **terzo** numero stampato dal seguente programma?\n\n![code](code.asy)\n\n- [x] $25$\n- [ ] $50$\n- [ ] $20$\n- [ ] $10$\n- [ ] $4$\n\n> Cerchiamo di capire cosa fa questo programma.\n> Si parte con la variabile $i$ che vale $1$. Per $100$ volte, si incrementa $j$ da $1$ fino a $100$ stampandone il valore se $i \\times j = 100$.\n> Poi si incrementa la variabile $i$, e si ripete la ripetizione su $j$, continuando fino a far arrivare anche $i$ a $100$. Quindi:\n>\n> 1. Nella prima ripetizione (con $i$ che vale $1$), l'unico numero $j$ per cui $i \\times j = 100$ è $j = 100 / i = 100 / 1 = 100$, quindi viene per **primo** stampato $100$.\n> 2. Nella seconda ripetizione (con $i$ che vale $2$), l'unico $j$ che viene stampato è $100 / 2 = 50$, che è quindi il **secondo** numero stampato.\n> 3. Nella terza ripetizione (con $i$ che vale $3$), nessun numero viene stampato, perché $3$ non è un divisore di $100$ e quindi $i \\times j$ non vale mai $100$.\n> 4. Nella quarta ripetizione (con $i$ che vale $4$), l'unico $j$ che viene stampato è $100 / 4 = 25$, che è quindi il **terzo** numero stampato.\n>\n> Infatti, questo programma stampa i _divisori_ di $100$ in ordine decrescente: $100, 50, 25, 20, 10, 5, 4, 2, 1$!\n>\n> ![secondarie](8-secondarie.asy)\n","import variants from \"./variants.py\";\n\nNel seguente programma, una riga è stata sostituita da `[???]`.\n\n```srs\nvariable x: integer\nvariable y: integer[]\nx <- 42\ny <- [0, 1, 2, 3]\n[???]\n```\n\nQuale dei seguenti assegnamenti, sostituito a `[???]`, risulta in un programma valido?\n\n- [x] `{correct}`\n- [ ] `{wrong[0]}`\n- [ ] `{wrong[1]}`\n- [ ] `{wrong[2]}`\n- [ ] `{wrong[3]}`\n","Tip-Tap vorrebbe tanto mangiare la sua carota, prima però deve raggiungerla!\nA separarlo dal suo obbiettivo ci sono due porte chiuse. Tip-Tap sa compiere le seguenti azioni: + `avanza`: salta alla roccia più vicina a destra, solo se non c'è una porta chiusa in mezzo. + `apri porta`: apri la porta a destra, ma solo se è di fianco a te. + `mangia carota`: mangia la carota a destra, ma solo se è di fianco a te.\n\nQuali delle seguenti successioni di azioni consentono a Tip-Tap di raggiungere la carota?\n\n![T_ | _ _ | _C](fig.asy)\n\n![code](code.asy)\n\n- [ ] solo $1$\n- [ ] $2$ e $1$\n- [ ] solo $2$\n- [x] $1$ e $3$\n- [ ] sono tutti corretti\n\n> Sia seguendo l'opzione $1$ che l'opzione $3$, e svolgendo le ripetizioni, la sequenza complessiva di azioni che Tip-Tap svolge è questa:\n>\n> ![giusto](giusto.asy)\n>\n> Questa sequenza effettivamente fa 4 balzi in avanti per raggiungere la carota, aprendo le due porte nei punti giusti.\n> L'opzione $2$ invece si traduce in una sequenza con un _\"avanza\"_ in meno:\n>\n> ![sbagliato](sbagliato.asy)\n>\n> Non è quindi corretta, mancando un passo tra una porta e l'altra.\n>\n> ![primarie](8-primarie.asy)\n"],"names":["_jsx","Equation","_jsxs","_components","Image","Code","n","correct","wrong"],"mappings":";y/EAEA,SAAA,CAAA,oBAAAA,EAAA,IAAAC,EAAA,uBAAoB,CAAA,EAAA,QAAAD,EAAA,IAAAC,EAAA,uBAAQ,CAAA,EAAA,YAAAD,EAAA,IAAAC,EAAA,uBAAY,CAAA,EAAA,oCAAAD,EAAA,IAAAC,EAAA,uBAAoC,CAAA,EAAA,MAAAC,OAAAC,EAAA,KAAA,6FAAO,CAAA,EAAA,YAAAH,MAAAG,EAAA,GAAA,CAAW,SAAA,QAAO,CAAA,EAAA,oCAAAH,EAAA,IAAAC,EAAA,uBAAoC,CAAA,EAAA,sHAAA,gBAEzI,SAAA,CAAA,uBAAAD,MAAAG,EAAA,GAAA,CAAqB,SAAA,WAAU,CAAA,EAAA;AAAA,yFAAA,uFAK/B,SAAA;;yCAQA,SAAA,ivCCjBA,SAAA,CAAA,uBAAAH,EAAA,IAAAC,EAAA,uBAAuB,CAAA,EAAA,kDAAAC,OAAAC,EAAA,KAAA,qGAA2D,CAAA,EAAA,IAAAD,OAAAC,EAAA,KAAA,qGAAc,CAAA,EAAA,IAAAD,OAAAC,EAAA,KAAA,sGAAe,CAAA,EAAA,IAAAH,EAAA,IAAAC,EAAA,gCAAc,CAAA,EAAA,MAAAC,OAAAC,EAAA,KAAA,uHAE7H,SAAA,CAAA,2GAAAH,MAAAG,EAAA,OAAA,CAA0G,SAAA,aAAa,CAAA,EAAA,yDAAAH,EAAA,IAAAC,EAAA,wCAA0E,CAAA,EAAA,6BAAA,qGAIjM,SAAA,yQAIE,SAAA,2GAEA,SAAA,CAAA,mIAAAD,EAAA,IAAAC,EAAA,gCAA4I,CAAA,EAAA,MAAAD,EAAA,IAAAC,EAAA,uBAAM,CAAA,EAAA,4CAAAD,EAAA,IAAAC,EAAA,uBAA4C,CAAA,EAAA,MAAA,gBAE9L,SAAA,CAAA,iIAAAD,EAAA,IAAAC,EAAA,iCAA2I,CAAA,EAAA,MAAAD,EAAA,IAAAC,EAAA,uBAAM,CAAA,EAAA,2CAAAD,EAAA,IAAAC,EAAA,wBAA4C,CAAA,EAAA,MAAA,gBAE7L,SAAA,CAAA,6CAAAD,EAAA,IAAAC,EAAA,iCAAuD,CAAA,EAAA,uBAAAD,EAAA,IAAAC,EAAA,wBAAwB,CAAA,EAAA,wEAAA;;yCAQjF,SAAA,uQAIE,SAAA,CAAA;AAAA,uFAAAC,OAAAC,EAAA,KAAA,qGACiG,CAAA,EAAA,IAAAD,OAAAC,EAAA,KAAA,qGAAc,CAAA,EAAA,IAAAD,OAAAC,EAAA,KAAA,sGAAe,CAAA,EAAA,IAAAH,EAAA,IAAAC,EAAA,gCAAc,CAAA,EAAA,MAAAC,OAAAC,EAAA,KAAA,uHAE5I,SAAA,CAAA,6DAAAH,EAAA,IAAAC,EAAA,gCAAsE,CAAA,EAAA,MAAAD,EAAA,IAAAC,EAAA,uBAAM,CAAA,EAAA,4CAAAD,EAAA,IAAAC,EAAA,uBAA4C,CAAA,EAAA;AAAA,mDAAAD,EAAA,IAAAC,EAAA,iCAC1D,CAAA,EAAA,MAAAD,EAAA,IAAAC,EAAA,uBAAM,CAAA,EAAA,2CAAAD,EAAA,IAAAC,EAAA,wBAA4C,CAAA,EAAA,MAAA,gBAEhH,SAAA,CAAA,6CAAAD,EAAA,IAAAC,EAAA,iCAAuD,CAAA,EAAA,uBAAAD,EAAA,IAAAC,EAAA,wBAAwB,CAAA,EAAA,wEAAA,o0DChCjF,SAAA,CAAA,oCAAAC,OAAAC,EAAA,KAAA,iGAA8C,CAAA,EAAA;AAAA,oJAAA,gBAG9C,SAAA,CAAA,+CAAAD,OAAAC,EAAA,KAAA,iGAAyD,CAAA,EAAA,qBAAAD,OAAAC,EAAA,KAAA,iGAAmC,CAAA,EAAA;AAAA,OAAAH,EAAA,IAAAC,EAAA,mCACjE,CAAA,EAAA,2CAAAD,EAAA,IAAAC,EAAA,uBAA2C,CAAA,EAAA,+BAAA;;0CAMtE,SAAA,CAAA,QAAAD,EAAA,IAAAC,EAAA,mCAA2B,CAAA,EAAA,2CAAAD,EAAA,IAAAC,EAAA,uBAA2C,CAAA,EAAA,+BAAA,+rCCZtE,SAAA;AAAA,+KAKA,SAAA,CAAA;AAAA,qEAAAD,EAAA,IAAAC,EAAA,uBACsE,CAAA,EAAA,SAAA,wGAIpE,SAAA,CAAA,0BAAAC,OAAAC,EAAA,KAAA,8GAEA,SAAA,CAAA,wEAAAH,EAAA,IAAAC,EAAA,uBAAwE,CAAA,EAAA,wBAAAD,EAAA,IAAAC,EAAA,uBAAwB,CAAA,EAAA;AAAA,wCAAAC,OAAAC,EAAA,KAAA,4FACvD,CAAA,EAAA;AAAA,6BAAA,2FAGZ,CAAA,EAAA,IAAAH,EAAA,IAAAI,EAAA;;0CAI/B,SAAA,CAAA,sEAAAJ,EAAA,IAAAC,EAAA,uBAAsE,CAAA,EAAA,SAAA,wGAIpE,SAAA,CAAA,0BAAAC,OAAAC,EAAA,KAAA,4FAA0B,CAAA,EAAA,kBAAAH,EAAA,IAAAC,EAAA,uBAAmB,CAAA,EAAA,iFAAAC,OAAAC,EAAA,KAAA,4FAAiF,CAAA,EAAA,gCAAA,gBAE9H,SAAA,CAAA,6CAAAD,OAAAC,EAAA,KAAA,4FAA6C,CAAA,EAAA,mEAAAH,EAAA,IAAAC,EAAA,uBAAoE,CAAA,EAAA;AAAA,0DAAAC,OAAAC,EAAA,KAAA,8GAGjH,SAAA,CAAA,iDAAAD,OAAAC,EAAA,KAAA,4FAAiD,CAAA,EAAA,4CAAA,sLAIpB,CAAA,EAAA,IAAAH,EAAA,IAAAI,EAAA,ymDC/B/B,SAAA,CAAA,kBAAAJ,EAAA,IAAAC,EAAA,iCAA8B,CAAA,EAAA;AAAA,2CAAAC,OAAAC,EAAA,KAAA,iGACc,CAAA,EAAA,+CAAAH,EAAA,IAAAC,EAAA,yBAAuD,CAAA,EAAA,SAAAC,OAAAC,EAAA,KAAA,uHAEnG,SAAA,CAAA,oEAAAH,MAAAG,EAAA,OAAA,CAAmE,SAAA,WAAW,CAAA,EAAA,gCAAAD,OAAAC,EAAA,KAAA,mGAAyC,CAAA,EAAA;AAAA,2BAAAH,EAAA,IAAAC,EAAA,uBAC3F,CAAA,EAAA,6DAAAC,OAAAC,EAAA,KAAA;;0CAM5B,SAAA,CAAA,mDAAAH,EAAA,IAAAC,EAAA,uBAAmD,CAAA,EAAA,6DAAAC,OAAAC,EAAA,KAAA,q1DCVnD,SAAA,CAAA,qOAAAH,EAAA,IAAAC,EAAA,uBAAqO,CAAA,EAAA,eAAAD,EAAA,IAAAC,EAAA,uBAAe,CAAA,EAAA,oCAAA,gBAEpP,SAAA,CAAA,2BAAAD,MAAAG,EAAA,GAAA,CAAyB,SAAA,UAAS,CAAA,EAAA,gGAAA,kGAIlC,SAAA;AAAA;AAAA;AAAA;AAAA;;yCAUA,SAAA,olDChBA,SAAA,CAAA,WAAAH,EAAA,IAAAC,EAAA,0BAAgB,CAAA,EAAA;AAAA;AAAA,6HAAA,eAIhB,SAAA,msCCNA,SAAA,CAAA,4EAAAD,MAAAG,EAAA,OAAA,CAA2E,SAAA,kBAAkB,CAAA,EAAA;AAAA,EAAAH,MAAAG,EAAA,GAAA,CAC5F,SAAA,uIAAwI,CAAA,EAAA;AAAA,4BAAA,wGAKzI,SAAA,0JAEM,SAAA,4DACA,SAAA,0DACA,SAAA,0DACA,SAAA,4DACA,SAAA,uDAEJ,SAAA,CAAA,kCAAAH,MAAAG,EAAA,GAAA,CAAgC,SAAA,mDAAkD,CAAA,EAAA,sCAAAH,MAAAG,EAAA,OAAA,CAAqC,SAAA,2BAA2B,CAAA,EAAA,wDAAAH,MAAAG,EAAA,OAAA,CAAuD,SAAA,uBAAuB,CAAA,EAAA;AAAA,mCAAAH,MAAAG,EAAA,GAAA,CAC9L,SAAA,mBAAkB,CAAA,EAAA,6GAAA,eAEpD,SAAA,sHAEA,SAAA,gvDCjBF,SAAA,CAAA,0BAAAD,OAAAC,EAAA,KAAA,4FAA0B,CAAA,EAAA,mBAAAH,EAAA,IAAAC,EAAA,uBAAoB,CAAA,EAAA,MAAAD,EAAA,IAAAC,EAAA,yBAAQ,CAAA,EAAA,YAAAD,MAAAG,EAAA,GAAA,CAAU,SAAA,iBAAgB,CAAA,EAAA,OAAAH,EAAA,IAAAC,EAAA,mCAAmB,CAAA,EAAA,QAAAD,MAAAG,EAAA,OAAA,CAAO,SAAA,QAAQ,CAAA,EAAA,cAAAD,OAAAC,EAAA,KAAA,4FAAc,CAAA,EAAA;AAAA,cAAAH,EAAA,IAAAK,EAAA,wEAC3G,CAAA,EAAA,MAAAL,EAAA,IAAAK,EAAA,4EAAgB,CAAA,EAAA,iCAAAL,EAAA,IAAAK,EAAA,0EAAyC,CAAA,EAAA,YAAA,gBAE9E,SAAA,CAAA,oBAAAL,EAAA,IAAAK,EAAA,uEAAwB,CAAA,EAAA,+GAAAL,MAAAG,EAAA,GAAA,CAA6G,SAAA,iBAAgB,CAAA,EAAA,GAAA,wnDCHrJ,SAAA,CAAA,qBAAAH,EAAA,IAAAC,EAAA,wCAAsC,CAAA,EAAA,MAAAC,OAAAC,EAAA,KAAA,iGAAiB,CAAA,EAAA,4BAAAD,OAAAC,EAAA,KAAA,6GAA8C,CAAA,EAAA,+CAAAH,EAAA,IAAAC,EAAA,uBAAgD,CAAA,EAAA,MAAAD,EAAA,IAAAC,EAAA,uBAAM,CAAA,EAAA,uDAAAD,EAAA,IAAAC,EAAA,uBAAuD,CAAA,EAAA,MAAAC,OAAAC,EAAA,KAAA,sGAAgB,CAAA,EAAA,kCAAAH,EAAA,IAAAC,EAAA,6BAAyC,CAAA,EAAA,uBAAAC,OAAAC,EAAA,KAAA,8FAAyB,CAAA,EAAA,mEAAAH,EAAA,IAAAC,EAAA,yBAAsE,CAAA,EAAA,cAAA,qhECA1W,SAAA,CAAA,UAAAD,EAAA,IAAAC,EAAA,0BAAe,CAAA,EAAA,oBAAAD,EAAA,IAAAC,EAAA,0BAAyB,CAAA,EAAA;AAAA,+FAAAD,EAAA,IAAAC,EAAA,uBACwD,CAAA,EAAA,uCAAAD,MAAAG,EAAA,OAAA,CAAsC,SAAA,QAAQ,CAAA,EAAA,uCAAA,uGAI9I,SAAA,CAAA,0FAAAH,MAAAG,EAAA,OAAA,CAAyF,SAAA,iBAAiB,CAAA,EAAA;AAAA,wFAAA,srCCP1G,SAAA,CAAA,YAAAH,EAAA,IAAAC,EAAA,wBAAa,CAAA,EAAA,oBAAAD,EAAA,IAAAC,EAAA,0BAAuB,CAAA,EAAA;AAAA,+FAAAD,EAAA,IAAAC,EAAA,uBAC4D,CAAA,EAAA,uCAAAD,MAAAG,EAAA,OAAA,CAAsC,SAAA,QAAQ,CAAA,EAAA,uCAAA,kHAI9I,SAAA,CAAA,4FAAAH,MAAAG,EAAA,OAAA,CAA2F,SAAA,iBAAiB,CAAA,EAAA;AAAA,0FAAA,6fAS1G,SAAA,CAAA;AAAA,gCAAAH,EAAA,IAAAC,EAAA,wBACkC,CAAA,EAAA,mBAAAD,EAAA,IAAAC,EAAA,0BAAsB,CAAA,EAAA,kBAAAD,EAAA,IAAAC,EAAA,0BAAqB,CAAA,EAAA,2EAAAD,EAAA,IAAAC,EAAA,uBAA2E,CAAA,EAAA;AAAA,IAAAD,EAAA,IAAAC,EAAA,0BAChJ,CAAA,EAAA,oCAAAD,EAAA,IAAAC,EAAA,0BAAuC,CAAA,EAAA,WAAA,6qBChBjD,SAAA,CAAA;AAAA,oCAAAD,EAAA,IAAAC,EAAA,uBACqC,CAAA,EAAA,8BAAAD,EAAA,IAAAC,EAAA,gCAAuC,CAAA,EAAA,MAAAC,OAAAC,EAAA,KAAA,qGAAe,CAAA,EAAA;AAAA,8GAAAD,OAAAC,EAAA,KAAA,uGAC+B,CAAA,EAAA;AAAA,aAAA,qGAK1H,SAAA,o1CCPA,SAAA,CAAA;AAAA,oCAAAH,EAAA,IAAAC,EAAA,uBACqC,CAAA,EAAA,8BAAAD,EAAA,IAAAC,EAAA,gCAAuC,CAAA,EAAA,MAAAC,OAAAC,EAAA,KAAA,qGAAe,CAAA,EAAA;AAAA,8GAAAD,OAAAC,EAAA,KAAA,uGAC+B,CAAA,EAAA;AAAA,aAAA,qGAK1H,SAAA,4iBAQE,SAAA,uFAEA,SAAA,CAAA,2CAAAH,MAAAG,EAAA,OAAA,CAA0C,SAAA,WAAW,CAAA,EAAA,iBAAAH,EAAA,IAAAC,EAAA,uBAAiB,CAAA,EAAA,6BAAAD,EAAA,IAAAC,EAAA,gCAAsC,CAAA,EAAA,MAAAD,EAAA,IAAAC,EAAA,gCAAe,CAAA,EAAA,SAAAC,OAAAC,EAAA,KAAA,4HAAyC,CAAA,EAAA;AAAA,6FAAAH,EAAA,IAAAC,EAAA,gCAC7D,CAAA,EAAA;AAAA,8BAAAD,EAAA,IAAAC,EAAA,gCAC/D,CAAA,EAAA,8DAAA,gBAExC,SAAA,CAAA,gCAAAD,MAAAG,EAAA,OAAA,CAA+B,SAAA,iBAAiB,CAAA,EAAA,mCAAAD,OAAAC,EAAA,KAAA,wGAA8C,CAAA,EAAA,oBAAAD,OAAAC,EAAA,KAAA;;;;;iBAO9F,SAAA,CAAA,mEAAAD,OAAAC,EAAA,KAAA,mMAE2B,CAAA,EAAA,IAAAH,EAAA,IAAAI,EAAA,knDC5B7B,SAAA,CAAA,gDAAAJ,EAAA,IAAAC,EAAA,wBAAiD,CAAA,EAAA,yBAAAD,EAAA,IAAAC,EAAA,uBAAyB,CAAA,EAAA,MAAAC,OAAAC,EAAA,KAAA,6FAAO,CAAA,EAAA,mBAAAH,EAAA,IAAAC,EAAA,wBAAqB,CAAA,EAAA,mBAAAC,OAAAC,EAAA,KAAA,4FAAmB,CAAA,EAAA,gCAAAH,EAAA,IAAAC,EAAA,uBAAiC,CAAA,EAAA,UAAAD,EAAA,IAAAC,EAAA,uBAAU,CAAA,EAAA,gCAAAC,OAAAC,EAAA,KAAA,kGAAwC,CAAA,EAAA,OAAAD,OAAAC,EAAA,KAAA,kGAAgB,CAAA,EAAA,OAAAH,EAAA,IAAAC,EAAA,6BAAgB,CAAA,EAAA,gBAAAD,EAAA,IAAAC,EAAA,6BAAwB,CAAA,EAAA,WAAA,mGAIpQ,SAAA,4iBAQE,SAAA,mHAEA,SAAA,CAAA,gEAAAD,EAAA,IAAAC,EAAA,oFAAuI,CAAA,EAAA;AAAA,uFAAAD,EAAA,IAAAC,EAAA,qEACC,CAAA,EAAA;AAAA,oFAAAD,EAAA,IAAAC,EAAA,iDACvB,CAAA,EAAA;AAAA,yBAAAC,OAAAC,EAAA,KAAA,qLAGtF,CAAA,EAAA,IAAAH,EAAA,IAAAI,EAAA,82BCrB7B,SAAA,CAAA,uBAAAJ,EAAA,IAAAC,EAAA,uBAAuB,CAAA,EAAA,kDAAAC,OAAAC,EAAA,KAAA,qGAA2D,CAAA,EAAA,IAAAD,OAAAC,EAAA,KAAA,qGAAc,CAAA,EAAA,IAAAD,OAAAC,EAAA,KAAA,sGAAe,CAAA,EAAA,IAAAH,EAAA,IAAAC,EAAA,gCAAc,CAAA,EAAA,MAAAC,OAAAC,EAAA,KAAA,uHAE7H,SAAA,CAAA,2GAAAH,MAAAG,EAAA,OAAA,CAA0G,SAAA,aAAa,CAAA,EAAA,yDAAAH,EAAA,IAAAC,EAAA,sCAAwE,CAAA,EAAA,6BAAA,wGAI/L,SAAA,wpBAQE,SAAA,2GAEA,SAAA,CAAA,mIAAAD,EAAA,IAAAC,EAAA,gCAA4I,CAAA,EAAA,MAAAD,EAAA,IAAAC,EAAA,uBAAM,CAAA,EAAA,4CAAAD,EAAA,IAAAC,EAAA,uBAA4C,CAAA,EAAA,MAAA,gBAE9L,SAAA,CAAA,iIAAAD,EAAA,IAAAC,EAAA,iCAA2I,CAAA,EAAA,MAAAD,EAAA,IAAAC,EAAA,uBAAM,CAAA,EAAA,2CAAAD,EAAA,IAAAC,EAAA,wBAA4C,CAAA,EAAA,MAAA,gBAE7L,SAAA,CAAA,6CAAAD,EAAA,IAAAC,EAAA,iCAAuD,CAAA,EAAA,uBAAAD,EAAA,IAAAC,EAAA,wBAAwB,CAAA,EAAA,wEAAA,4oDClBjF,SAAA,CAAA,yBAAAD,EAAA,IAAAC,EAAA,0BAA8B,CAAA,EAAA,yCAAAC,OAAAC,EAAA,KAAA,uHAA0F,CAAA,EAAA,IAAAD,OAAAC,EAAA,KAAA,uHAAsD,CAAA,EAAA,IAAAD,OAAAC,EAAA,KAAA,uHAAsD,CAAA,EAAA,IAAAH,EAAA,IAAAC,EAAA,kDAAsD,CAAA,EAAA,MAAAC,OAAAC,EAAA,KAAA,uHAAuD,CAAA,EAAA;AAAA,sIAAA,gBAGjV,SAAA,CAAA,wDAAAH,MAAAG,EAAA,OAAA,CAAuD,SAAA,SAAS,CAAA,EAAA,IAAAD,OAAAC,EAAA,KAAA,qGAAa,CAAA,EAAA,IAAAD,OAAAC,EAAA,KAAA,qGAAc,CAAA,EAAA,IAAAD,OAAAC,EAAA,KAAA,sGAAe,CAAA,EAAA,IAAAH,EAAA,IAAAC,EAAA,gCAAc,CAAA,EAAA,MAAAC,OAAAC,EAAA,KAAA,qGAAe,CAAA,EAAA,uBAAAH,MAAAG,EAAA,OAAA,CAAuB,SAAA,WAAW,CAAA,EAAA,oBAAAH,EAAA,IAAAC,EAAA,sCAAmC,CAAA,EAAA,uCAAAD,MAAAG,EAAA,OAAA,CAAsC,SAAA,KAAK,CAAA,EAAA,iCAAA,iGAIvP,SAAA,o7CCTA,SAAA,CAAA,yEAAAH,EAAA,IAAAC,EAAA,uBAAyE,CAAA,EAAA,oBAAAC,OAAAC,EAAA,KAAA,wWAIhE,CAAA,EAAA,IAAAD,OAAAC,EAAA,KAAA,4FAAK,CAAA,EAAA,IAAAH,EAAA,IAAAC,EAAA,4LACL,CAAA,EAAA,IAAAC,OAAAC,EAAA,KAAA,4FAAK,CAAA,EAAA,IAAAH,EAAA,IAAAC,EAAA,4LACL,CAAA,EAAA,IAAAC,OAAAC,EAAA,KAAA,4FAAK,CAAA,EAAA,IAAAH,EAAA,IAAAC,EAAA,4LACL,CAAA,EAAA,IAAAC,OAAAC,EAAA,KAAA,4FAAK,CAAA,EAAA,IAAAH,EAAA,IAAAC,EAAA,4LACL,CAAA,EAAA,IAAAC,OAAAC,EAAA,KAAA,4FAAK,CAAA,EAAA,IAAAH,EAAA,IAAAC,EAAA,kEAEZ,SAAA,CAAA,yEAAAC,OAAAC,EAAA,KAAA,4FAAyE,CAAA,EAAA;AAAA,6GAAAH,EAAA,IAAAC,EAAA,uBACqC,CAAA,EAAA,2BAAAC,OAAAC,EAAA,KAAA,8GAE9G,SAAA,CAAA,+CAAAH,EAAA,IAAAC,EAAA,uBAA+C,CAAA,EAAA,iBAAAD,EAAA,IAAAC,EAAA,uBAAiB,CAAA,EAAA,kBAAAC,OAAAC,EAAA,KAAA,4FAAkB,CAAA,EAAA,wBAAAH,EAAA,IAAAC,EAAA,uBAAyB,CAAA,EAAA,eAAAC,OAAAC,EAAA,KAAA,4FAAe,CAAA,EAAA,4CAAAD,OAAAC,EAAA,KAAA,8GAE1H,SAAA,CAAA,sCAAAH,EAAA,IAAAC,EAAA,uBAAsC,CAAA,EAAA,0BAAAC,OAAAC,EAAA,KAAA,4FAA0B,CAAA,EAAA,wBAAAH,EAAA,IAAAC,EAAA,uBAAyB,CAAA,EAAA,gBAAAC,OAAAC,EAAA,KAAA,4FAAgB,CAAA,EAAA,iCAAA,2FAE9E,CAAA,EAAA,IAAAH,EAAA,IAAAI,EAAA,+8BCjB7B,SAAA,mKAIA,SAAA,mJAIA,SAAA,kNAES,CAAA,EAAA,IAAAJ,EAAA,IAAAC,EAAA,4LACA,CAAA,EAAA,IAAAD,EAAA,IAAAC,EAAA,4LACA,CAAA,EAAA,IAAAC,OAAAC,EAAA,KAAA,4FAAK,CAAA,EAAA,IAAAH,EAAA,IAAAC,EAAA,4LACL,CAAA,EAAA,IAAAC,OAAAC,EAAA,KAAA,4FAAK,CAAA,EAAA,IAAAH,EAAA,IAAAC,EAAA,4LACL,CAAA,EAAA,IAAAD,EAAA,IAAAC,EAAA,kEAEP,SAAA,CAAA,wEAAAD,MAAAG,EAAA,OAAA,CAAuE,SAAA,gBAAgB,CAAA,EAAA,wDAAAH,MAAAG,EAAA,OAAA,CAAuD,SAAA,aAAa,CAAA,EAAA,kBAAA,2FAEhI,CAAA,EAAA,IAAAH,EAAA,IAAAI,EAAA,i8CChB7B,SAAA,CAAA,uEAAAJ,MAAAG,EAAA,OAAA,CAAsE,SAAA,UAAU,CAAA,EAAA,IAAAH,EAAA,IAAAK,EAAA,mEAAI,CAAA,EAAA,yBAAAL,EAAA,IAAAK,EAAA,mEAAyB,CAAA,EAAA,iBAAAL,EAAA,IAAAK,EAAA,mEAAiB,CAAA,EAAA,4BAAA;;;;;;;;;;;;;;uJAoB9H,SAAA,CAAA,0BAAAL,EAAA,IAAAK,EAAA,iFAAwC,CAAA,EAAA,UAAAL,EAAA,IAAAK,EAAA,2EAAkB,CAAA,EAAA,+CAAA,64DCpB1D,SAAA,CAAA,wEAAAL,MAAAG,EAAA,OAAA,CAAuE,SAAA,UAAU,CAAA,EAAA,IAAAH,EAAA,IAAAK,EAAA,mEAAI,CAAA,EAAA,KAAAL,EAAA,IAAAK,EAAA,mEAAK,CAAA,EAAA,4BAAA;;;;;;;;;;;;;;;uJAqB1F,SAAA,CAAA,mCAAAL,EAAA,IAAAK,EAAA,uEAAwC,CAAA,EAAA,4BAAAL,EAAA,IAAAK,EAAA,2EAAqC,CAAA,EAAA,MAAIC,EAAE,GAAA,q+BCvBnF,SAAA,CAAA,4EAAAN,MAAAG,EAAA,OAAA,CAA2E,SAAA,oBAAoB,CAAA,EAAA,IAAAH,EAAA,IAAAK,EAAA,mEAAI,CAAA,EAAA,KAAAL,EAAA,IAAAK,EAAA,mEAAK,CAAA,EAAA,KAAAL,EAAA,IAAAK,EAAA,mEAAK,CAAA,EAAA,KAAAL,EAAA,IAAAK,EAAA,mEAAK,CAAA,EAAA,4BAAA;;;;;;;;;sJAelH,SAAA,8MAEwB,CAAA,EAAA,sBAAAL,EAAA,IAAAK,EAAA,0NACZ,CAAA,EAAA,sCAAAL,EAAA,IAAAC,EAAA,yKACA,CAAA,EAAA,sCAAAD,EAAA,IAAAC,EAAA,yKACA,CAAA,EAAA,wBAAAD,EAAA,IAAAC,EAAA,2LAC4B,CAAA,EAAA,sBAAAD,EAAA,IAAAK,EAAA,gjDCnBxC,SAAA;;;;;;;;;;;;uJAkBA,SAAA,CAAA,aAAAL,EAAA,IAAAK,EAAA,wEAAkB,CAAA,EAAA,uEAAA,4CAEXE,SAAAA,iCACAC,EAAM,CAAA,iCACNA,EAAM,CAAA,iCACNA,EAAM,CAAA,iCACNA,EAAM,CAAA,q2CCxBb,SAAA,CAAA,qDAAAR,EAAA,IAAAK,EAAA,mEAAqD,CAAA,EAAA,4BAAAL,EAAA,IAAAK,EAAA,mEAA4B,CAAA,EAAA,KAAAL,EAAA,IAAAK,EAAA,qEAAO,CAAA,EAAA,oBAAAL,EAAA,IAAAC,EAAA,uBAAoB,CAAA,EAAA,MAAAD,EAAA,IAAAK,EAAA,mEAAM,CAAA,EAAA,OAAAL,EAAA,IAAAK,EAAA,mEAAO,CAAA,EAAA,eAAA;;;;;;;;;;uJAgBzH,SAAA,CAAA,0BAAAL,EAAA,IAAAK,EAAA,oFAA2C,CAAA,EAAA,UAAAL,EAAA,IAAAK,EAAA,2EAAkB,CAAA,EAAA,sDAAAL,EAAA,IAAAK,EAAA,wEAA2D,CAAA,EAAA,GAAA,qyDChBxH,SAAA,CAAA,aAAAL,MAAAG,EAAA,OAAA,CAAY,SAAA,OAAO,CAAA,EAAA,0CAAA;;;;;;61CCFnB,SAAA,CAAA,aAAAH,MAAAG,EAAA,OAAA,CAAY,SAAA,OAAO,CAAA,EAAA,0CAAA,wkBAUjB,SAAA,CAAA;AAAA,4BAAAH,EAAA,IAAAC,EAAA,uBAC6B,CAAA,EAAA,aAAAC,OAAAC,EAAA,KAAA,4FAAa,CAAA,EAAA,QAAAH,EAAA,IAAAC,EAAA,yBAAW,CAAA,EAAA,yBAAAD,EAAA,IAAAC,EAAA,uBAAyB,CAAA,EAAA,OAAAD,EAAA,IAAAC,EAAA,uBAAO,CAAA,EAAA,WAAAD,EAAA,IAAAC,EAAA,yBAAa,CAAA,EAAA,6BAAAC,OAAAC,EAAA,KAAA,2GAA4C,CAAA,EAAA;AAAA,iCAAAD,OAAAC,EAAA,KAAA,4FAC5G,CAAA,EAAA,kCAAAD,OAAAC,EAAA,KAAA,4FAAmC,CAAA,EAAA,0CAAAH,EAAA,IAAAC,EAAA,uBAA2C,CAAA,EAAA,MAAAC,OAAAC,EAAA,KAAA,8FAAQ,CAAA,EAAA,UAAA;eAErH,SAAA,CAAA,gCAAAH,EAAA,IAAAC,EAAA,uBAAgC,CAAA,EAAA,aAAAC,OAAAC,EAAA,KAAA,6FAAa,CAAA,EAAA,mBAAAH,EAAA,IAAAC,EAAA,uBAAqB,CAAA,EAAA,YAAAD,EAAA,IAAAC,EAAA,sCAA2B,CAAA,EAAA,MAAAC,OAAAC,EAAA,KAAA,sHAAgC,CAAA,EAAA,qBAAAH,MAAAG,EAAA,OAAA,CAAqB,SAAA,OAAO,CAAA,EAAA,aAAAD,OAAAC,EAAA,KAAA;eACzJ,SAAA,CAAA,kCAAAH,EAAA,IAAAC,EAAA,uBAAkC,CAAA,EAAA,aAAAC,OAAAC,EAAA,KAAA,6FAAa,CAAA,EAAA,YAAAH,EAAA,IAAAC,EAAA,uBAAc,CAAA,EAAA,yBAAAC,OAAAC,EAAA,KAAA,uGAAoC,CAAA,EAAA,oBAAAH,MAAAG,EAAA,OAAA,CAAoB,SAAA,SAAS,CAAA,EAAA,mBAAA;eAC9H,SAAA,CAAA,gCAAAH,EAAA,IAAAC,EAAA,uBAAgC,CAAA,EAAA,aAAAC,OAAAC,EAAA,KAAA,6FAAa,CAAA,EAAA,yCAAAH,EAAA,IAAAC,EAAA,uBAA2C,CAAA,EAAA,yBAAAD,EAAA,IAAAC,EAAA,yBAA2B,CAAA,EAAA,aAAAD,EAAA,IAAAC,EAAA,gCAAsB,CAAA,EAAA,iBAAAC,OAAAC,EAAA,KAAA;eACzI,SAAA,CAAA,iCAAAH,EAAA,IAAAC,EAAA,uBAAiC,CAAA,EAAA,aAAAC,OAAAC,EAAA,KAAA,6FAAa,CAAA,EAAA,YAAAH,EAAA,IAAAC,EAAA,uBAAc,CAAA,EAAA,yBAAAC,OAAAC,EAAA,KAAA,uGAAoC,CAAA,EAAA,oBAAAH,MAAAG,EAAA,OAAA,CAAoB,SAAA,OAAO,CAAA,EAAA,mBAAA;iBAE9H,SAAA,CAAA,sCAAAH,MAAAG,EAAA,GAAA,CAAoC,SAAA,UAAS,CAAA,EAAA,OAAAH,EAAA,IAAAC,EAAA,yBAAS,CAAA,EAAA,2BAAAC,OAAAC,EAAA,KAAA,ugDCjBxD,SAAA,CAAA,0DAAAH,EAAA,IAAAK,EAAA,sEAA8D,CAAA,EAAA,GAAA;;;;gJAU9D,SAAA,CAAA,iDAAAL,EAAA,IAAAK,EAAA,sEAAqD,CAAA,EAAA,mCAAA,yqDCZrD,SAAA,CAAA;AAAA,qGAAAL,EAAA,IAAAK,EAAA,wEAC2G,CAAA,EAAA,yFAAAL,EAAA,IAAAK,EAAA,4EAAkG,CAAA,EAAA,4DAAAL,EAAA,IAAAK,EAAA,+EAAwE,CAAA,EAAA,2DAAA,eAErR,SAAA,gVAMM,SAAA,CAAA,QAAAL,EAAA,IAAAC,EAAA,iHACG,CAAA,EAAA,MAAAD,EAAA,IAAAC,EAAA,wEACH,SAAA,CAAA,QAAAD,EAAA,IAAAC,EAAA,iHACG,CAAA,EAAA,MAAAD,EAAA,IAAAC,EAAA,uEACH,SAAA,6DAEJ,SAAA,CAAA,0BAAAD,EAAA,IAAAC,EAAA,uBAA0B,CAAA,EAAA,kBAAAC,OAAAC,EAAA,KAAA,4FAAkB,CAAA,EAAA,6FAAA,wGAI5C,SAAA,CAAA;AAAA,YAAAH,EAAA,IAAAC,EAAA,uBACa,CAAA,EAAA,6CAAAD,MAAAG,EAAA,GAAA,CAA2C,SAAA,UAAS,CAAA,EAAA,WAAA,0GAIjE,SAAA"}