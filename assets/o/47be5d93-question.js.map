{"version":3,"file":"47be5d93-question.js","sources":["../../../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/p-2-condizioni/question.md","../../../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/p-3-mediana/question.md","../../../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/s-3-gira-ruota/visualizer.jsx","../../../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/s-3-gira-ruota/question.mdx","../../../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/s-2-alza-torre/visualizer.jsx","../../../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/s-2-alza-torre/question.mdx","../../../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/p-4-ciclo-lista/question.md","../../../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/s-4-muro/visualizer.jsx","../../../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/s-4-muro/question.mdx"],"sourcesContent":["Considera questo procedimento, che usa le tre **variabili** numeriche di nome $A$, $B$ e $C$.\n\n![code](code.asy)\n\nQuesto programma viene eseguito due volte:\n\n- La prima volta impostando $A$ a $7$, $B$ a $4$, e $C$ a $6$.\n- La seconda volta impostando invece $A$ a $5$, $B$ a $7$, e $C$ a $9$.\n\nQuali numeri stampa il procedimento?\n\n- [x] 7 e 9\n- [ ] 6 e 9\n- [ ] 7 e 7\n- [ ] 5 e 7\n- [ ] 4 e 5\n\n> Il procedimento ogni volta stampa il numero più grande tra $A$, $B$ e $C$.\n>\n> La prima volta che viene eseguito il programma, $A$ è più grande di $B$, si controlla quindi se $A$ è più grande di $C$. Essendo $A$ più grande di $C$, il programma scrive il valore di $A$, che è $7$.\n>\n> La seconda volta, $A$ è più piccolo di $B$, si controlla quindi se $B$ è più grande di $C$, ma $B$ è più piccolo di $C$. Il programma scrive quindi il valore di $C$, che è $9$.\n","Considera questo procedimento, che si riferisce alle tre **variabili** numeriche $A$, $B$ e $C$:\n\n![code](code.asy)\n\nQuesto procedimento dovrebbe stampare la _mediana_ tra le tre variabili, ovvero il valore di mezzo tra i tre. Ad esempio, la mediana di $5$, $3$ e $10$ è $5$, e la mediana di $4$, $1$ e $1$ è $1$. Tuttavia, mancano dei blocchi per completare il procedimento!\n\nQuale delle seguenti può essere la parte mancante, da sostituire al blocco indicato con **???**, affinché il procedimento stampi sempre la mediana?\n\n- [x] ![opzione1](opz1.asy)\n- [ ] ![opzione2](opz2.asy)\n- [ ] ![opzione3](opz3.asy)\n- [ ] ![opzione4](opz4.asy)\n- [ ] Il procedimento è già completo, non servono altri blocchi\n\n> La risposta è\n>\n> ![opzione1](opz1.asy)\n>\n> Vediamo cosa fa il procedimento dopo averlo completato nel modo proposto.\n>\n> 1. Per prima cosa, le due variabili $A$ e $B$ vengono ordinate, scambiandone i valori se necessario.\n> 2. A questo punto, $B$ e $C$ vengono ordinate. In questo momento, $C$ contiene il massimo dei tre valori iniziali.\n> 3. Per finire, $A$ e $B$ vengono nuovamente ordinate. Adesso $B$ contiene il massimo dei due valori più piccoli, ovvero il valore centrale (la mediana)!\n>\n> _Approfondimento:_ questo procedimento si chiama **BubbleSort** su tre variabili, uno dei più semplici (ma poco efficienti) algoritmi di ordinamento.\n","\"use client\";\n\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=45\";\n\nfunction Sector({ color, from, portion, text }) {\n  const deg = 0.5 - portion;\n  return (\n    <Rectangle\n      color=\"transparent\"\n      x={8}\n      y={12}\n      width={200}\n      height={100}\n      rotation={from + portion - 0.25}\n      className=\"origin-bottom overflow-hidden !border-0\">\n      <div\n        style={{ transform: `rotate(${deg}turn)`, backgroundColor: color }}\n        className=\"absolute size-full origin-bottom rounded-t-full\"\n      />\n      <div\n        style={{ transform: `rotate(${deg / 2}turn)` }}\n        className=\"absolute mt-1 size-full origin-bottom text-center text-2xl text-slate-900 underline decoration-slate-900\">\n        {text}\n      </div>\n    </Rectangle>\n  );\n}\n\nexport default function Visualizer({ variables, state }) {\n  const { S, N, C, pos, prizes, friends } = state;\n\n  const colors = [\n    \"#4093b0\",\n    \"#bf4eb4\",\n    \"#44c966\",\n    \"#4473c9\",\n    \"#c2a948\",\n    \"#7468c5\",\n    \"#9c5ebd\",\n    \"#7cc258\",\n    \"#a3b651\",\n    \"#40af91\",\n    \"#4473c9\",\n    \"#c2a948\",\n    \"#7468c5\",\n  ];\n\n  return (\n    <>\n      <Canvas>\n        <Rectangle borderColor=\"white\" x={8 - 50} y={12 - 50} width={300} height={300} />\n        {range(S).map((i) => (\n          <Sector key={i} color={colors[i]} from={(i + pos) / S} portion={1 / S} text={prizes[i]} />\n        ))}\n        {range(N).map((i) => (\n          <Sprite\n            key={i}\n            src={bunny}\n            alt=\"Amico\"\n            y={4}\n            rotation={(0.5 + friends[i]) / S + 0.125}\n            className=\"origin-[108px_108px]\"\n          />\n        ))}\n      </Canvas>\n      <Variables variables={{ carote: C, ...variables }} />\n    </>\n  );\n}\n","import initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s3.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nTip-Tap ha appena raccolto ben $C$ carote dal suo orto, e vuole condividerle con i suoi $N$ amici.\nLi ha quindi invitati tutti a giocare alla ruota della fortuna, per decidere come dividerle divertendosi!\n\nLa ruota della fortuna è un cerchio diviso in $S$ spicchi, e su ciascuno di essi c'è scritto un numero.\nTutti i giocatori si siedono intorno alla ruota davanti a uno spicchio e poi la ruota viene fatta girare:\nquando la ruota si ferma, ognuno otterrà tante carote quanto è il numero scritto sullo spicchio che a\nquel punto avrà davanti a sé.\n\nOra gli amici sono arrivati, ma Tip-Tap si è reso conto di non aver fatto bene i conti: potrebbe non avere\nabbastanza carote per pagare i premi! Per non fare brutta figura con gli amici, decide quindi di far girare\nlentamente la ruota e poi fermarla di nascosto non appena si trova in una posizione in cui ha abbastanza\ncarote per tutti. Per farlo, Tip-Tap può fare le seguenti azioni:\n\n- `gira la ruota`: lascia girare la ruota di un ulteriore spicchio.\n- `premio di i`: quante carote riceverebbe al momento l'$i$-esimo amico.\n- `ferma la ruota`: ferma la ruota e termina il programma.\n\nAiuta Tip-Tap, facendo girare la ruota fino a che non raggiunge la prima posizione per cui Tip-Tap\nha abbastanza carote per pagare tutti i premi!\n\n_**Attenzione:** c'è sempre almeno una posizione della ruota che consente a Tip-Tap di pagare tutti i premi._\n\n<Blockly\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  debug={{ logBlocks: false, logJs: false, logVariables: false }}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> In questo programma, Tip-Tap prova a far girare la ruota fino ad un massimo di $S$ volte, provando quindi\n> tutte le rotazioni possibili. Per ogni rotazione, calcola il premio totale da assegnare ai suoi amici\n> nella variabile **somma**, inizializzandola a zero e poi iterando su tutti gli $N$ amici, ogni volta\n> incrementando **somma** del valore del premio per l'amico $i$-esimo in questa rotazione. Se la somma\n> così calcolata risulta minore del numero di carote a disposizione, Tip-Tap ferma la ruota, altrimenti\n> lascia che la ruota continui a girare e continua a provare la prossima rotazione.\n","\"use client\";\n\nimport { useEffect, useRef } from \"react\";\n\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=66\";\nimport stairs from \"./asy/stairs.asy?w=80\";\n\nexport default function Visualizer({ variables, state }) {\n  const colors = [\n    \"#4093b0\",\n    \"#bf4eb4\",\n    \"#44c966\",\n    \"#4473c9\",\n    \"#c2a948\",\n    \"#7468c5\",\n    \"#9c5ebd\",\n    \"#7cc258\",\n    \"#a3b651\",\n    \"#40af91\",\n    \"#4473c9\",\n    \"#c2a948\",\n    \"#7468c5\",\n    \"#9c5ebd\",\n    \"#7cc258\",\n    \"#a3b651\",\n  ];\n\n  const ref = useRef();\n  useEffect(() => {\n    const container = ref.current?.parentElement;\n    if (container) {\n      container.scrollTop = container.scrollHeight;\n    }\n  }, []);\n\n  const y = [0];\n  for (let i = 0; i < state.N; i++) {\n    y[i + 1] = y[i] + (state.rot[i] ? state.larghezze[i] : state.altezze[i]);\n  }\n\n  return (\n    <div ref={ref}>\n      <Canvas gravity=\"bottom\" scale={10}>\n        {range(state.N).map((i) => {\n          const px = 16 - state.larghezze[i] / 2;\n          const py = y[i] + (state.rot[i] && (state.larghezze[i] - state.altezze[i]) / 2);\n          const rotation = state.rot[i] ? 0.25 : 0;\n          return (\n            <Rectangle\n              key={i}\n              color={colors[i]}\n              height={state.altezze[i]}\n              width={state.larghezze[i]}\n              x={px}\n              y={py}\n              rotation={rotation}\n            />\n          );\n        })}\n        <Sprite src={stairs} alt=\"Scale\" x={0.6} y={0} />\n        <Sprite src={bunny} alt=\"Bunny\" x={1.5} y={y[state.pos]} follow />\n      </Canvas>\n      <Variables variables={{ scatole: state.N, ...variables }} />\n    </div>\n  );\n}\n","import initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s2.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nBunny e i suoi amici stanno cercando gli ovetti di pasqua nascosti in giro per la fattoria Fibonacci!\nBunny è convinto che ci siano ovetti nascosti anche sui tetti, quindi ha deciso di costruire una\ntorre che gli consenta di arrivare più in alto possibile.\n\nPer farlo, ha impilato $N$ scatole rettangolari di varie dimensioni. Bunny può misurare queste dimensioni,\ntramite le operazioni:\n\n- `altezza della scatola i`: l'altezza della $i$-esima scatola.\n- `larghezza della scatola i`: la larghezza della $i$-esima scatola.\n\nTuttavia, Bunny non è convinto di aver realizzato la torre più alta che potrebbe fare. Per aggiustare\nla torre, Bunny può fare la seguente operazione:\n\n- `ruota la scatola i`: ruota di 90 gradi la scatola $i$-esima, scambiando quindi di conseguenza\n  la sua altezza con la sua larghezza.\n\nAiuta Bunny a realizzare la torre più alta! Aiutalo anche a capire per quali tetti la torre sarà\nabbastanza alta, riportando l'altezza totale della torre con l'operazione:\n\n- `riporta altezza t`: termina il programma riportando il numero $t$ come altezza della torre.\n\n<Blockly\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  debug={{ logBlocks: false, logJs: false, logVariables: false }}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> In questo programma, dopo aver inizializzato la variabile $t$ a zero, Bunny itera sulle $N$ scatole,\n> numerandole tramite la variabile $i$ che cresce da $1$ a $N$ a ogni iterazione. In ciascun passo,\n> controlla se l'altezza della scatola $i$-esima è minore della sua larghezza: in questo caso, conviene\n> ruotarla per alzare la torre. Volendo inoltre calcolare l'altezza totale della torre, Bunny aggiunge\n> l'altezza della scatola (possibilmente ruotata) alla variabile $t$. Una volta terminato di esaminare\n> tutte le scatole, Bunny può terminare riportando il valore di $t$ come altezza della torre.\n","Considera questo procedimento, che si riferisce ad un **lista** di numeri $A$, di dimensione rappresentata dalla **variabile** numerica $N$, e con l'ausilio della **variabile** numerica $P$.\n\n![code](code.asy)\n\nIl procedimento viene eseguito tre volte, sempre con $N$ pari a $9$ e con i tre seguenti valori per la lista $A$:\n\n![array](fig1.asy?w=650)\n\nPer quali di questi valori di $A$ il procedimento stampa _\"trovato\"_?\n\n- [x] Solo il valore 1.\n- [ ] Solo il valore 2.\n- [ ] Solo il valore 3.\n- [ ] Tutti.\n- [ ] Solo i valori 1 e 3.\n\n> Il procedimento scandisce la lista di numeri dall'inizio, andando a cercare una posizione che contiene uno zero seguito da un uno: se la trova stampa _\"trovato\"_, altrimenti non stampa nulla.\n>\n> Nel primo caso il procedimento stampa _\"trovato\"_, infatti quando $P$ è uguale a $2$ il valore in posizione $P$ di $A$ è $0$ e il valore in posizione $P+1$ è $1$.\n>\n> Nel secondo e nel terzo caso invece il procedimento non stampa nulla, dato che non esiste nessun valore di $P$ tale che la posizione $P$ di $A$ sia uguale a $0$ e la posizione $P+1$ di $A$ sia uguale a $1$.\n","\"use client\";\n\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=66\";\n\nconst paints = import.meta.glob(\"./asy/paint*.asy\", {\n  eager: true,\n  import: \"default\",\n  query: { w: 40 },\n});\n\nexport default function Visualizer({ variables, state }) {\n  const colors = [\n    \"#ffffff\",\n    \"#0000ff\",\n    \"#ff0000\",\n    \"#00ff00\",\n    \"#ff00ff\",\n    \"#ffff00\",\n    \"#00ffff\",\n    \"#7f7f7f\",\n    \"#7f0000\",\n    \"#007f00\",\n    \"#7f7f00\",\n    \"#000000\",\n  ];\n\n  return (\n    <>\n      <Canvas scale={40}>\n        {range(state.N).map((i) => (\n          <Rectangle key={i} color={colors[state.muro[i]]} width={1} height={4} x={i + 2} y={0} />\n        ))}\n        <Sprite src={bunny} alt=\"Bunny\" x={1 + state.pos} y={1.4} />\n        <Sprite\n          src={paints[`./asy/paint${Math.min(state.i + 1, state.C)}.asy`]}\n          alt=\"Vernice\"\n          x={0}\n          y={3}\n        />\n      </Canvas>\n      <Variables variables={{ colori: state.C, ...variables }} />\n    </>\n  );\n}\n","import initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s4.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nBunny ha comprato $C$ colori diversi per dipingere il muro della fattoria, che è composto\nda $N$ pannelli verticali. L'obiettivo di Bunny è di dipingere il muro in zone rettangolari\nche seguono i pannelli con la supervisione di Carol, l'artista della fattoria.\n\nBunny utilizzerà un colore alla volta nell'ordine che gli viene dato da Carol. Inoltre, Carol\nsa quali colori sono i più belli, e quindi vuole che il colore $i$-esimo sia utilizzato per\ndipingere un rettangolo largo $L_i$ pannelli.\n\nBunny è però libero di scegliere dove posizionare ogni rettangolo nel muro, e cioè da quale\npannello cominciare a dipingere, a patto di non dipingere oltre i bordi del muro.\nAttenzione che Bunny può anche dipingere sopra i vecchi colori!\n\nA Bunny piacciono le pareti colorate, e quindi vorrebbe che alla fine del lavoro rimangano\nvisibili sul muro più colori possibile (senza considerare il bianco iniziale del muro).\nAiutalo a raggiungere il suo scopo, rispettando però le indicazioni di Carol!\n\nBunny può fare le seguenti azioni:\n\n- `pannelli da pitturare`: quanti pannelli $L_i$ sono da pitturare con il colore corrente $i$ secondo Carol.\n- `colora dalla posizione p`: usa il colore corrente $i$ per pitturare completamente $L_i$\n  pannelli, a partire dal pannello $p$-esimo in poi, poi passa al prossimo colore. Attenzione che devono esistere almeno $L_i$\n  pannelli nel muro a partire dal $p$-esimo!\n- `metti via i pennelli`: finisce di pitturare e termina il programma.\n\nAiuta Bunny a pitturare di modo da lasciare più colori possibile alla fine del lavoro!\n\n<Blockly\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  debug={{ logBlocks: false, logJs: false, logVariables: false }}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> In questo programma, Bunny per avere più colori possibile sfrutta un'idea: far sì che tutti i colori dall'inizio\n> fino alla sua posizione siano tutti diversi. Per ogni colore, prova quindi ad iniziare a colorare dalla posizione\n> **pos** che è subito dopo alla posizione da cui ha colorato precedentemente, incrementando quindi **pos** di $1$ > _(all'inizio, parte a colorare dalla prima posizione)_. Tuttavia, potrebbe essere che Carol gli chieda di pitturare\n> più pannelli di quelli che sono disponibili dalla posizione **pos** in avanti: questo succede se **pos** sommato ai\n> pannelli da pitturare supera $N+1$. In questo caso, Bunny è costretto a cancellare alcuni dei colori che ha già\n> usato: torna quindi indietro il meno possibile, finché non ha abbastanza spazio per pitturare il numero di pannelli\n> che gli è stato richiesto. Dopo aver ripetuto questo procedimento per tutti i colori, Bunny può mettere via i pennelli.\n"],"names":["_jsx","_components","_jsxs","Equation","Sector","color","from","portion","text","deg","jsxs","Rectangle","jsx","Visualizer","variables","state","S","N","C","pos","prizes","friends","colors","Fragment","Canvas","range","i","Sprite","bunny","Variables","customBlocks","initialBlocks","testcases","logBlocks","logJs","logVariables","ref","useRef","useEffect","container","y","px","py","rotation","stairs","paints","__vite_glob_0_0","__vite_glob_0_1","__vite_glob_0_2","__vite_glob_0_3","__vite_glob_0_4","__vite_glob_0_5","__vite_glob_0_6","__vite_glob_0_7","__vite_glob_0_8","__vite_glob_0_9","__vite_glob_0_10"],"mappings":";grBAAA,SAAA,CAAA,iDAAAA,MAAAC,EAAA,OAAA,CAAgD,SAAA,WAAW,CAAA,EAAA,sBAAAC,OAAAD,EAAA,KAAA,4FAAsB,CAAA,EAAA,IAAAD,EAAAA,IAAAG,EAAA,uBAAK,CAAA,EAAA,MAAAD,OAAAD,EAAA,KAAA,gMAItF,SAAA;eAEE,SAAA,CAAA,6BAAAD,EAAAA,IAAAG,EAAA,uBAA6B,CAAA,EAAA,MAAAD,OAAAD,EAAA,KAAA,4FAAM,CAAA,EAAA,IAAAD,EAAAA,IAAAG,EAAA,uBAAK,CAAA,EAAA,MAAAD,OAAAD,EAAA,KAAA,4FAAM,CAAA,EAAA,MAAAD,EAAAA,IAAAG,EAAA,uBAAO,CAAA,EAAA,MAAAD,OAAAD,EAAA,KAAA;eACrD,SAAA,CAAA,sCAAAD,EAAAA,IAAAG,EAAA,uBAAsC,CAAA,EAAA,MAAAD,OAAAD,EAAA,KAAA,4FAAM,CAAA,EAAA,IAAAD,EAAAA,IAAAG,EAAA,uBAAK,CAAA,EAAA,MAAAD,OAAAD,EAAA,KAAA,4FAAM,CAAA,EAAA,MAAAD,EAAAA,IAAAG,EAAA,uBAAO,CAAA,EAAA,MAAAD,OAAAD,EAAA,KAAA;gBAEhE,SAAA,8HAEM,SAAA,2DACA,SAAA,2DACA,SAAA,2DACA,SAAA,2DACA,SAAA,iDAEJ,SAAA,CAAA,8DAAAC,OAAAD,EAAA,KAAA,4FAA8D,CAAA,EAAA,IAAAD,EAAAA,IAAAG,EAAA,uBAAK,CAAA,EAAA,MAAAD,OAAAD,EAAA,KAAA,8GAEnE,SAAA,CAAA,mDAAAD,EAAAA,IAAAG,EAAA,uBAAmD,CAAA,EAAA,oBAAAD,OAAAD,EAAA,KAAA,4FAAoB,CAAA,EAAA,2BAAAD,EAAAA,IAAAG,EAAA,uBAA4B,CAAA,EAAA,oBAAAD,OAAAD,EAAA,KAAA,4FAAoB,CAAA,EAAA,YAAAD,EAAAA,IAAAG,EAAA,uBAAa,CAAA,EAAA,kBAAAD,OAAAD,EAAA,KAAA,4FAAkB,CAAA,EAAA,qCAAAC,OAAAD,EAAA,KAAA,4FAAsC,CAAA,EAAA,UAAAC,OAAAD,EAAA,KAAA,8GAE5L,SAAA,CAAA,qBAAAD,EAAAA,IAAAG,EAAA,uBAAqB,CAAA,EAAA,qBAAAD,OAAAD,EAAA,KAAA,4FAAqB,CAAA,EAAA,2BAAAD,EAAAA,IAAAG,EAAA,uBAA4B,CAAA,EAAA,oBAAAD,OAAAD,EAAA,KAAA,4FAAoB,CAAA,EAAA,OAAAD,EAAAA,IAAAG,EAAA,uBAAQ,CAAA,EAAA,qBAAAD,OAAAD,EAAA,KAAA,4FAAqB,CAAA,EAAA,4CAAAC,OAAAD,EAAA,KAAA,4FAA6C,CAAA,EAAA,UAAAC,OAAAD,EAAA,KAAA,spCCrBtK,SAAA,CAAA,4DAAAD,MAAAC,EAAA,OAAA,CAA2D,SAAA,WAAW,CAAA,EAAA,cAAAC,OAAAD,EAAA,KAAA,4FAAc,CAAA,EAAA,IAAAD,EAAAA,IAAAG,EAAA,uBAAK,CAAA,EAAA,MAAAD,OAAAD,EAAA,KAAA,iMAIzF,SAAA,CAAA,4CAAAD,MAAAC,EAAA,GAAA,CAA0C,SAAA,SAAQ,CAAA,EAAA,yFAAAC,OAAAD,EAAA,KAAA,4FAAyF,CAAA,EAAA,IAAAD,EAAAA,IAAAG,EAAA,uBAAK,CAAA,EAAA,MAAAH,EAAAA,IAAAG,EAAA,wBAAO,CAAA,EAAA,MAAAD,OAAAD,EAAA,KAAA,4FAAM,CAAA,EAAA,oBAAAC,OAAAD,EAAA,KAAA,4FAAqB,CAAA,EAAA,IAAAD,EAAAA,IAAAG,EAAA,uBAAK,CAAA,EAAA,MAAAH,EAAAA,IAAAG,EAAA,uBAAM,CAAA,EAAA,MAAAD,OAAAD,EAAA,KAAA,4FAAM,CAAA,EAAA,gEAAA,gBAEnM,SAAA,CAAA,2FAAAD,MAAAC,EAAA,OAAA,CAA0F,SAAA,KAAK,CAAA,EAAA,sDAAA,6kBAMzF,SAAA,oGAEJ,SAAA,oHAIA,SAAA;eAEG,SAAA,CAAA,oCAAAD,EAAAA,IAAAG,EAAA,uBAAoC,CAAA,EAAA,MAAAH,EAAAA,IAAAG,EAAA,uBAAM,CAAA,EAAA,yDAAA;eAC1C,SAAA,CAAA,mBAAAH,EAAAA,IAAAG,EAAA,uBAAmB,CAAA,EAAA,MAAAH,EAAAA,IAAAG,EAAA,uBAAM,CAAA,EAAA,yCAAAH,EAAAA,IAAAG,EAAA,uBAAyC,CAAA,EAAA,+CAAA;eAClE,SAAA,CAAA,eAAAH,EAAAA,IAAAG,EAAA,uBAAe,CAAA,EAAA,MAAAH,EAAAA,IAAAG,EAAA,uBAAM,CAAA,EAAA,wCAAAH,EAAAA,IAAAG,EAAA,uBAAwC,CAAA,EAAA,0FAAA;uCAE/D,SAAA,kBAAiB,CAAA,EAAA,kCAAAH,MAAAC,EAAA,OAAA,CAAiC,SAAA,YAAY,CAAA,EAAA,wFAAA,wjFChBjE,SAASG,EAAO,CAAE,MAAAC,EAAO,KAAAC,EAAM,QAAAC,EAAS,KAAAC,GAAQ,CAC9C,MAAMC,EAAM,GAAMF,EAClB,OACEG,EAAAA,KAACC,EAAA,CACC,MAAM,cACN,EAAG,EACH,EAAG,GACH,MAAO,IACP,OAAQ,IACR,SAAUL,EAAOC,EAAU,IAC3B,UAAU,0CACV,SAAA,CAAAK,EAAAA,IAAC,MAAA,CACC,MAAO,CAAE,UAAW,UAAUH,CAAG,QAAS,gBAAiBJ,CAAA,EAC3D,UAAU,iDAAA,CAAA,EAEZO,EAAAA,IAAC,MAAA,CACC,MAAO,CAAE,UAAW,UAAUH,EAAM,CAAC,OAAA,EACrC,UAAU,2GACT,SAAAD,CAAA,CAAA,CACH,CAAA,CAAA,CAGN,CAEA,SAAwBK,EAAW,CAAE,UAAAC,EAAW,MAAAC,GAAS,CACvD,KAAM,CAAE,EAAAC,EAAG,EAAAC,EAAG,EAAAC,EAAG,IAAAC,EAAK,OAAAC,EAAQ,QAAAC,GAAYN,EAEpCO,EAAS,CACb,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,SAAA,EAGF,OACEZ,EAAAA,KAAAa,WAAA,CACE,SAAA,CAAAb,OAACc,EAAA,CACC,SAAA,CAAAZ,EAAAA,IAACD,EAAA,CAAU,YAAY,QAAQ,EAAG,IAAQ,EAAG,IAAS,MAAO,IAAK,OAAQ,IAAK,EAC9Ec,EAAMT,CAAC,EAAE,IAAKU,GACbd,MAACR,EAAA,CAAe,MAAOkB,EAAOI,CAAC,EAAG,MAAOA,EAAIP,GAAOH,EAAG,QAAS,EAAIA,EAAG,KAAMI,EAAOM,CAAC,CAAA,EAAxEA,CAA2E,CACzF,EACAD,EAAMR,CAAC,EAAE,IAAKS,GACbd,EAAAA,IAACe,EAAA,CAEC,IAAKC,EACL,IAAI,QACJ,EAAG,EACH,UAAW,GAAMP,EAAQK,CAAC,GAAKV,EAAI,KACnC,UAAU,sBAAA,EALLU,CAAA,CAOR,CAAA,EACH,EACAd,EAAAA,IAACiB,GAAU,UAAW,CAAE,OAAQX,EAAG,GAAGJ,EAAU,CAAG,CAAA,EACrD,CAEJ,uTCnEA,SAAA,CAAA,kCAAAd,EAAAA,IAAAG,EAAA,uBAAkC,CAAA,EAAA,yDAAAH,EAAAA,IAAAG,EAAA,uBAAyD,CAAA,EAAA;AAAA,0GAAA,gBAG3F,SAAA,CAAA,iDAAAH,EAAAA,IAAAG,EAAA,uBAAiD,CAAA,EAAA;AAAA;AAAA;AAAA,8BAAA,eAKjD,SAAA;AAAA;AAAA;AAAA;gHAKiB,CAAA,EAAA,oDAAA;8GACF,CAAA,EAAA,4CAAAD,OAAAD,EAAA,KAAA,iGAA4C,CAAA,EAAA,SAAA;iHACzC,CAAA,EAAA,0CAAA;gBAElB,SAAA;AAAA,6GAGG,SAAA,aAAa,CAAA,EAAA,8FAAA,eAGA6B,aAAAA,EACCC,cAAAA,EACJC,UAAAA,SACFC,UAAW,GAAOC,MAAO,GAAOC,aAAc,IAC3CtB,WAAAA,mCAGZ,SAAA,uJAIA,SAAA,CAAA,kFAAAb,EAAAA,IAAAG,EAAA,uBAAkF,CAAA,EAAA;AAAA;AAAA,kBAAAH,MAAAC,EAAA,OAAA,CAEhE,SAAA,OAAO,CAAA,EAAA,yDAAAD,EAAAA,IAAAG,EAAA,uBAAyD,CAAA,EAAA;AAAA,gBAAAH,MAAAC,EAAA,OAAA,CAClE,SAAA,OAAO,CAAA,EAAA,sCAAAC,OAAAD,EAAA,KAAA,iGAAsC,CAAA,EAAA;AAAA;AAAA,kFAAA,+6GC/B/D,SAAwBY,GAAW,CAAE,UAAAC,EAAW,MAAAC,GAAS,CACvD,MAAMO,EAAS,CACb,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,SAAA,EAGIc,EAAMC,EAAAA,OAAA,EACZC,EAAAA,UAAU,IAAM,CACd,MAAMC,EAAYH,EAAI,SAAS,cAC3BG,IACFA,EAAU,UAAYA,EAAU,aAEpC,EAAG,CAAA,CAAE,EAEL,MAAMC,EAAI,CAAC,CAAC,EACZ,QAASd,EAAI,EAAGA,EAAIX,EAAM,EAAGW,IAC3Bc,EAAEd,EAAI,CAAC,EAAIc,EAAEd,CAAC,GAAKX,EAAM,IAAIW,CAAC,EAAIX,EAAM,UAAUW,CAAC,EAAIX,EAAM,QAAQW,CAAC,GAGxE,OACEhB,OAAC,OAAI,IAAA0B,EACH,SAAA,CAAA1B,EAAAA,KAACc,EAAA,CAAO,QAAQ,SAAS,MAAO,GAC7B,SAAA,CAAAC,EAAMV,EAAM,CAAC,EAAE,IAAKW,GAAM,CACzB,MAAMe,EAAK,GAAK1B,EAAM,UAAUW,CAAC,EAAI,EAC/BgB,EAAKF,EAAEd,CAAC,GAAKX,EAAM,IAAIW,CAAC,IAAMX,EAAM,UAAUW,CAAC,EAAIX,EAAM,QAAQW,CAAC,GAAK,GACvEiB,EAAW5B,EAAM,IAAIW,CAAC,EAAI,IAAO,EACvC,OACEd,EAAAA,IAACD,EAAA,CAEC,MAAOW,EAAOI,CAAC,EACf,OAAQX,EAAM,QAAQW,CAAC,EACvB,MAAOX,EAAM,UAAUW,CAAC,EACxB,EAAGe,EACH,EAAGC,EACH,SAAAC,CAAA,EANKjB,CAAA,CASX,CAAC,EACDd,EAAAA,IAACe,GAAO,IAAKiB,GAAQ,IAAI,QAAQ,EAAG,GAAK,EAAG,CAAA,CAAG,EAC/ChC,EAAAA,IAACe,EAAA,CAAO,IAAKC,GAAO,IAAI,QAAQ,EAAG,IAAK,EAAGY,EAAEzB,EAAM,GAAG,EAAG,OAAM,EAAA,CAAC,CAAA,EAClE,EACAH,MAACiB,GAAU,UAAW,CAAE,QAASd,EAAM,EAAG,GAAGD,EAAU,CAAG,CAAA,EAC5D,CAEJ,8RChEA,SAAA;AAAA;AAAA,yEAIA,SAAA,CAAA,0BAAAd,EAAAA,IAAAG,EAAA,uBAA0B,CAAA,EAAA;AAAA,uBAAA;0HAGC,CAAA,EAAA,qBAAAD,OAAAD,EAAA,KAAA,iGAAqB,CAAA,EAAA,WAAA;4HACnB,CAAA,EAAA,wBAAAC,OAAAD,EAAA,KAAA,iGAAwB,CAAA,EAAA,WAAA;gBAErD,SAAA;AAAA;qHAGsB,CAAA,EAAA,kCAAAC,OAAAD,EAAA,KAAA,kGAAkC,CAAA,EAAA;AAAA,qCAAA;gBAGxD,SAAA;AAAA;oHAGqB,CAAA,EAAA,+CAAAD,EAAAA,IAAAG,EAAA,uBAA+C,CAAA,EAAA,4BAAA;cAGpD2B,aAAAA,GACCC,cAAAA,EACJC,UAAAA,UACFC,UAAW,GAAOC,MAAO,GAAOC,aAAc,IAC3CtB,WAAAA,oCAGZ,SAAA,uJAIA,SAAA,CAAA,6DAAAb,EAAAA,IAAAG,EAAA,uBAA6D,CAAA,EAAA,8BAAAH,EAAAA,IAAAG,EAAA,uBAA8B,CAAA,EAAA;AAAA,mCAAAH,EAAAA,IAAAG,EAAA,uBACvD,CAAA,EAAA,kBAAAH,EAAAA,IAAAG,EAAA,uBAAkB,CAAA,EAAA,MAAAH,EAAAA,IAAAG,EAAA,uBAAM,CAAA,EAAA;AAAA,uCAAAD,OAAAD,EAAA,KAAA,iGACpB,CAAA,EAAA;AAAA;AAAA,iEAAAC,OAAAD,EAAA,KAAA,4FAE0B,CAAA,EAAA;AAAA,gEAAAD,EAAAA,IAAAG,EAAA,uBACD,CAAA,EAAA,4BAAA,4zBC3CnE,SAAA,CAAA,yDAAAH,MAAAC,EAAA,OAAA,CAAwD,SAAA,OAAO,CAAA,EAAA,cAAAC,OAAAD,EAAA,KAAA,4FAAc,CAAA,EAAA,sCAAAD,MAAAC,EAAA,OAAA,CAAsC,SAAA,WAAW,CAAA,EAAA,aAAAC,OAAAD,EAAA,KAAA,4FAAa,CAAA,EAAA,0BAAAD,MAAAC,EAAA,OAAA,CAA0B,SAAA,WAAW,CAAA,EAAA,aAAAC,OAAAD,EAAA,KAAA,iMAIhL,SAAA,CAAA,wDAAAD,EAAAA,IAAAG,EAAA,uBAAwD,CAAA,EAAA,WAAAH,EAAAA,IAAAG,EAAA,uBAAW,CAAA,EAAA,6CAAAD,OAAAD,EAAA,KAAA,kMAInE,SAAA,CAAA,iCAAAD,EAAAA,IAAAG,EAAA,uBAAiC,CAAA,EAAA,2BAAAH,MAAAC,EAAA,GAAA,CAAyB,SAAA,WAAU,CAAA,EAAA,GAAA,yFAE9D,SAAA,uEACA,SAAA,uEACA,SAAA,uEACA,SAAA,4DACA,SAAA,gEAEJ,SAAA,CAAA,yJAAAD,MAAAC,EAAA,GAAA,CAAuJ,SAAA,WAAU,CAAA,EAAA,gCAAA,gBAEjK,SAAA,CAAA,yCAAAD,MAAAC,EAAA,GAAA,CAAuC,SAAA,WAAU,CAAA,EAAA,oBAAAD,EAAAA,IAAAG,EAAA,uBAAoB,CAAA,EAAA,eAAAH,EAAAA,IAAAG,EAAA,uBAAe,CAAA,EAAA,2BAAAH,EAAAA,IAAAG,EAAA,uBAA2B,CAAA,EAAA,OAAAH,EAAAA,IAAAG,EAAA,uBAAO,CAAA,EAAA,MAAAH,EAAAA,IAAAG,EAAA,uBAAM,CAAA,EAAA,6BAAAH,EAAAA,IAAAG,EAAA,yBAA+B,CAAA,EAAA,MAAAD,OAAAD,EAAA,KAAA,8GAE3J,SAAA,CAAA,8GAAAD,EAAAA,IAAAG,EAAA,uBAA8G,CAAA,EAAA,0BAAAH,EAAAA,IAAAG,EAAA,uBAA0B,CAAA,EAAA,OAAAH,EAAAA,IAAAG,EAAA,uBAAO,CAAA,EAAA,iBAAAH,EAAAA,IAAAG,EAAA,uBAAiB,CAAA,EAAA,mBAAAH,EAAAA,IAAAG,EAAA,yBAAqB,CAAA,EAAA,OAAAH,EAAAA,IAAAG,EAAA,uBAAO,CAAA,EAAA,iBAAAD,OAAAD,EAAA,KAAA,+5HCZxL4C,GAAS,OAAA,OAAA,CAAA,mBAAAC,GAAA,oBAAAC,GAAA,oBAAAC,GAAA,mBAAAC,GAAA,mBAAAC,GAAA,mBAAAC,GAAA,mBAAAC,GAAA,mBAAAC,GAAA,mBAAAC,GAAA,mBAAAC,GAAA,mBAAAC,EAAA,CAAA,EAMf,SAAwB3C,GAAW,CAAE,UAAAC,EAAW,MAAAC,GAAS,CACvD,MAAMO,EAAS,CACb,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,SAAA,EAGF,OACEZ,EAAAA,KAAAa,WAAA,CACE,SAAA,CAAAb,EAAAA,KAACc,EAAA,CAAO,MAAO,GACZ,SAAA,CAAAC,EAAMV,EAAM,CAAC,EAAE,IAAKW,GACnBd,EAAAA,IAACD,EAAA,CAAkB,MAAOW,EAAOP,EAAM,KAAKW,CAAC,CAAC,EAAG,MAAO,EAAG,OAAQ,EAAG,EAAGA,EAAI,EAAG,EAAG,CAAA,EAAnEA,CAAsE,CACvF,EACDd,EAAAA,IAACe,EAAA,CAAO,IAAKC,GAAO,IAAI,QAAQ,EAAG,EAAIb,EAAM,IAAK,EAAG,GAAA,CAAK,EAC1DH,EAAAA,IAACe,EAAA,CACC,IAAKkB,GAAO,cAAc,KAAK,IAAI9B,EAAM,EAAI,EAAGA,EAAM,CAAC,CAAC,MAAM,EAC9D,IAAI,UACJ,EAAG,EACH,EAAG,CAAA,CAAA,CACL,EACF,EACAH,MAACiB,GAAU,UAAW,CAAE,OAAQd,EAAM,EAAG,GAAGD,EAAU,CAAG,CAAA,EAC3D,CAEJ,uTC1CA,SAAA,CAAA,qBAAAd,EAAAA,IAAAG,EAAA,uBAAqB,CAAA,EAAA;AAAA,KAAAH,EAAAA,IAAAG,EAAA,uBACf,CAAA,EAAA;AAAA,+EAAA,gBAGN,SAAA,CAAA;AAAA,iEAAAD,OAAAD,EAAA,KAAA,iGACkE,CAAA,EAAA;AAAA,gCAAAD,EAAAA,IAAAG,EAAA,yBAC/B,CAAA,EAAA,YAAA,eAEnC,SAAA;AAAA;AAAA,8EAIA,SAAA;AAAA;AAAA,4FAIA,SAAA;wHAEyB,CAAA,EAAA,qBAAAH,EAAAA,IAAAG,EAAA,yBAAuB,CAAA,EAAA,6CAAAH,EAAAA,IAAAG,EAAA,uBAA6C,CAAA,EAAA,iBAAA;2HACjE,CAAA,EAAA,4BAAAH,EAAAA,IAAAG,EAAA,uBAA4B,CAAA,EAAA,gCAAAH,EAAAA,IAAAG,EAAA,yBAAkC,CAAA,EAAA;AAAA,mCAAAD,OAAAD,EAAA,KAAA,iGACpD,CAAA,EAAA,gFAAAD,EAAAA,IAAAG,EAAA,yBAAwF,CAAA,EAAA;AAAA,kCAAAD,OAAAD,EAAA,KAAA;uHAEtG,CAAA,EAAA,gDAAA;gBAExB,SAAA,oGAGgB6B,aAAAA,GACCC,cAAAA,GACJC,UAAAA,UACFC,UAAW,GAAOC,MAAO,GAAOC,aAAc,IAC3CtB,WAAAA,oCAGZ,SAAA,uJAIA,SAAA,CAAA;AAAA;AAAA,EAAAb,MAAAC,EAAA,OAAA,CAEE,SAAA,KAAK,CAAA,EAAA,8FAAAD,MAAAC,EAAA,OAAA,CAA6F,SAAA,KAAK,CAAA,EAAA,OAAAD,EAAAA,IAAAG,EAAA,uBAAO,CAAA,EAAA,MAAAH,MAAAC,EAAA,GAAA,CAAI,SAAA,sDAAqD,CAAA,EAAA;AAAA,8DAAAD,MAAAC,EAAA,OAAA,CAC3G,SAAA,KAAK,CAAA,EAAA,iCAAAD,MAAAC,EAAA,OAAA,CAAgC,SAAA,KAAK,CAAA,EAAA;AAAA,+BAAAC,OAAAD,EAAA,KAAA,8FACtE,CAAA,EAAA;AAAA;AAAA,wHAAA"}