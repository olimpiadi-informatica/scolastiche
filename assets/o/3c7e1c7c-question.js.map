{"version":3,"file":"3c7e1c7c-question.js","sources":["../../../src/fibonacci-primarie/2023-seconda-fase/contest/p-1-cicli-condizioni/question.md","../../../src/fibonacci-primarie/2023-seconda-fase/contest/p-2-balle-di-fieno/question.md","../../../src/fibonacci-primarie/2023-seconda-fase/contest/p-3-pile-di-carote/question.md","../../../src/fibonacci-primarie/2023-seconda-fase/contest/p-4-contatore/question.md","../../../src/fibonacci-primarie/2023-seconda-fase/contest/s-1-ordina-palloni/visualizer.jsx","../../../src/fibonacci-primarie/2023-seconda-fase/contest/s-1-ordina-palloni/question.mdx","../../../src/fibonacci-primarie/2023-seconda-fase/contest/s-2-gara-salto/visualizer.jsx","../../../src/fibonacci-primarie/2023-seconda-fase/contest/s-2-gara-salto/question.mdx","../../../src/fibonacci-primarie/2023-seconda-fase/contest/s-3-squadre-basket/visualizer.jsx","../../../src/fibonacci-primarie/2023-seconda-fase/contest/s-3-squadre-basket/question.mdx","../../../src/fibonacci-primarie/2023-seconda-fase/contest/s-4-torri-gemelle/visualizer.jsx","../../../src/fibonacci-primarie/2023-seconda-fase/contest/s-4-torri-gemelle/question.mdx"],"sourcesContent":["Tip-Tap ha proprio voglia di una bella scorpacciata di carote!\nPer farla, può usare le seguenti azioni:\n\n- `avanza`: salta alla roccia più vicina a destra.\n- `mangia carota`: mangia una carota, ma se dov'è arrivato non ci sono carote si **mangia la lingua**!\n- `roccia marrone`: condizione vera se Tip-Tap si trova su una roccia di colore marrone.\n\nQuali di questi procedimenti consentono a Tip-Tap di mangiare tutte le carote, senza\nmangiarsi la lingua?\n\n![T_ | _ _ | _C](fig.asy)\n\n![code](code.asy)\n\n- [ ] $1$, $3$ e $5$\n- [ ] $2$ e $4$\n- [x] $3$ e $5$\n- [ ] solo $5$\n- [ ] tutti tranne l'$1$\n\n> Tip-Tap riesce a mangiare tutte le carote sia seguendo l'opzione 3 che l'opzione 5.\n>\n> _Nell'opzione 3, inizia mangiando la prima carota, poi le carote sulle rocce marroni tra le 4 successive, poi un'altra carota\n> (quella sulla roccia grigia centrale), e ancora le carote sulle rocce marroni tra le 4 successive._\n>\n> _Nell'opzione 5, inizia mangiando le carote sulle rocce marroni tra le prime 4, poi un'altra carota\n> (quella sulla roccia grigia centrale), e ancora le carote sulle rocce marroni tra le 4 successive._\n>\n> In tutte le altre tre opzioni, Tip-Tap non riesce a fare quanto richiesto.\n>\n> _Nell'opzione 1, Tip-Tap tenta di mangiare carote anche dove non ce ne sono, mordendosi la lingua._\n>\n> _Nell'opzione 2, Tip-Tap mangia tutte le carote sulle rocce marroni, ma non mangia la carota sulla roccia grigia centrale._\n>\n> _Nell'opzione 4, Tip-Tap mangia la prima carota, poi una carota ogni due rocce, e infine mangia anche l'ultima carota.\n> Anche in questo caso non mangia la carota sulla roccia grigia centrale._\n>\n> ![primarie](primarie.asy)\n","Bunny è all’ingresso del fienile della fattoria Fibonacci, e davanti a lui ci sono $9$ pile di balle di fieno numerate con i numeri da $1$ a $9$. Ogni pila è formata da un numero variabile di balle di fieno. Bunny vuole giocare spostandosi da una pila all'altra, partendo dalla pila $1$ e seguendo questo procedimento:\n\n![code](code.asy)\n\nIn quali di queste situazioni Bunny riesce ad uscire dal fienile?\n\n![opzione1](opzioni.asy)\n\nRisposte:\n\n- [ ] nessuna\n- [ ] tutte\n- [ ] solo la 1\n- [x] la 1 e la 2\n- [ ] la 1 e la 3\n\n> Bunny riesce ad uscire dal fienile nell'opzione 1 e nella 2.\n>\n> _Nell'opzione 1, inizia dalla pila 1, poi salta di due in due fino alla pila 9._\n>\n> _Nell'opzione 2, inizia dalla pila 1, salta sulla 3, indietreggia sulla due, salta sulla 4, salta sulla 6, indietreggia sulla 5, salta sulla 7 e finisce sulla 9._\n>\n> _Nell'opzione 3, Bunny non riesce ad uscire perchè rimane bloccato saltando in circolo tra le pile 3, 4, 5 senza mai smettere._\n>\n> ![primarie](primarie.asy) ![secondarie](secondarie.asy)\n","I conigli della fattoria Fibonacci hanno preparato due enormi mucchi di carote.\nAll'inizio il mucchio sinistro contiene 2024 carote, mentre il mucchio destro ne contiene 3024.\nBunny, Tip-Tap e Carol le mangiano seguendo questo procedimento:\n\n![code](code.asy)\n\nQuante carote mangia Carol?\n\n- [ ] 0\n- [ ] 1\n- [ ] 2\n- [ ] 4\n- [x] 8\n\n> Si può notare che ad ogni passaggio della ripetizione, indipendentemente da quale mucchio\n> abbia più carote, Tip-Tap e Bunny in totale mangiano $10$ carote.\n> Visto che all'inizio ci sono $2024 + 3024 = 5048$ carote, i due conigli andranno avanti\n> a mangiare $10$ carote per volta fino a quando rimarranno $8$ carote tra i due mucchi.\n> A quel punto tutte le carote rimaste le mangerà Carol!\n>\n> **Approfondimento:** visto che la condizione che termina la ripetizione chiede solo che\n> una delle due pile contenga meno di $7$ carote, si potrebbe pensare che alla fine potrebbero\n> rimanere più carote per Carol, come $18$, $28$, $38$, eccetera. Questo però non è possibile!\n>\n> Infatti, si può notare che ogni volta Tip-Tap e Bunny mangiano più carote dalla pila più grande\n> e meno dalla pila più piccola. Questo porta a ridurre la differenza tra le due pile, finché\n> la differenza non è **al massimo 3**. Da quel punto in poi la differenza tra le due pila rimarrà\n> sempre al massimo 3, e quindi quando una pila arriva ad avere meno di $7$ carote (quindi al massimo\n> $6$), l'altra pila non può avere più di $6 + 3 = 9$ carote, per un totale di al massimo $9 + 6 = 15$\n> carote, che è meno di $18$.\n>\n> ![primarie](primarie.asy) ![secondarie](secondarie.asy)\n","Tip-Tap sistemando la sua soffitta si è imbattuto in un libro di programmazione molto vecchio. Nella prima pagina trova il seguente procedimento:\n\n![code](code.asy)\n\nPurtroppo la successiva pagina è rovinata perciò Tip-Tap non riesce a capire che numero verrà stampato alla fine, aiutalo tu! Quale numero viene stampato dall'ultimo blocco?\n\n- [ ] 0\n- [x] 2\n- [ ] 4\n- [ ] 6\n- [ ] 10\n\n> Il programma incrementa il contatore per ogni multiplo di $7$ fino a $42$,\n> e lo decrementa per ogni multiplo di $9$ fino a $42$.\n> Siccome i multipli di $7$ fino a $42$ sono $6$ e i multipli di $9$ fino a $42$ sono $4$,\n> il contatore alla fine varrà $6 - 4 = 2$.\n>\n> ![secondarie](secondarie.asy)\n","\"use client\";\n\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=66\";\nimport shelf from \"./asy/shelf.asy?h=170\";\nimport trash from \"./asy/trash.asy?w=120\";\n\nconst balls = import.meta.glob(\"./asy/ball*.asy\", {\n  eager: true,\n  import: \"default\",\n  query: { w: 40 },\n});\n\nexport default function Visualizer({ variables, state }) {\n  function position(i) {\n    const batch = state.N > 20 ? 9 : 4;\n    const step = state.N > 20 ? 0.2 : 0.4;\n    let p = [0, 3];\n    if (i >= state.pos) {\n      p = [0.35 * (i - state.pos) + 2.4, 1.4];\n    } else if (state.placement[i] > 0) {\n      const col = (state.placement[i] - 1) % batch;\n      const row = (state.placement[i] - 1 - col) / batch;\n      p = [col * step + 0.08, 1.27 - row * 0.4];\n    } else {\n      const row = -state.placement[i] - 1;\n      const col = ((7 * row) % 11) - 5;\n      p = [1.6 + col * (0.04 + row * 0.001), 2.7 - row * 0.06];\n    }\n    if (state.balls[i] % 2) p[1] -= 0.14;\n    return p;\n  }\n\n  return (\n    <>\n      <Canvas scale={130}>\n        <Sprite src={shelf} alt=\"Scaffale\" x={0} y={0.2} />\n        {range(state.N).map((i) => (\n          <Sprite\n            key={i}\n            src={balls[`./asy/ball${state.balls[i]}.asy`]}\n            alt=\"Pallone\"\n            x={position(i)[0]}\n            y={position(i)[1]}\n          />\n        ))}\n        <Sprite src={bunny} alt=\"Tip-Tap\" x={1.9} y={0.7} follow />\n        <Sprite src={trash} alt=\"Cestino\" x={1.3} y={1.8} />\n      </Canvas>\n      <Variables variables={variables} />\n    </>\n  );\n}\n","import initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s1.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nTip-Tap deve sistemare la sua vecchia collezione di $N$ palloni.\nNon avendo spazio per tutti, ha deciso che terrà **tutti i palloni da calcio** e i **palloni da basket gonfi**,\nmentre butterà i **palloni da basket sgonfi**.\n\nPer farlo, Tip-Tap può compiere le seguenti azioni:\n\n- `tieni`: metti via il prossimo pallone nello scaffale.\n- `butta`: butta via il prossimo pallone nel cestino.\n- `pallone da calcio`: condizione vera se il prossimo pallone è da calcio.\n- `pallone gonfio`: condizione vera se il prossimo pallone è gonfio.\n- `termina`: finisci di mettere a posto i palloni.\n\nScrivi un programma che consenta a Tip-Tap di sistemare tutti i suoi palloni!\n\n<Blockly\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Secondo questo programma, per ognuno degli $N$ palloni che Tip-Tap deve sistemare, il protagonista\n> controlla se il prossimo pallone è da calcio o gonfio. Se sì lo tiene, altrimenti lo butta.\n>\n> ![primarie](asy/primarie.asy)\n","\"use client\";\n\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=40\";\nimport carrot from \"./asy/carrot.asy?w=25\";\nimport hay from \"./asy/hay.asy?w=60\";\n\nexport default function Visualizer({ variables, state }) {\n  return (\n    <>\n      <Canvas gravity=\"bottom\" scale={10}>\n        {range(state.N).flatMap((i) => {\n          return range(state.H[i]).map((h) => (\n            <Sprite key={`hay-${i}-${h}`} src={hay} alt=\"Fieno\" x={1.5 + i * 6} y={h * 2.8} />\n          ));\n        })}\n        <Rectangle borderColor=\"transparent\" x={-3} y={-1} width={1} height={1} />\n        <Sprite src={bunny} alt=\"Carol\" x={3 + state.pos * 6} y={-1} follow />\n        <Sprite src={carrot} alt=\"Carota\" x={5 + state.pos * 6} y={-0.1} />\n        {range(state.carrots.length + 2).map((i) => {\n          let x = 5 + state.pos * 6;\n          let y = -0.1;\n          if (i < state.carrots.length) {\n            const col = state.carrots[i] - 1;\n            x = 3.5 + col * 6 + (i % 3) * 0.5;\n            y = -0.3 + state.H[col] * 2.8;\n          }\n          return <Sprite key={i} src={carrot} alt=\"Carota\" x={x} y={y} />;\n        })}\n      </Canvas>\n      <Variables variables={{ ...variables, pile: state.N }} />\n    </>\n  );\n}\n","import initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s2.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nCarol sta organizzando una gara di salto nel fienile della fattoria Fibonacci!\n\nIl fienile ha $N$ **pile** di balle di fieno, l'$i$-esima delle quali composta da $H_i$ balle di fieno.\nLa gara partirà dall'ingresso del fienile a sinistra, prima di tutte le pile. Da lì i conigli dovranno\nsaltare sulla prima pila $i = 1$, e poi via via sulle successive, fino ad arrivare all'ultima pila e\nsaltare fuori dal fienile a destra.\n\nI conigli non fanno fatica a saltare in piano o in basso, ma saltare verso l'alto non è facile!\nQuindi, Carol vuole mettere una carota come premio su **ogni** pila di balle di fieno che richiede\nun salto **maggiore** di tutti i salti fatti prima per arrivare fino a lì. Inoltre, vuole mettere\nuna seconda carota sul salto più alto di tutti del percorso. Carol può fare queste cose:\n\n- `altezza della pila i`: guarda quante balle di fieno $H_i$ ci sono nella pila $i$-esima.\n- `aggiungi carota alla pila i`: aggiungi una carota in cima all'$i$-esima pila.\n- `termina`: smetti di aggiungere carote e fai partire la gara.\n\nAiuta Carol a preparare il fienile per la gara di salto!\n\n<Blockly\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Questo programma, mette subito una carota sulla prima pila, che richiede il primo salto: il primo\n> salto è sempre maggiore degli _zero_ salti fatti prima! Il programma poi ricorda che il massimo\n> salto finora (_maxsalto_) è alto come la prima pila, ed è stato fatto nella pila $1$ (_dovesalto_).\n>\n> A questo punto, il programma itera su tutte le altre pile, dalla seconda alla fine.\n> Per ciascuna di queste, calcola quanto è grande il _salto_ che serve per arrivare all'$i$-esima pila.\n> Se questo salto è maggiore del massimo salto finora, allora va ad aggiungere una carota e lo\n> memorizza in _maxsalto_ e _dovesalto_.\n>\n> Una volta terminato di scorrere tutte le pile, Carol torna all'ultima pila a cui ha aggiunto una\n> carota (_dovesalto_) e ci aggiunge la seconda carota.\n>\n> ![primarie](asy/primarie.asy) ![secondarie](asy/secondarie.asy)\n","\"use client\";\n\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport ball from \"./asy/ball.asy?w=35\";\nimport bunny from \"./asy/bunny.asy?w=66\";\nimport fibonacci from \"./asy/fibonacci.asy?h=100\";\nimport turing from \"./asy/turing.asy?h=100\";\n\nexport default function Visualizer({ variables, state }) {\n  const teams = [fibonacci, turing];\n\n  const offset = Math.max(...state.data.map((d) => d.presi.length)) * 5;\n\n  return (\n    <>\n      <Canvas gravity=\"bottom\" scale={10}>\n        <Sprite src={bunny} alt=\"Bunny\" x={0 + offset} y={19.5} follow />\n        <Sprite src={ball} alt=\"Pallone\" x={3.5 + offset} y={20.5} />\n        {range(2).flatMap((i) => {\n          const { H, scelta } = state.data[i];\n          let offsetPreso = 0;\n          let offsetScarto = 0;\n          return range(H.length).map((k) => {\n            let x;\n            let y = [30, 7][i];\n\n            if (k >= scelta.length) {\n              x = (k - scelta.length) * 5 + offset + 10;\n            } else if (scelta[k] > 0) {\n              x = offsetPreso;\n              offsetPreso += 5;\n            } else {\n              x = offsetScarto + offset + 10;\n              offsetScarto += 5;\n              y += [12, -10][i];\n            }\n\n            return (\n              <Sprite\n                key={`${i}-${k}`}\n                src={teams[i]}\n                alt=\"Giocatore\"\n                x={x}\n                y={y}\n                scaleY={H[k] / 28}\n                className=\"origin-bottom\"\n              />\n            );\n          });\n        })}\n      </Canvas>\n      <Variables\n        variables={{\n          ...variables,\n          Fibonacci: state.data[0].H.length - state.data[0].pos,\n          Turing: state.data[1].H.length - state.data[1].pos,\n        }}\n      />\n    </>\n  );\n}\n","import initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s3.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nBunny deve selezionare due squadre di basket da **più giocatori possibile** per la sfida tra la fattoria Fibonacci e la fattoria Turing!\nPer fare una partita bilanciata, vuole che le due squadre siano composte da uno stesso numero di giocatori della stessa altezza, come in questo caso:\n\n![esempio](asy/fig.asy)\n\nBunny ha quindi messo in fila, in ordine crescente di altezza, i conigli di entrambe le fattorie.\nOra può fare queste operazioni:\n\n- `fine della fila Fibonacci`: condizione vera se la fila della fattoria Fibonacci è terminata.\n- `fine della fila Turing`: condizione vera se la fila della fattoria Turing è terminata.\n- `altezza primo della fila Fibonacci`: l'altezza del primo coniglio nella fila della fattoria Fibonacci.\n- `altezza primo della fila Turing`: l'altezza del primo coniglio nella fila della fattoria Turing.\n- `prendi dalla fila Fibonacci`: prendi il prossimo coniglio dalla fila della fattoria Fibonacci.\n- `prendi dalla fila Turing`: prendi il prossimo coniglio dalla fila della fattoria Turing.\n- `scarta dalla fila Fibonacci`: scarta il prossimo coniglio dalla fila della fattoria Fibonacci.\n- `scarta dalla fila Turing`: scarta il prossimo coniglio dalla fila della fattoria Turing.\n- `termina`: completa le squadre e inizia la partita a basket.\n\nAiuta Bunny a fare le squadre per la partita!\n\n<Blockly\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Questo programma procede a selezionare i conigli fino a che una delle due file non si svuota.\n> Se i due primi della fila hanno la stessa altezza, è possibile prenderli entrambi per\n> ingrandire la squadra. Se non hanno la stessa altezza Bunny scarta il più basso dei due,\n> visto che non ha più speranze di trovare un avversario della stessa altezza nell'altra fila.\n>\n> ![primarie](asy/primarie.asy) ![secondarie](asy/secondarie.asy)\n","\"use client\";\n\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny_left from \"./asy/bunny_left.asy?w=66\";\nimport bunny_right from \"./asy/bunny_right.asy?w=66\";\nimport stairs1 from \"./asy/stairs1.asy?w=80\";\nimport stairs2 from \"./asy/stairs2.asy?w=80\";\nimport stairs3 from \"./asy/stairs3.asy?w=80\";\n\nexport default function Visualizer({ variables, state }) {\n  const stairs = [stairs1, stairs2, stairs3][state.M <= 6 ? 0 : state.M <= 14 ? 1 : 2];\n  const bunnies = [bunny_left, bunny_right];\n  const hf = 2;\n  const wf = 3;\n\n  const colors = [\n    \"#4093b0\",\n    \"#bf4eb4\",\n    \"#44c966\",\n    \"#4473c9\",\n    \"#c2a948\",\n    \"#7468c5\",\n    \"#9c5ebd\",\n    \"#7cc258\",\n    \"#a3b651\",\n    \"#40af91\",\n    \"#4473c9\",\n    \"#c2a948\",\n    \"#7468c5\",\n    \"#9c5ebd\",\n    \"#7cc258\",\n    \"#a3b651\",\n  ];\n\n  let bsplit = 0;\n  for (let i = 0; i < state.pos[1]; ++i) {\n    if (state.blocchi[i][0] === 1) bsplit += 1;\n  }\n\n  let bx = 3 - bsplit * (wf + 1);\n  return (\n    <>\n      <Canvas gravity=\"bottom\" scale={10}>\n        <Rectangle color=\"#eeeeee\" height={state.S * hf} width={wf + 1} x={7} y={0} />\n        <Rectangle color=\"#eeeeee\" height={state.D * hf} width={wf + 1} x={23} y={0} />\n        <Sprite src={stairs} alt=\"Scale\" x={13.1} y={0} />\n        <Rectangle\n          color=\"#954520\"\n          height={1}\n          width={(wf + 1) * state.M * 2 + wf + 17}\n          x={7 - (wf + 1) * state.M}\n          y={state.pos[3] * hf}\n        />\n        <Sprite src={bunnies[state.orient]} alt=\"Bunny\" x={14} y={state.pos[3] * hf} follow />\n        {range(state.M).map((i) => {\n          let x = state.blocchi[i][0] * 8 + 7.5;\n          let y = state.blocchi[i][1] * hf;\n          if (state.blocchi[i][0] === 1) {\n            if (i >= state.pos[1] && bx < 23) bx = 23.5;\n            bx += wf + 1;\n            x = bx;\n            y = state.pos[3] * hf + 0.5;\n          }\n          return (\n            <Rectangle\n              key={i}\n              color={colors[i % colors.length]}\n              height={(i + 1) * hf}\n              width={wf}\n              x={x}\n              y={y}\n              className=\"pl-0.5 leading-4\">\n              {i + 1}\n            </Rectangle>\n          );\n        })}\n      </Canvas>\n      <Variables\n        variables={{\n          sinistra: `${state.pos[0]}/${state.S}`,\n          destra: `${state.pos[2]}/${state.D}`,\n          blocchetti: `${state.rimasti}/${state.M}`,\n          ...variables,\n        }}\n      />\n    </>\n  );\n}\n","import initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s4.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nTip-Tap vuole costruire una nuova tettoia per la sua fattoria!\nCome prima cosa, ha bisogno di costruire le due colonne portanti:\nuna a sinistra alta $S$ centimetri, e una a destra alta $D$ centimetri.\n\nPer farlo intende impilare alcuni blocchetti presi da un set da costruzioni,\ncomposto da un singolo blocchetto per ogni altezza possibile tra un minimo\ndi 1 centimetro e un massimo di $M$ centimetri, e che in tutto arrivano\nesattamente all'altezza totale delle due colonne. Ora può fare queste operazioni:\n\n- `altezza colonna destra`: l'altezza corrente della colonna di destra.\n- `altezza colonna sinistra`: l'altezza corrente della colonna di sinistra.\n- `impila blocchetto i a destra`: aggiunge il blocchetto alto $i$ centimetri alla colonna di destra, se non l'ha già usato.\n- `impila blocchetto i a sinistra`: aggiunge il blocchetto alto $i$ centimetri alla colonna di sinistra, se non l'ha già usato.\n- `termina`: completa le colonne e costruisci la tettoia.\n\nAiuta Tip-Tap a completare la tettoia come previsto!\n\n<Blockly\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Questo programma procede a selezionare i blocchetti dal più grande al più piccolo.\n> Per ogni blocchetto, prova prima se può metterlo nella colonna a sinistra.\n> Se non può, prova anche a destra prima di scartarlo definitivamente.\n>\n> **Approfondimento:** Si può dimostrare che questo procedimento riesce sempre a costruire\n> le colonne. Per mostrarlo, consideriamo cosa succede quando vogliamo piazzare il\n> blocchetto alto $M$. La più alta delle due colonne deve essere alta più della metà del\n> totale, ma $M$ è al massimo la metà del totale dei blocchetti da $1$ a $M$, quindi\n> posso sicuramente farlo stare in una delle due colonne. Mettendolo, abbiamo ridotto sia l'altezza\n> totale da costruire che l'altezza totale dei blocchetti di $M$, quindi è ancora vero che\n> l'altezza totale dei blocchetti è uguale all'altezza totale delle colonne da costruire.\n>\n> ![secondarie](asy/secondarie.asy)\n"],"names":["_jsx","_components","Equation","_jsxs","Image","balls","__vite_glob_0_0","__vite_glob_0_1","__vite_glob_0_2","__vite_glob_0_3","Visualizer","variables","state","position","i","batch","step","p","col","row","jsxs","Fragment","Canvas","jsx","Sprite","shelf","range","bunny","trash","Variables","customBlocks","initialBlocks","testcases","h","hay","Rectangle","carrot","x","y","teams","fibonacci","turing","offset","d","ball","H","scelta","offsetPreso","offsetScarto","k","stairs","stairs1","stairs2","stairs3","bunnies","bunny_left","bunny_right","hf","wf","colors","bsplit","bx"],"mappings":"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"}