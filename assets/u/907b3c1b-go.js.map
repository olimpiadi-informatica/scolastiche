{"version":3,"file":"907b3c1b-go.js","sources":["../../../node_modules/shiki/dist/langs/go.mjs"],"sourcesContent":["const lang = Object.freeze({ \"displayName\": \"Go\", \"name\": \"go\", \"patterns\": [{ \"include\": \"#statements\" }], \"repository\": { \"after_control_variables\": { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations-without-brackets\" }, { \"match\": \"\\\\[\", \"name\": \"punctuation.definition.begin.bracket.square.go\" }, { \"match\": \"\\\\]\", \"name\": \"punctuation.definition.end.bracket.square.go\" }, { \"match\": \"(?:\\\\w+)\", \"name\": \"variable.other.go\" }] } }, \"comment\": \"After control variables, to not highlight as a struct/interface (before formatting with gofmt)\", \"match\": \"(?:(?<=\\\\brange\\\\b|\\\\bswitch\\\\b|\\\\;|\\\\bif\\\\b|\\\\bfor\\\\b|<|>|<=|>=|==|!=|\\\\w(?:\\\\+|/|-|\\\\*|\\\\%)|\\\\w(?:\\\\+|/|-|\\\\*|\\\\%)=|\\\\|\\\\||\\\\&\\\\&)(?:\\\\s*)((?![\\\\[\\\\]]+)[0-9A-Za-z\\\\-_!\\\\.\\\\[\\\\]<>=\\\\*/+\\\\%:]+)(?:\\\\s*)(?=\\\\{))\" }, \"brackets\": { \"patterns\": [{ \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.begin.bracket.curly.go\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.end.bracket.curly.go\" } }, \"patterns\": [{ \"include\": \"$self\" }] }, { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.begin.bracket.round.go\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.end.bracket.round.go\" } }, \"patterns\": [{ \"include\": \"$self\" }] }, { \"begin\": \"\\\\[\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.begin.bracket.square.go\" } }, \"end\": \"\\\\]\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.end.bracket.square.go\" } }, \"patterns\": [{ \"include\": \"$self\" }] }] }, \"built_in_functions\": { \"comment\": \"Built-in functions\", \"patterns\": [{ \"match\": \"\\\\b(append|cap|close|complex|copy|delete|imag|len|panic|print|println|real|recover|min|max|clear)\\\\b(?=\\\\()\", \"name\": \"entity.name.function.support.builtin.go\" }, { \"begin\": \"(?:(\\\\bnew\\\\b)(\\\\())\", \"beginCaptures\": { \"1\": { \"name\": \"entity.name.function.support.builtin.go\" }, \"2\": { \"name\": \"punctuation.definition.begin.bracket.round.go\" } }, \"comment\": \"new keyword\", \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.end.bracket.round.go\" } }, \"patterns\": [{ \"include\": \"#functions\" }, { \"include\": \"#struct_variables_types\" }, { \"include\": \"#type-declarations\" }, { \"include\": \"#generic_types\" }, { \"match\": \"(?:\\\\w+)\", \"name\": \"entity.name.type.go\" }, { \"include\": \"$self\" }] }, { \"begin\": \"(?:(\\\\bmake\\\\b)(?:(\\\\()((?:(?:(?:[\\\\*\\\\[\\\\]]+)?(?:<-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*<-)?\\\\s*)+(?:\\\\([^)]+\\\\))?)?(?:[\\\\[\\\\]\\\\*]+)?(?:(?!\\\\bmap\\\\b)(?:[\\\\w\\\\.]+))?(\\\\[(?:(?:[\\\\S]+)(?:(?:\\\\,\\\\s*(?:[\\\\S]+))*))?\\\\])?(?:\\\\,)?)?))\", \"beginCaptures\": { \"1\": { \"name\": \"entity.name.function.support.builtin.go\" }, \"2\": { \"name\": \"punctuation.definition.begin.bracket.round.go\" }, \"3\": { \"patterns\": [{ \"include\": \"#type-declarations-without-brackets\" }, { \"include\": \"#parameter-variable-types\" }, { \"match\": \"\\\\w+\", \"name\": \"entity.name.type.go\" }] } }, \"comment\": \"make keyword\", \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.end.bracket.round.go\" } }, \"patterns\": [{ \"include\": \"$self\" }] }] }, \"comments\": { \"patterns\": [{ \"begin\": \"(\\\\/\\\\*)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.definition.comment.go\" } }, \"end\": \"(\\\\*\\\\/)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.comment.go\" } }, \"name\": \"comment.block.go\" }, { \"begin\": \"(\\\\/\\\\/)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.definition.comment.go\" } }, \"end\": \"(?:\\\\n|$)\", \"name\": \"comment.line.double-slash.go\" }] }, \"delimiters\": { \"patterns\": [{ \"match\": \"\\\\,\", \"name\": \"punctuation.other.comma.go\" }, { \"match\": \"\\\\.(?!\\\\.\\\\.)\", \"name\": \"punctuation.other.period.go\" }, { \"match\": \":(?!=)\", \"name\": \"punctuation.other.colon.go\" }] }, \"double_parentheses_types\": { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations-without-brackets\" }, { \"match\": \"\\\\(\", \"name\": \"punctuation.definition.begin.bracket.round.go\" }, { \"match\": \"\\\\)\", \"name\": \"punctuation.definition.end.bracket.round.go\" }, { \"match\": \"\\\\[\", \"name\": \"punctuation.definition.begin.bracket.square.go\" }, { \"match\": \"\\\\]\", \"name\": \"punctuation.definition.end.bracket.square.go\" }, { \"match\": \"\\\\w+\", \"name\": \"entity.name.type.go\" }] } }, \"comment\": \"double parentheses types\", \"match\": \"(?:(?<!\\\\w)(\\\\((?:[\\\\w\\\\.\\\\[\\\\]\\\\*\\\\&]+)\\\\))(?=\\\\())\" }, \"field_hover\": { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"\\\\w+\", \"name\": \"variable.other.property.go\" }] }, \"2\": { \"patterns\": [{ \"match\": \"\\\\binvalid\\\\b\\\\s+\\\\btype\\\\b\", \"name\": \"invalid.field.go\" }, { \"include\": \"#type-declarations-without-brackets\" }, { \"include\": \"#parameter-variable-types\" }, { \"match\": \"\\\\w+\", \"name\": \"entity.name.type.go\" }] } }, \"comment\": \"struct field property and types when hovering with the mouse\", \"match\": \"(?:(?<=^\\\\bfield\\\\b)\\\\s+([\\\\w\\\\*\\\\.]+)\\\\s+([\\\\s\\\\S]+))\" }, \"function_declaration\": { \"begin\": \"(?:^(\\\\bfunc\\\\b)(?:\\\\s*(\\\\([^)]+\\\\)\\\\s*)?(?:(\\\\w+)(?=\\\\(|\\\\[))?))\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.function.go\" }, \"2\": { \"patterns\": [{ \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.begin.bracket.round.go\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.end.bracket.round.go\" } }, \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"variable.parameter.go\" }, \"2\": { \"patterns\": [{ \"include\": \"#type-declarations-without-brackets\" }, { \"include\": \"#parameter-variable-types\" }, { \"match\": \"(?:\\\\w+)\", \"name\": \"entity.name.type.go\" }] } }, \"match\": \"(?:(\\\\w+(?:\\\\s+))?((?:[\\\\w\\\\.\\\\*]+)(?:\\\\[(?:(?:(?:[\\\\w\\\\.\\\\*]+)(?:\\\\,\\\\s+)?)+)?\\\\])?))\" }, { \"include\": \"$self\" }] }] }, \"3\": { \"patterns\": [{ \"match\": \"\\\\d\\\\w*\", \"name\": \"invalid.illegal.identifier.go\" }, { \"match\": \"\\\\w+\", \"name\": \"entity.name.function.go\" }] } }, \"comment\": \"Function declarations\", \"end\": \"(?:(?<=\\\\))\\\\s*((?:(?:(?:[\\\\*\\\\[\\\\]]+)?(?:<-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*<-)?\\\\s*)+)?(?!(?:[\\\\[\\\\]\\\\*]+)?(?:\\\\bstruct\\\\b|\\\\binterface\\\\b))[\\\\w\\\\.\\\\-\\\\*\\\\[\\\\]]+)?\\\\s*(?=\\\\{))\", \"endCaptures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations-without-brackets\" }, { \"include\": \"#parameter-variable-types\" }, { \"match\": \"(?:\\\\w+)\", \"name\": \"entity.name.type.go\" }] } }, \"patterns\": [{ \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.begin.bracket.round.go\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.end.bracket.round.go\" } }, \"patterns\": [{ \"include\": \"#function_param_types\" }] }, { \"begin\": \"(?:([\\\\w\\\\.\\\\*]+)?(\\\\[))\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"(?:\\\\w+)\", \"name\": \"entity.name.type.go\" }] }, \"2\": { \"name\": \"punctuation.definition.begin.bracket.square.go\" } }, \"end\": \"\\\\]\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.end.bracket.square.go\" } }, \"patterns\": [{ \"include\": \"#generic_param_types\" }] }, { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations-without-brackets\" }, { \"include\": \"#parameter-variable-types\" }, { \"match\": \"\\\\w+\", \"name\": \"entity.name.type.go\" }] } }, \"comment\": \"single function as a type returned type(s) declaration\", \"match\": \"(?:(?<=\\\\))(?:\\\\s*)((?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:<-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*<-)?\\\\s*)+)?[\\\\w\\\\*\\\\.\\\\[\\\\]<>\\\\-]+(?:\\\\s*)(?:\\\\/(?:\\\\/|\\\\*).*)?)$)\" }, { \"include\": \"$self\" }] }, \"function_param_types\": { \"comment\": \"function parameter variables and types\", \"patterns\": [{ \"include\": \"#struct_variables_types\" }, { \"include\": \"#interface_variables_types\" }, { \"include\": \"#type-declarations-without-brackets\" }, { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"\\\\w+\", \"name\": \"variable.parameter.go\" }] } }, \"comment\": \"struct/interface type declaration\", \"match\": \"((?:(?:\\\\b\\\\w+\\\\,\\\\s*)+)?\\\\b\\\\w+)\\\\s+(?=(?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:<-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*<-)?\\\\s*)+)?(?:[\\\\[\\\\]\\\\*]+)?\\\\b(?:struct|interface)\\\\b\\\\s*\\\\{)\" }, { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"\\\\w+\", \"name\": \"variable.parameter.go\" }] } }, \"comment\": \"multiple parameters one type -with multilines\", \"match\": \"(?:(?:(?<=\\\\()|^\\\\s*)((?:(?:\\\\b\\\\w+\\\\,\\\\s*)+)(?:/(?:/|\\\\*).*)?)$)\" }, { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#delimiters\" }, { \"match\": \"\\\\w+\", \"name\": \"variable.parameter.go\" }] }, \"2\": { \"patterns\": [{ \"include\": \"#type-declarations-without-brackets\" }, { \"include\": \"#parameter-variable-types\" }, { \"match\": \"(?:\\\\w+)\", \"name\": \"entity.name.type.go\" }] } }, \"comment\": \"multiple params and types | multiple params one type | one param one type\", \"match\": \"(?:((?:(?:\\\\b\\\\w+\\\\,\\\\s*)+)?\\\\b\\\\w+)(?:\\\\s+)((?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:<-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*<-)?\\\\s*)+)?(?:(?:(?:[\\\\w\\\\[\\\\]\\\\.\\\\*]+)?(?:(?:\\\\bfunc\\\\b\\\\((?:[^)]+)?\\\\))(?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:<-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*<-)?\\\\s*)+)?(?:\\\\s*))+(?:(?:(?:[\\\\w\\\\*\\\\.\\\\[\\\\]]+)|(?:\\\\((?:[^)]+)?\\\\))))?)|(?:(?:[\\\\[\\\\]\\\\*]+)?[\\\\w\\\\*\\\\.]+(?:\\\\[(?:[^\\\\]]+)\\\\])?(?:[\\\\w\\\\.\\\\*]+)?)+)))\" }, { \"include\": \"#parameter-variable-types\" }, { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"(?:\\\\w+)\", \"name\": \"entity.name.type.go\" }] } }, \"comment\": \"other types\", \"match\": \"([\\\\w\\\\.]+)\" }, { \"include\": \"$self\" }] }, \"functions\": { \"begin\": \"(?:(\\\\bfunc\\\\b)(?=\\\\())\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.function.go\" } }, \"comment\": \"Functions\", \"end\": \"(?:(?<=\\\\))(\\\\s*(?:(?:[\\\\*\\\\[\\\\]]+)?(?:<-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*<-)?\\\\s*)+)?((?:(?:\\\\s*(?:(?:[\\\\[\\\\]\\\\*]+)?[\\\\w\\\\.\\\\*]+)?(?:(?:\\\\[(?:(?:[\\\\w\\\\.\\\\*]+)?(?:\\\\[(?:[^\\\\]]+)?\\\\])?(?:\\\\,\\\\s+)?)+\\\\])|(?:\\\\((?:[^)]+)?\\\\)))?(?:[\\\\w\\\\.\\\\*]+)?)(?:\\\\s*)(?=\\\\{))|(?:\\\\s*(?:(?:(?:[\\\\[\\\\]\\\\*]+)?(?!\\\\bfunc\\\\b)(?:[\\\\w\\\\.\\\\*]+)(?:\\\\[(?:(?:[\\\\w\\\\.\\\\*]+)?(?:\\\\[(?:[^\\\\]]+)?\\\\])?(?:\\\\,\\\\s+)?)+\\\\])?(?:[\\\\w\\\\.\\\\*]+)?)|(?:\\\\((?:[^)]+)?\\\\)))))?)\", \"endCaptures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations\" }] }, \"2\": { \"patterns\": [{ \"include\": \"#type-declarations-without-brackets\" }, { \"include\": \"#parameter-variable-types\" }, { \"match\": \"(?:\\\\w+)\", \"name\": \"entity.name.type.go\" }] } }, \"patterns\": [{ \"include\": \"#parameter-variable-types\" }] }, \"functions_inline\": { \"captures\": { \"1\": { \"name\": \"keyword.function.go\" }, \"2\": { \"patterns\": [{ \"include\": \"#type-declarations-without-brackets\" }, { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.begin.bracket.round.go\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.end.bracket.round.go\" } }, \"patterns\": [{ \"include\": \"#function_param_types\" }, { \"include\": \"$self\" }] }, { \"match\": \"\\\\[\", \"name\": \"punctuation.definition.begin.bracket.square.go\" }, { \"match\": \"\\\\]\", \"name\": \"punctuation.definition.end.bracket.square.go\" }, { \"match\": \"\\\\{\", \"name\": \"punctuation.definition.begin.bracket.curly.go\" }, { \"match\": \"\\\\}\", \"name\": \"punctuation.definition.end.bracket.curly.go\" }, { \"match\": \"(?:\\\\w+)\", \"name\": \"entity.name.type.go\" }] } }, \"comment\": \"functions in-line with multi return types\", \"match\": \"(?:(\\\\bfunc\\\\b)((?:\\\\((?:[^/]*?)\\\\))(?:\\\\s+)(?:\\\\((?:[^/]*?)\\\\)))(?:\\\\s+)(?=\\\\{))\" }, \"generic_param_types\": { \"comment\": \"generic parameter variables and types\", \"patterns\": [{ \"include\": \"#struct_variables_types\" }, { \"include\": \"#interface_variables_types\" }, { \"include\": \"#type-declarations-without-brackets\" }, { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"\\\\w+\", \"name\": \"variable.parameter.go\" }] } }, \"comment\": \"struct/interface type declaration\", \"match\": \"((?:(?:\\\\b\\\\w+\\\\,\\\\s*)+)?\\\\b\\\\w+)\\\\s+(?=(?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:<-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*<-)?\\\\s*)+)?(?:[\\\\[\\\\]\\\\*]+)?\\\\b(?:struct|interface)\\\\b\\\\s*\\\\{)\" }, { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"\\\\w+\", \"name\": \"variable.parameter.go\" }] } }, \"comment\": \"multiple parameters one type -with multilines\", \"match\": \"(?:(?:(?<=\\\\()|^\\\\s*)((?:(?:\\\\b\\\\w+\\\\,\\\\s*)+)(?:/(?:/|\\\\*).*)?)$)\" }, { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#delimiters\" }, { \"match\": \"\\\\w+\", \"name\": \"variable.parameter.go\" }] }, \"2\": { \"patterns\": [{ \"include\": \"#type-declarations-without-brackets\" }, { \"include\": \"#parameter-variable-types\" }, { \"match\": \"(?:\\\\w+)\", \"name\": \"entity.name.type.go\" }] }, \"3\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"(?:\\\\w+)\", \"name\": \"entity.name.type.go\" }] } }, \"comment\": \"multiple params and types | multiple types one param\", \"match\": \"(?:((?:(?:\\\\b\\\\w+\\\\,\\\\s*)+)?\\\\b\\\\w+)(?:\\\\s+)((?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:<-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*<-)?\\\\s*)+)?(?:(?:(?:[\\\\w\\\\[\\\\]\\\\.\\\\*]+)?(?:(?:\\\\bfunc\\\\b\\\\((?:[^)]+)?\\\\))(?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:<-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*<-)?\\\\s*)+)?(?:\\\\s*))+(?:(?:(?:[\\\\w\\\\*\\\\.]+)|(?:\\\\((?:[^)]+)?\\\\))))?)|(?:(?:(?:[\\\\w\\\\*\\\\.\\\\~]+)|(?:\\\\[(?:(?:[\\\\w\\\\.\\\\*]+)?(?:\\\\[(?:[^\\\\]]+)?\\\\])?(?:\\\\,\\\\s+)?)+\\\\]))(?:[\\\\w\\\\.\\\\*]+)?)+)))\" }, { \"include\": \"#parameter-variable-types\" }, { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"(?:\\\\w+)\", \"name\": \"entity.name.type.go\" }] } }, \"comment\": \"other types\", \"match\": \"(?:\\\\b([\\\\w\\\\.]+))\" }, { \"include\": \"$self\" }] }, \"generic_types\": { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"\\\\w+\", \"name\": \"entity.name.type.go\" }] }, \"2\": { \"patterns\": [{ \"include\": \"#parameter-variable-types\" }] } }, \"comment\": \"Generic support for all types\", \"match\": \"(?:([\\\\w\\\\.\\\\*]+)(\\\\[(?:[^\\\\]]+)?\\\\]))\" }, \"group-functions\": { \"comment\": \"all statements related to functions\", \"patterns\": [{ \"include\": \"#function_declaration\" }, { \"include\": \"#functions_inline\" }, { \"include\": \"#functions\" }, { \"include\": \"#built_in_functions\" }, { \"include\": \"#support_functions\" }] }, \"group-types\": { \"comment\": \"all statements related to types\", \"patterns\": [{ \"include\": \"#other_struct_interface_expressions\" }, { \"include\": \"#type_assertion_inline\" }, { \"include\": \"#struct_variables_types\" }, { \"include\": \"#interface_variables_types\" }, { \"include\": \"#single_type\" }, { \"include\": \"#multi_types\" }, { \"include\": \"#struct_interface_declaration\" }, { \"include\": \"#double_parentheses_types\" }, { \"include\": \"#switch_types\" }, { \"include\": \"#type-declarations\" }] }, \"group-variables\": { \"comment\": \"all statements related to variables\", \"patterns\": [{ \"include\": \"#var_const_assignment\" }, { \"include\": \"#variable_assignment\" }, { \"include\": \"#label_loop_variables\" }, { \"include\": \"#slice_index_variables\" }, { \"include\": \"#property_variables\" }, { \"include\": \"#switch_select_case_variables\" }, { \"include\": \"#other_variables\" }] }, \"import\": { \"comment\": \"import\", \"patterns\": [{ \"begin\": \"\\\\b(import)\\\\s+\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.import.go\" } }, \"comment\": \"import\", \"end\": \"(?!\\\\G)\", \"patterns\": [{ \"include\": \"#imports\" }] }] }, \"imports\": { \"comment\": \"import package(s)\", \"patterns\": [{ \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#delimiters\" }, { \"match\": \"(?:\\\\w+)\", \"name\": \"variable.other.import.go\" }] }, \"2\": { \"name\": \"string.quoted.double.go\" }, \"3\": { \"name\": \"punctuation.definition.string.begin.go\" }, \"4\": { \"name\": \"entity.name.import.go\" }, \"5\": { \"name\": \"punctuation.definition.string.end.go\" } }, \"match\": '(\\\\s*[\\\\w\\\\.]+)?\\\\s*((\")([^\"]*)(\"))' }, { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.imports.begin.bracket.round.go\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.imports.end.bracket.round.go\" } }, \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#imports\" }] }, { \"include\": \"$self\" }] }, \"interface_variables_types\": { \"begin\": \"(\\\\binterface\\\\b)\\\\s*(\\\\{)\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.interface.go\" }, \"2\": { \"name\": \"punctuation.definition.begin.bracket.curly.go\" } }, \"comment\": \"interface variable types\", \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.end.bracket.curly.go\" } }, \"patterns\": [{ \"include\": \"#interface_variables_types_field\" }, { \"include\": \"$self\" }] }, \"interface_variables_types_field\": { \"comment\": \"interface variable type fields\", \"patterns\": [{ \"include\": \"#support_functions\" }, { \"include\": \"#type-declarations-without-brackets\" }, { \"begin\": \"(?:([\\\\w\\\\.\\\\*]+)?(\\\\[))\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"(?:\\\\w+)\", \"name\": \"entity.name.type.go\" }] }, \"2\": { \"name\": \"punctuation.definition.begin.bracket.square.go\" } }, \"end\": \"\\\\]\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.end.bracket.square.go\" } }, \"patterns\": [{ \"include\": \"#generic_param_types\" }] }, { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.begin.bracket.round.go\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.end.bracket.round.go\" } }, \"patterns\": [{ \"include\": \"#function_param_types\" }] }, { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"\\\\w+\", \"name\": \"entity.name.type.go\" }] } }, \"comment\": \"other types\", \"match\": \"([\\\\w\\\\.]+)\" }] }, \"keywords\": { \"patterns\": [{ \"comment\": \"Flow control keywords\", \"match\": \"\\\\b(break|case|continue|default|defer|else|fallthrough|for|go|goto|if|range|return|select|switch)\\\\b\", \"name\": \"keyword.control.go\" }, { \"match\": \"\\\\bchan\\\\b\", \"name\": \"keyword.channel.go\" }, { \"match\": \"\\\\bconst\\\\b\", \"name\": \"keyword.const.go\" }, { \"match\": \"\\\\bvar\\\\b\", \"name\": \"keyword.var.go\" }, { \"match\": \"\\\\bfunc\\\\b\", \"name\": \"keyword.function.go\" }, { \"match\": \"\\\\binterface\\\\b\", \"name\": \"keyword.interface.go\" }, { \"match\": \"\\\\bmap\\\\b\", \"name\": \"keyword.map.go\" }, { \"match\": \"\\\\bstruct\\\\b\", \"name\": \"keyword.struct.go\" }, { \"match\": \"\\\\bimport\\\\b\", \"name\": \"keyword.control.import.go\" }, { \"match\": \"\\\\btype\\\\b\", \"name\": \"keyword.type.go\" }] }, \"label_loop_variables\": { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"\\\\w+\", \"name\": \"variable.other.label.go\" }] } }, \"comment\": \"labeled loop variable name\", \"match\": \"((?:^\\\\s*\\\\w+:\\\\s*$)|(?:^\\\\s*(?:\\\\bbreak\\\\b|\\\\bgoto\\\\b|\\\\bcontinue\\\\b)\\\\s+\\\\w+(?:\\\\s*/(?:/|\\\\*)\\\\s*.*)?$))\" }, \"language_constants\": { \"captures\": { \"1\": { \"name\": \"constant.language.boolean.go\" }, \"2\": { \"name\": \"constant.language.null.go\" }, \"3\": { \"name\": \"constant.language.iota.go\" } }, \"comment\": \"Language constants\", \"match\": \"\\\\b(?:(true|false)|(nil)|(iota))\\\\b\" }, \"map_types\": { \"begin\": \"(?:(\\\\bmap\\\\b)(\\\\[))\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.map.go\" }, \"2\": { \"name\": \"punctuation.definition.begin.bracket.square.go\" } }, \"comment\": \"map types\", \"end\": \"(?:(\\\\])((?:(?:(?:[\\\\*\\\\[\\\\]]+)?(?:<-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*<-)?\\\\s*)+)?(?!(?:[\\\\[\\\\]\\\\*]+)?\\\\b(?:func|struct|map)\\\\b)(?:[\\\\*\\\\[\\\\]]+)?(?:[\\\\w\\\\.]+)(?:\\\\[(?:(?:[\\\\w\\\\.\\\\*\\\\[\\\\]{}]+)(?:(?:\\\\,\\\\s*(?:[\\\\w\\\\.\\\\*\\\\[\\\\]{}]+))*))?\\\\])?)?)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.end.bracket.square.go\" }, \"2\": { \"patterns\": [{ \"include\": \"#type-declarations-without-brackets\" }, { \"match\": \"\\\\[\", \"name\": \"punctuation.definition.begin.bracket.square.go\" }, { \"match\": \"\\\\]\", \"name\": \"punctuation.definition.end.bracket.square.go\" }, { \"match\": \"\\\\w+\", \"name\": \"entity.name.type.go\" }] } }, \"patterns\": [{ \"include\": \"#type-declarations-without-brackets\" }, { \"include\": \"#parameter-variable-types\" }, { \"include\": \"#functions\" }, { \"match\": \"\\\\[\", \"name\": \"punctuation.definition.begin.bracket.square.go\" }, { \"match\": \"\\\\]\", \"name\": \"punctuation.definition.end.bracket.square.go\" }, { \"match\": \"\\\\{\", \"name\": \"punctuation.definition.begin.bracket.curly.go\" }, { \"match\": \"\\\\}\", \"name\": \"punctuation.definition.end.bracket.curly.go\" }, { \"match\": \"\\\\(\", \"name\": \"punctuation.definition.begin.bracket.round.go\" }, { \"match\": \"\\\\)\", \"name\": \"punctuation.definition.end.bracket.round.go\" }, { \"match\": \"\\\\w+\", \"name\": \"entity.name.type.go\" }] }, \"multi_types\": { \"begin\": \"(\\\\btype\\\\b)\\\\s*(\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.type.go\" }, \"2\": { \"name\": \"punctuation.definition.begin.bracket.round.go\" } }, \"comment\": \"multi type declaration\", \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.end.bracket.round.go\" } }, \"patterns\": [{ \"include\": \"#struct_variables_types\" }, { \"include\": \"#interface_variables_types\" }, { \"include\": \"#type-declarations-without-brackets\" }, { \"include\": \"#parameter-variable-types\" }, { \"match\": \"(?:\\\\w+)\", \"name\": \"entity.name.type.go\" }] }, \"numeric_literals\": { \"captures\": { \"0\": { \"patterns\": [{ \"begin\": \"(?=.)\", \"end\": \"(?:\\\\n|$)\", \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"constant.numeric.decimal.go\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"punctuation.separator.constant.numeric.go\" }] }, \"2\": { \"name\": \"punctuation.separator.constant.numeric.go\" }, \"3\": { \"name\": \"constant.numeric.decimal.point.go\" }, \"4\": { \"name\": \"constant.numeric.decimal.go\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"punctuation.separator.constant.numeric.go\" }] }, \"5\": { \"name\": \"punctuation.separator.constant.numeric.go\" }, \"6\": { \"name\": \"keyword.other.unit.exponent.decimal.go\" }, \"7\": { \"name\": \"keyword.operator.plus.exponent.decimal.go\" }, \"8\": { \"name\": \"keyword.operator.minus.exponent.decimal.go\" }, \"9\": { \"name\": \"constant.numeric.exponent.decimal.go\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"punctuation.separator.constant.numeric.go\" }] }, \"10\": { \"name\": \"keyword.other.unit.imaginary.go\" }, \"11\": { \"name\": \"constant.numeric.decimal.go\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"punctuation.separator.constant.numeric.go\" }] }, \"12\": { \"name\": \"punctuation.separator.constant.numeric.go\" }, \"13\": { \"name\": \"keyword.other.unit.exponent.decimal.go\" }, \"14\": { \"name\": \"keyword.operator.plus.exponent.decimal.go\" }, \"15\": { \"name\": \"keyword.operator.minus.exponent.decimal.go\" }, \"16\": { \"name\": \"constant.numeric.exponent.decimal.go\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"punctuation.separator.constant.numeric.go\" }] }, \"17\": { \"name\": \"keyword.other.unit.imaginary.go\" }, \"18\": { \"name\": \"constant.numeric.decimal.point.go\" }, \"19\": { \"name\": \"constant.numeric.decimal.go\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"punctuation.separator.constant.numeric.go\" }] }, \"20\": { \"name\": \"punctuation.separator.constant.numeric.go\" }, \"21\": { \"name\": \"keyword.other.unit.exponent.decimal.go\" }, \"22\": { \"name\": \"keyword.operator.plus.exponent.decimal.go\" }, \"23\": { \"name\": \"keyword.operator.minus.exponent.decimal.go\" }, \"24\": { \"name\": \"constant.numeric.exponent.decimal.go\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"punctuation.separator.constant.numeric.go\" }] }, \"25\": { \"name\": \"keyword.other.unit.imaginary.go\" }, \"26\": { \"name\": \"keyword.other.unit.hexadecimal.go\" }, \"27\": { \"name\": \"constant.numeric.hexadecimal.go\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"punctuation.separator.constant.numeric.go\" }] }, \"28\": { \"name\": \"punctuation.separator.constant.numeric.go\" }, \"29\": { \"name\": \"constant.numeric.hexadecimal.go\" }, \"30\": { \"name\": \"constant.numeric.hexadecimal.go\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"punctuation.separator.constant.numeric.go\" }] }, \"31\": { \"name\": \"punctuation.separator.constant.numeric.go\" }, \"32\": { \"name\": \"keyword.other.unit.exponent.hexadecimal.go\" }, \"33\": { \"name\": \"keyword.operator.plus.exponent.hexadecimal.go\" }, \"34\": { \"name\": \"keyword.operator.minus.exponent.hexadecimal.go\" }, \"35\": { \"name\": \"constant.numeric.exponent.hexadecimal.go\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"punctuation.separator.constant.numeric.go\" }] }, \"36\": { \"name\": \"keyword.other.unit.imaginary.go\" }, \"37\": { \"name\": \"keyword.other.unit.hexadecimal.go\" }, \"38\": { \"name\": \"constant.numeric.hexadecimal.go\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"punctuation.separator.constant.numeric.go\" }] }, \"39\": { \"name\": \"punctuation.separator.constant.numeric.go\" }, \"40\": { \"name\": \"keyword.other.unit.exponent.hexadecimal.go\" }, \"41\": { \"name\": \"keyword.operator.plus.exponent.hexadecimal.go\" }, \"42\": { \"name\": \"keyword.operator.minus.exponent.hexadecimal.go\" }, \"43\": { \"name\": \"constant.numeric.exponent.hexadecimal.go\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"punctuation.separator.constant.numeric.go\" }] }, \"44\": { \"name\": \"keyword.other.unit.imaginary.go\" }, \"45\": { \"name\": \"keyword.other.unit.hexadecimal.go\" }, \"46\": { \"name\": \"constant.numeric.hexadecimal.go\" }, \"47\": { \"name\": \"constant.numeric.hexadecimal.go\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"punctuation.separator.constant.numeric.go\" }] }, \"48\": { \"name\": \"punctuation.separator.constant.numeric.go\" }, \"49\": { \"name\": \"keyword.other.unit.exponent.hexadecimal.go\" }, \"50\": { \"name\": \"keyword.operator.plus.exponent.hexadecimal.go\" }, \"51\": { \"name\": \"keyword.operator.minus.exponent.hexadecimal.go\" }, \"52\": { \"name\": \"constant.numeric.exponent.hexadecimal.go\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"punctuation.separator.constant.numeric.go\" }] }, \"53\": { \"name\": \"keyword.other.unit.imaginary.go\" } }, \"match\": \"(?:(?:(?:(?:(?:\\\\G(?=[0-9.])(?!0[xXbBoO])([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?<=[0-9])\\\\.|\\\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?(?:(?<!_)([eE])(\\\\+?)(\\\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?(i(?!\\\\w))?(?:\\\\n|$)|\\\\G(?=[0-9.])(?!0[xXbBoO])([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)(?<!_)([eE])(\\\\+?)(\\\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*))(i(?!\\\\w))?(?:\\\\n|$))|\\\\G((?:(?<=[0-9])\\\\.|\\\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)(?:(?<!_)([eE])(\\\\+?)(\\\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?(i(?!\\\\w))?(?:\\\\n|$))|(\\\\G0[xX])_?([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?<=[0-9a-fA-F])\\\\.|\\\\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?(?<!_)([pP])(\\\\+?)(\\\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*))(i(?!\\\\w))?(?:\\\\n|$))|(\\\\G0[xX])_?([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)(?<!_)([pP])(\\\\+?)(\\\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*))(i(?!\\\\w))?(?:\\\\n|$))|(\\\\G0[xX])((?:(?<=[0-9a-fA-F])\\\\.|\\\\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)(?<!_)([pP])(\\\\+?)(\\\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*))(i(?!\\\\w))?(?:\\\\n|$))\" }, { \"captures\": { \"1\": { \"name\": \"constant.numeric.decimal.go\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"punctuation.separator.constant.numeric.go\" }] }, \"2\": { \"name\": \"punctuation.separator.constant.numeric.go\" }, \"3\": { \"name\": \"keyword.other.unit.imaginary.go\" }, \"4\": { \"name\": \"keyword.other.unit.binary.go\" }, \"5\": { \"name\": \"constant.numeric.binary.go\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"punctuation.separator.constant.numeric.go\" }] }, \"6\": { \"name\": \"punctuation.separator.constant.numeric.go\" }, \"7\": { \"name\": \"keyword.other.unit.imaginary.go\" }, \"8\": { \"name\": \"keyword.other.unit.octal.go\" }, \"9\": { \"name\": \"constant.numeric.octal.go\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"punctuation.separator.constant.numeric.go\" }] }, \"10\": { \"name\": \"punctuation.separator.constant.numeric.go\" }, \"11\": { \"name\": \"keyword.other.unit.imaginary.go\" }, \"12\": { \"name\": \"keyword.other.unit.hexadecimal.go\" }, \"13\": { \"name\": \"constant.numeric.hexadecimal.go\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"punctuation.separator.constant.numeric.go\" }] }, \"14\": { \"name\": \"punctuation.separator.constant.numeric.go\" }, \"15\": { \"name\": \"keyword.other.unit.imaginary.go\" } }, \"match\": \"(?:(?:(?:\\\\G(?=[0-9.])(?!0[xXbBoO])([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)(i(?!\\\\w))?(?:\\\\n|$)|(\\\\G0[bB])_?([01](?:[01]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)(i(?!\\\\w))?(?:\\\\n|$))|(\\\\G0[oO]?)_?((?:[0-7]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))+)(i(?!\\\\w))?(?:\\\\n|$))|(\\\\G0[xX])_?([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)(i(?!\\\\w))?(?:\\\\n|$))\" }, { \"match\": \"(?:(?:[0-9a-zA-Z_\\\\.])|(?<=[eEpP])[+-])+\", \"name\": \"invalid.illegal.constant.numeric.go\" }] }] } }, \"match\": \"(?<!\\\\w)\\\\.?\\\\d(?:(?:[0-9a-zA-Z_\\\\.])|(?<=[eEpP])[+-])*\" }, \"operators\": { \"comment\": \"Note that the order here is very important!\", \"patterns\": [{ \"match\": \"((?:\\\\*|\\\\&)+)(?:(?!\\\\d)(?=(?:[\\\\w\\\\[\\\\]])|(?:<-)))\", \"name\": \"keyword.operator.address.go\" }, { \"match\": \"<-\", \"name\": \"keyword.operator.channel.go\" }, { \"match\": \"--\", \"name\": \"keyword.operator.decrement.go\" }, { \"match\": \"\\\\+\\\\+\", \"name\": \"keyword.operator.increment.go\" }, { \"match\": \"(==|!=|<=|>=|<(?!<)|>(?!>))\", \"name\": \"keyword.operator.comparison.go\" }, { \"match\": \"(&&|\\\\|\\\\||!)\", \"name\": \"keyword.operator.logical.go\" }, { \"match\": \"(=|\\\\+=|-=|\\\\|=|\\\\^=|\\\\*=|/=|:=|%=|<<=|>>=|&\\\\^=|&=)\", \"name\": \"keyword.operator.assignment.go\" }, { \"match\": \"(\\\\+|-|\\\\*|/|%)\", \"name\": \"keyword.operator.arithmetic.go\" }, { \"match\": \"(&(?!\\\\^)|\\\\||\\\\^|&\\\\^|<<|>>|\\\\~)\", \"name\": \"keyword.operator.arithmetic.bitwise.go\" }, { \"match\": \"\\\\.\\\\.\\\\.\", \"name\": \"keyword.operator.ellipsis.go\" }] }, \"other_struct_interface_expressions\": { \"comment\": \"struct and interface expression in-line (before curly bracket)\", \"patterns\": [{ \"comment\": \"after control variables must be added exactly here, do not move it! (changing may not affect tests, so be careful!)\", \"include\": \"#after_control_variables\" }, { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"\\\\w+\", \"name\": \"entity.name.type.go\" }] }, \"2\": { \"patterns\": [{ \"begin\": \"\\\\[\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.begin.bracket.square.go\" } }, \"end\": \"\\\\]\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.end.bracket.square.go\" } }, \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"\\\\w+\", \"name\": \"entity.name.type.go\" }, { \"include\": \"$self\" }] }] } }, \"match\": \"(\\\\b[\\\\w\\\\.]+)(\\\\[(?:[^\\\\]]+)?\\\\])?(?=\\\\{)(?<!\\\\bstruct\\\\b|\\\\binterface\\\\b)\" }] }, \"other_variables\": { \"comment\": \"all other variables\", \"match\": \"\\\\w+\", \"name\": \"variable.other.go\" }, \"package_name\": { \"patterns\": [{ \"begin\": \"\\\\b(package)\\\\s+\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.package.go\" } }, \"comment\": \"package name\", \"end\": \"(?!\\\\G)\", \"patterns\": [{ \"match\": \"\\\\d\\\\w*\", \"name\": \"invalid.illegal.identifier.go\" }, { \"match\": \"\\\\w+\", \"name\": \"entity.name.type.package.go\" }] }] }, \"parameter-variable-types\": { \"comment\": \"function and generic parameter types\", \"patterns\": [{ \"match\": \"\\\\{\", \"name\": \"punctuation.definition.begin.bracket.curly.go\" }, { \"match\": \"\\\\}\", \"name\": \"punctuation.definition.end.bracket.curly.go\" }, { \"begin\": \"(?:([\\\\w\\\\.\\\\*]+)?(\\\\[))\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"(?:\\\\w+)\", \"name\": \"entity.name.type.go\" }] }, \"2\": { \"name\": \"punctuation.definition.begin.bracket.square.go\" } }, \"end\": \"\\\\]\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.end.bracket.square.go\" } }, \"patterns\": [{ \"include\": \"#generic_param_types\" }] }, { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.begin.bracket.round.go\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.end.bracket.round.go\" } }, \"patterns\": [{ \"include\": \"#function_param_types\" }] }] }, \"property_variables\": { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"\\\\w+\", \"name\": \"variable.other.property.go\" }] } }, \"comment\": \"Property variables in struct\", \"match\": \"((?:\\\\b[\\\\w\\\\.]+)(?::(?!=)))\" }, \"raw_string_literals\": { \"begin\": \"`\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.go\" } }, \"comment\": \"Raw string literals\", \"end\": \"`\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.go\" } }, \"name\": \"string.quoted.raw.go\", \"patterns\": [{ \"include\": \"#string_placeholder\" }] }, \"runes\": { \"patterns\": [{ \"begin\": \"'\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.go\" } }, \"end\": \"'\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.go\" } }, \"name\": \"string.quoted.rune.go\", \"patterns\": [{ \"match\": `\\\\G(\\\\\\\\([0-7]{3}|[abfnrtv\\\\\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})|.)(?=')`, \"name\": \"constant.other.rune.go\" }, { \"match\": \"[^']+\", \"name\": \"invalid.illegal.unknown-rune.go\" }] }] }, \"single_type\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"keyword.type.go\" }, \"2\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"\\\\w+\", \"name\": \"entity.name.type.go\" }] }, \"3\": { \"patterns\": [{ \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.begin.bracket.round.go\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.end.bracket.round.go\" } }, \"patterns\": [{ \"include\": \"#function_param_types\" }, { \"include\": \"$self\" }] }, { \"include\": \"#type-declarations\" }, { \"include\": \"#generic_types\" }, { \"match\": \"\\\\w+\", \"name\": \"entity.name.type.go\" }] } }, \"comment\": \"single type declaration\", \"match\": \"(?:(?:^\\\\s*)(\\\\btype\\\\b)(?:\\\\s*)([\\\\w\\\\.\\\\*]+)(?:\\\\s+)(?!(?:=\\\\s*)?(?:[\\\\[\\\\]\\\\*]+)?\\\\b(?:struct|interface)\\\\b)([\\\\s\\\\S]+))\" }, { \"begin\": \"(?:(?:^|\\\\s+)(\\\\btype\\\\b)(?:\\\\s*)([\\\\w\\\\.\\\\*]+)(?=\\\\[))\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.type.go\" }, \"2\": { \"patterns\": [{ \"include\": \"#type-declarations-without-brackets\" }, { \"match\": \"\\\\w+\", \"name\": \"entity.name.type.go\" }] } }, \"comment\": \"single type declaration with generics\", \"end\": \"(?:(?<=\\\\])((?:\\\\s+)(?:(?:(?:[\\\\*\\\\[\\\\]]+)?(?:<-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*<-)?\\\\s*)+)?(?:(?!(?:[\\\\[\\\\]\\\\*]+)?(?:\\\\bstruct\\\\b|\\\\binterface\\\\b|\\\\bfunc\\\\b))[\\\\w\\\\.\\\\-\\\\*\\\\[\\\\]]+(?:\\\\,\\\\s+[\\\\w\\\\.\\\\[\\\\]\\\\*]+)*))?)\", \"endCaptures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations-without-brackets\" }, { \"match\": \"\\\\[\", \"name\": \"punctuation.definition.begin.bracket.square.go\" }, { \"match\": \"\\\\]\", \"name\": \"punctuation.definition.end.bracket.square.go\" }, { \"match\": \"\\\\w+\", \"name\": \"entity.name.type.go\" }] } }, \"patterns\": [{ \"include\": \"#struct_variables_types\" }, { \"include\": \"#type-declarations-without-brackets\" }, { \"include\": \"#parameter-variable-types\" }, { \"match\": \"\\\\[\", \"name\": \"punctuation.definition.begin.bracket.square.go\" }, { \"match\": \"\\\\]\", \"name\": \"punctuation.definition.end.bracket.square.go\" }, { \"match\": \"\\\\{\", \"name\": \"punctuation.definition.begin.bracket.curly.go\" }, { \"match\": \"\\\\}\", \"name\": \"punctuation.definition.end.bracket.curly.go\" }, { \"match\": \"\\\\(\", \"name\": \"punctuation.definition.begin.bracket.round.go\" }, { \"match\": \"\\\\)\", \"name\": \"punctuation.definition.end.bracket.round.go\" }, { \"match\": \"\\\\w+\", \"name\": \"entity.name.type.go\" }] }] }, \"slice_index_variables\": { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"\\\\w+\", \"name\": \"variable.other.go\" }] } }, \"comment\": \"slice index and capacity variables, to not scope them as property variables\", \"match\": \"(?<=\\\\w\\\\[)((?:(?:\\\\b[\\\\w\\\\.\\\\*+/\\\\-\\\\%<>\\\\|\\\\&]+:)|(?::\\\\b[\\\\w\\\\.\\\\*+/\\\\-\\\\%<>\\\\|\\\\&]+))(?:\\\\b[\\\\w\\\\.\\\\*+/\\\\-\\\\%<>\\\\|\\\\&]+)?(?::\\\\b[\\\\w\\\\.\\\\*+/\\\\-\\\\%<>\\\\|\\\\&]+)?)(?=\\\\])\" }, \"statements\": { \"patterns\": [{ \"include\": \"#package_name\" }, { \"include\": \"#import\" }, { \"include\": \"#syntax_errors\" }, { \"include\": \"#group-functions\" }, { \"include\": \"#group-types\" }, { \"include\": \"#group-variables\" }, { \"include\": \"#field_hover\" }] }, \"storage_types\": { \"patterns\": [{ \"match\": \"\\\\bbool\\\\b\", \"name\": \"storage.type.boolean.go\" }, { \"match\": \"\\\\bbyte\\\\b\", \"name\": \"storage.type.byte.go\" }, { \"match\": \"\\\\berror\\\\b\", \"name\": \"storage.type.error.go\" }, { \"match\": \"\\\\b(complex(64|128)|float(32|64)|u?int(8|16|32|64)?)\\\\b\", \"name\": \"storage.type.numeric.go\" }, { \"match\": \"\\\\brune\\\\b\", \"name\": \"storage.type.rune.go\" }, { \"match\": \"\\\\bstring\\\\b\", \"name\": \"storage.type.string.go\" }, { \"match\": \"\\\\buintptr\\\\b\", \"name\": \"storage.type.uintptr.go\" }, { \"match\": \"\\\\bany\\\\b\", \"name\": \"entity.name.type.any.go\" }] }, \"string_escaped_char\": { \"patterns\": [{ \"match\": `\\\\\\\\([0-7]{3}|[abfnrtv\\\\\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})`, \"name\": \"constant.character.escape.go\" }, { \"match\": `\\\\\\\\[^0-7xuUabfnrtv\\\\'\"]`, \"name\": \"invalid.illegal.unknown-escape.go\" }] }, \"string_literals\": { \"patterns\": [{ \"begin\": '\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.go\" } }, \"comment\": \"Interpreted string literals\", \"end\": '\"', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.go\" } }, \"name\": \"string.quoted.double.go\", \"patterns\": [{ \"include\": \"#string_escaped_char\" }, { \"include\": \"#string_placeholder\" }] }] }, \"string_placeholder\": { \"patterns\": [{ \"match\": \"%(\\\\[\\\\d+\\\\])?([+#\\\\-0\\\\x20]{,2}((\\\\d+|\\\\*)?(\\\\.?(\\\\d+|\\\\*|(\\\\[\\\\d+\\\\])\\\\*?)?(\\\\[\\\\d+\\\\])?)?))?[vT%tbcdoqxXUbeEfFgGspw]\", \"name\": \"constant.other.placeholder.go\" }] }, \"struct_interface_declaration\": { \"captures\": { \"1\": { \"name\": \"keyword.type.go\" }, \"2\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"\\\\w+\", \"name\": \"entity.name.type.go\" }] } }, \"comment\": \"struct, interface type declarations (related to: struct_variables_types, interface_variables_types)\", \"match\": \"(?:(?:^\\\\s*)(\\\\btype\\\\b)(?:\\\\s*)([\\\\w\\\\.]+))\" }, \"struct_variable_types_fields_multi\": { \"comment\": \"struct variable and type fields with multi lines\", \"patterns\": [{ \"begin\": \"(?:((?:\\\\w+(?:\\\\,\\\\s*\\\\w+)*)(?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:<-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*<-)?\\\\s*)+)?(?:\\\\s+)(?:[\\\\[\\\\]\\\\*]+)?)(\\\\bstruct\\\\b)(?:\\\\s*)(\\\\{))\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"\\\\w+\", \"name\": \"variable.other.property.go\" }] }, \"2\": { \"name\": \"keyword.struct.go\" }, \"3\": { \"name\": \"punctuation.definition.begin.bracket.curly.go\" } }, \"comment\": \"struct in struct types\", \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.end.bracket.curly.go\" } }, \"patterns\": [{ \"include\": \"#struct_variables_types_fields\" }, { \"include\": \"$self\" }] }, { \"begin\": \"(?:((?:\\\\w+(?:\\\\,\\\\s*\\\\w+)*)(?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:<-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*<-)?\\\\s*)+)?(?:\\\\s+)(?:[\\\\[\\\\]\\\\*]+)?)(\\\\binterface\\\\b)(?:\\\\s*)(\\\\{))\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"\\\\w+\", \"name\": \"variable.other.property.go\" }] }, \"2\": { \"name\": \"keyword.interface.go\" }, \"3\": { \"name\": \"punctuation.definition.begin.bracket.curly.go\" } }, \"comment\": \"interface in struct types\", \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.end.bracket.curly.go\" } }, \"patterns\": [{ \"include\": \"#interface_variables_types_field\" }, { \"include\": \"$self\" }] }, { \"begin\": \"(?:((?:\\\\w+(?:\\\\,\\\\s*\\\\w+)*)(?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:<-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*<-)?\\\\s*)+)?(?:\\\\s+)(?:[\\\\[\\\\]\\\\*]+)?)(\\\\bfunc\\\\b)(?:\\\\s*)(\\\\())\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"\\\\w+\", \"name\": \"variable.other.property.go\" }] }, \"2\": { \"name\": \"keyword.function.go\" }, \"3\": { \"name\": \"punctuation.definition.begin.bracket.round.go\" } }, \"comment\": \"function in struct types\", \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.end.bracket.round.go\" } }, \"patterns\": [{ \"include\": \"#function_param_types\" }, { \"include\": \"$self\" }] }, { \"include\": \"#parameter-variable-types\" }] }, \"struct_variables_types\": { \"begin\": \"(\\\\bstruct\\\\b)\\\\s*(\\\\{)\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.struct.go\" }, \"2\": { \"name\": \"punctuation.definition.begin.bracket.curly.go\" } }, \"comment\": \"Struct variable type\", \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.end.bracket.curly.go\" } }, \"patterns\": [{ \"include\": \"#struct_variables_types_fields\" }, { \"include\": \"$self\" }] }, \"struct_variables_types_fields\": { \"comment\": \"Struct variable type fields\", \"patterns\": [{ \"include\": \"#struct_variable_types_fields_multi\" }, { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"(?:\\\\w+)\", \"name\": \"entity.name.type.go\" }] } }, \"comment\": \"one line - single type\", \"match\": \"(?:(?<=\\\\{)\\\\s*((?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:<-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*<-)?\\\\s*)+)?(?:[\\\\w\\\\.\\\\*\\\\[\\\\]]+))\\\\s*(?=\\\\}))\" }, { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"(?:\\\\w+)\", \"name\": \"variable.other.property.go\" }] }, \"2\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"(?:\\\\w+)\", \"name\": \"entity.name.type.go\" }] } }, \"comment\": \"one line - property variables and types\", \"match\": \"(?:(?<=\\\\{)\\\\s*((?:(?:\\\\w+\\\\,\\\\s*)+)?(?:\\\\w+\\\\s+))((?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:<-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*<-)?\\\\s*)+)?(?:[\\\\w\\\\.\\\\*\\\\[\\\\]]+))\\\\s*(?=\\\\}))\" }, { \"captures\": { \"1\": { \"patterns\": [{ \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"(?:\\\\w+)\", \"name\": \"variable.other.property.go\" }] }, \"2\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"(?:\\\\w+)\", \"name\": \"entity.name.type.go\" }] } }, \"match\": \"(?:((?:(?:\\\\w+\\\\,\\\\s*)+)?(?:\\\\w+\\\\s+))?((?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:\\\\<\\\\-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*\\\\<\\\\-)?\\\\s*)+)?(?:[\\\\S]+)(?:\\\\;)?))\" }] } }, \"comment\": \"one line with semicolon(;) without formatting gofmt - single type | property variables and types\", \"match\": \"(?:(?<=\\\\{)((?:\\\\s*(?:(?:(?:\\\\w+\\\\,\\\\s*)+)?(?:\\\\w+\\\\s+))?(?:(?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:<-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*<-)?\\\\s*)+)?(?:[\\\\S]+)(?:\\\\;)?))+)\\\\s*(?=\\\\}))\" }, { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"(?:\\\\w+)\", \"name\": \"entity.name.type.go\" }] } }, \"comment\": \"one type only\", \"match\": '(?:((?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:<-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*<-)?\\\\s*)+)?(?:[\\\\w\\\\.\\\\*]+)\\\\s*)(?:(?=\\\\`|\\\\/|\")|$))' }, { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"(?:\\\\w+)\", \"name\": \"variable.other.property.go\" }] }, \"2\": { \"patterns\": [{ \"include\": \"#type-declarations-without-brackets\" }, { \"include\": \"#parameter-variable-types\" }, { \"match\": \"(?:\\\\w+)\", \"name\": \"entity.name.type.go\" }] } }, \"comment\": \"property variables and types\", \"match\": '(?:((?:(?:\\\\w+\\\\,\\\\s*)+)?(?:\\\\w+\\\\s+))([^\\\\`\"\\\\/]+))' }] }, \"support_functions\": { \"captures\": { \"1\": { \"name\": \"entity.name.function.support.go\" }, \"2\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"\\\\d\\\\w*\", \"name\": \"invalid.illegal.identifier.go\" }, { \"match\": \"\\\\w+\", \"name\": \"entity.name.function.support.go\" }] }, \"3\": { \"patterns\": [{ \"include\": \"#type-declarations-without-brackets\" }, { \"match\": \"\\\\[\", \"name\": \"punctuation.definition.begin.bracket.square.go\" }, { \"match\": \"\\\\]\", \"name\": \"punctuation.definition.end.bracket.square.go\" }, { \"match\": \"\\\\{\", \"name\": \"punctuation.definition.begin.bracket.curly.go\" }, { \"match\": \"\\\\}\", \"name\": \"punctuation.definition.end.bracket.curly.go\" }, { \"match\": \"\\\\w+\", \"name\": \"entity.name.type.go\" }] } }, \"comment\": \"Support Functions\", \"match\": `(?:(?:((?<=\\\\.)\\\\b\\\\w+)|(\\\\b\\\\w+))(\\\\[(?:(?:[\\\\w\\\\.\\\\*\\\\[\\\\]{}\"\\\\']+)(?:(?:\\\\,\\\\s*(?:[\\\\w\\\\.\\\\*\\\\[\\\\]{}]+))*))?\\\\])?(?=\\\\())` }, \"switch_select_case_variables\": { \"captures\": { \"1\": { \"name\": \"keyword.control.go\" }, \"2\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"include\": \"#support_functions\" }, { \"include\": \"#variable_assignment\" }, { \"match\": \"\\\\w+\", \"name\": \"variable.other.go\" }] } }, \"comment\": \"variables after case control keyword in switch/select expression, to not scope them as property variables\", \"match\": \"(?:(?:^\\\\s*(\\\\bcase\\\\b))(?:\\\\s+)([\\\\s\\\\S]+(?::)\\\\s*(?:/(?:/|\\\\*).*)?)$)\" }, \"switch_types\": { \"begin\": \"(?<=\\\\bswitch\\\\b)(?:\\\\s*)(?:(\\\\w+\\\\s*:=)?\\\\s*([\\\\w\\\\.\\\\*()\\\\[\\\\]+/\\\\-\\\\%<>\\\\|\\\\&]+))(\\\\.\\\\(\\\\btype\\\\b\\\\)\\\\s*)(\\\\{)\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"include\": \"#operators\" }, { \"match\": \"\\\\w+\", \"name\": \"variable.other.assignment.go\" }] }, \"2\": { \"patterns\": [{ \"include\": \"#support_functions\" }, { \"include\": \"#type-declarations\" }, { \"match\": \"\\\\w+\", \"name\": \"variable.other.go\" }] }, \"3\": { \"patterns\": [{ \"include\": \"#delimiters\" }, { \"include\": \"#brackets\" }, { \"match\": \"\\\\btype\\\\b\", \"name\": \"keyword.type.go\" }] }, \"4\": { \"name\": \"punctuation.definition.begin.bracket.curly.go\" } }, \"comment\": \"switch type assertions, only highlights types after case keyword\", \"end\": \"(?:\\\\})\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.end.bracket.curly.go\" } }, \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"keyword.control.go\" }, \"2\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"\\\\w+\", \"name\": \"entity.name.type.go\" }] }, \"3\": { \"name\": \"punctuation.other.colon.go\" }, \"4\": { \"patterns\": [{ \"include\": \"#comments\" }] } }, \"comment\": \"types after case keyword with single line\", \"match\": \"(?:^\\\\s*(\\\\bcase\\\\b))(?:\\\\s+)([\\\\w\\\\.\\\\,\\\\*=<>!\\\\s]+)(:)(\\\\s*/(?:/|\\\\*)\\\\s*.*)?$\" }, { \"begin\": \"\\\\bcase\\\\b\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.control.go\" } }, \"comment\": \"types after case keyword with multi lines\", \"end\": \":\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.other.colon.go\" } }, \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"\\\\w+\", \"name\": \"entity.name.type.go\" }] }, { \"include\": \"$self\" }] }, \"syntax_errors\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"invalid.illegal.slice.go\" } }, \"comment\": \"Syntax error using slices\", \"match\": \"\\\\[\\\\](\\\\s+)\" }, { \"comment\": \"Syntax error numeric literals\", \"match\": \"\\\\b0[0-7]*[89]\\\\d*\\\\b\", \"name\": \"invalid.illegal.numeric.go\" }] }, \"terminators\": { \"comment\": \"Terminators\", \"match\": \";\", \"name\": \"punctuation.terminator.go\" }, \"type-declarations\": { \"comment\": \"includes all type declarations\", \"patterns\": [{ \"include\": \"#language_constants\" }, { \"include\": \"#comments\" }, { \"include\": \"#map_types\" }, { \"include\": \"#brackets\" }, { \"include\": \"#delimiters\" }, { \"include\": \"#keywords\" }, { \"include\": \"#operators\" }, { \"include\": \"#runes\" }, { \"include\": \"#storage_types\" }, { \"include\": \"#raw_string_literals\" }, { \"include\": \"#string_literals\" }, { \"include\": \"#numeric_literals\" }, { \"include\": \"#terminators\" }] }, \"type-declarations-without-brackets\": { \"comment\": \"includes all type declarations without brackets (in some cases, brackets need to be captured manually)\", \"patterns\": [{ \"include\": \"#language_constants\" }, { \"include\": \"#comments\" }, { \"include\": \"#map_types\" }, { \"include\": \"#delimiters\" }, { \"include\": \"#keywords\" }, { \"include\": \"#operators\" }, { \"include\": \"#runes\" }, { \"include\": \"#storage_types\" }, { \"include\": \"#raw_string_literals\" }, { \"include\": \"#string_literals\" }, { \"include\": \"#numeric_literals\" }, { \"include\": \"#terminators\" }] }, \"type_assertion_inline\": { \"captures\": { \"1\": { \"name\": \"keyword.type.go\" }, \"2\": { \"patterns\": [{ \"include\": \"#type-declarations\" }, { \"match\": \"(?:\\\\w+)\", \"name\": \"entity.name.type.go\" }] } }, \"comment\": \"struct/interface types in-line (type assertion) | switch type keyword\", \"match\": \"(?:(?<=\\\\.\\\\()(?:(\\\\btype\\\\b)|((?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:<-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*<-)?\\\\s*)+)?[\\\\w\\\\.\\\\[\\\\]\\\\*]+))(?=\\\\)))\" }, \"var_const_assignment\": { \"comment\": \"variable assignment with var and const keyword\", \"patterns\": [{ \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#delimiters\" }, { \"match\": \"\\\\w+\", \"name\": \"variable.other.assignment.go\" }] }, \"2\": { \"patterns\": [{ \"include\": \"#type-declarations-without-brackets\" }, { \"include\": \"#generic_types\" }, { \"match\": \"\\\\(\", \"name\": \"punctuation.definition.begin.bracket.round.go\" }, { \"match\": \"\\\\)\", \"name\": \"punctuation.definition.end.bracket.round.go\" }, { \"match\": \"\\\\[\", \"name\": \"punctuation.definition.begin.bracket.square.go\" }, { \"match\": \"\\\\]\", \"name\": \"punctuation.definition.end.bracket.square.go\" }, { \"match\": \"\\\\w+\", \"name\": \"entity.name.type.go\" }] } }, \"comment\": \"var and const with single type assignment\", \"match\": \"(?:(?<=\\\\bvar\\\\b|\\\\bconst\\\\b)(?:\\\\s*)(\\\\b[\\\\w\\\\.]+(?:\\\\,\\\\s*[\\\\w\\\\.]+)*)(?:\\\\s*)((?:(?:(?:[\\\\*\\\\[\\\\]]+)?(?:<-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*<-)?\\\\s*)+(?:\\\\([^)]+\\\\))?)?(?!(?:[\\\\[\\\\]\\\\*]+)?\\\\b(?:struct|func|map)\\\\b)(?:[\\\\w\\\\.\\\\[\\\\]\\\\*]+(?:\\\\,\\\\s*[\\\\w\\\\.\\\\[\\\\]\\\\*]+)*)?(?:\\\\s*)(?:=)?)?)\" }, { \"begin\": \"(?:(?<=\\\\bvar\\\\b|\\\\bconst\\\\b)(?:\\\\s*)(\\\\())\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.definition.begin.bracket.round.go\" } }, \"comment\": \"var and const with multi type assignment\", \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.end.bracket.round.go\" } }, \"patterns\": [{ \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#delimiters\" }, { \"match\": \"\\\\w+\", \"name\": \"variable.other.assignment.go\" }] }, \"2\": { \"patterns\": [{ \"include\": \"#type-declarations-without-brackets\" }, { \"include\": \"#generic_types\" }, { \"match\": \"\\\\(\", \"name\": \"punctuation.definition.begin.bracket.round.go\" }, { \"match\": \"\\\\)\", \"name\": \"punctuation.definition.end.bracket.round.go\" }, { \"match\": \"\\\\[\", \"name\": \"punctuation.definition.begin.bracket.square.go\" }, { \"match\": \"\\\\]\", \"name\": \"punctuation.definition.end.bracket.square.go\" }, { \"match\": \"\\\\w+\", \"name\": \"entity.name.type.go\" }] } }, \"match\": \"(?:(?:^\\\\s*)(\\\\b[\\\\w\\\\.]+(?:\\\\,\\\\s*[\\\\w\\\\.]+)*)(?:\\\\s*)((?:(?:(?:[\\\\*\\\\[\\\\]]+)?(?:<-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*<-)?\\\\s*)+(?:\\\\([^)]+\\\\))?)?(?!(?:[\\\\[\\\\]\\\\*]+)?\\\\b(?:struct|func|map)\\\\b)(?:[\\\\w\\\\.\\\\[\\\\]\\\\*]+(?:\\\\,\\\\s*[\\\\w\\\\.\\\\[\\\\]\\\\*]+)*)?(?:\\\\s*)(?:=)?)?)\" }, { \"include\": \"$self\" }] }] }, \"variable_assignment\": { \"comment\": \"variable assignment\", \"patterns\": [{ \"captures\": { \"0\": { \"patterns\": [{ \"include\": \"#delimiters\" }, { \"match\": \"\\\\d\\\\w*\", \"name\": \"invalid.illegal.identifier.go\" }, { \"match\": \"\\\\w+\", \"name\": \"variable.other.assignment.go\" }] } }, \"comment\": \"variable assignment with :=\", \"match\": \"\\\\b\\\\w+(?:\\\\,\\\\s*\\\\w+)*(?=\\\\s*:=)\" }, { \"captures\": { \"0\": { \"patterns\": [{ \"include\": \"#delimiters\" }, { \"include\": \"#operators\" }, { \"match\": \"\\\\d\\\\w*\", \"name\": \"invalid.illegal.identifier.go\" }, { \"match\": \"\\\\w+\", \"name\": \"variable.other.assignment.go\" }] } }, \"comment\": \"variable assignment with =\", \"match\": \"\\\\b[\\\\w\\\\.\\\\*]+(?:\\\\,\\\\s*[\\\\w\\\\.\\\\*]+)*(?=\\\\s*=(?!=))\" }] } }, \"scopeName\": \"source.go\" });\nvar go = [\n  lang\n];\n\nexport { go as default };\n"],"names":["lang","go"],"mappings":"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","x_google_ignoreList":[0]}