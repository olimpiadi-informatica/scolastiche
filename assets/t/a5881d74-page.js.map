{"version":3,"file":"a5881d74-page.js","sources":["../../../src/scolastiche/2020/contest/algo-2-pt-13/question.md","../../../src/scolastiche/2020/contest/algo-2-pt-15/question.md","../../../src/scolastiche/2020/contest/algo-2-pt-14/question.md","../../../src/scolastiche/2020/contest/algo-2-pt-18/question.md","../../../src/scolastiche/2020/contest/algo-3-pt-16/question.md","../../../src/scolastiche/2020/contest/algo-3-pt-17/question.md","../../../src/scolastiche/2020/contest/algo-3-pt-19/question.md","../../../src/scolastiche/2020/contest/algo-3-pt-20/question.md","../../../src/scolastiche/2020/contest/logica-2-pt-01/question.md","../../../src/scolastiche/2020/contest/logica-2-pt-02/question.md","../../../src/scolastiche/2020/contest/logica-3-pt-03/question.md","../../../src/scolastiche/2020/contest/logica-3-pt-04/question.md","../../../src/scolastiche/2020/contest/logica-3-pt-05/question.md","../../../src/scolastiche/2020/contest/prog-2-pt-06/question.md","../../../src/scolastiche/2020/contest/prog-2-pt-07/question.md","../../../src/scolastiche/2020/contest/prog-2-pt-08/question.md","../../../src/scolastiche/2020/contest/prog-3-pt-09/question.md","../../../src/scolastiche/2020/contest/prog-3-pt-10/question.md","../../../src/scolastiche/2020/contest/prog-3-pt-11/question.md","../../../src/scolastiche/2020/contest/prog-3-pt-12/question.md","../../../src/scolastiche/2020/contest/contest.mdx","../../../src/scolastiche/2020/page.jsx"],"sourcesContent":["---\nvariants:\n  - min: 5\n    sol: 35\n    tipo: minima\n  - min: 5\n    sol: 56\n    tipo: massima\n  - min: 6\n    sol: 67\n    tipo: minima\n  - min: 6\n    sol: 112\n    tipo: massima\n---\n\nQuando il Dr. Bruce Banner si trasforma nell'incredibile Hulk, acquista sempre più forza ad ogni minuto che passa.\n\nAl tempo $t=0$ riesce a saltare un solo metro, al tempo $t=1$ minuto ne salta due, al tempo $t=2$ minuti ne salta quattro e così via: in generale, al tempo $t \\geq 0$ minuti riesce a saltare $2^t$ metri.\n\nTuttavia l'incredibile Hulk può saltare sempre e solo nella stessa direzione: dunque ad ogni istante t può decidere se saltare in avanti alla distanza permessagli in quel momento oppure stare fermo e aspettare che la distanza permessagli aumenti, in modo da percorrere una certa distanza $D > 0$, espressa in metri, effettuando il minor numero possibile di salti.\n\nPer esempio, per $D=9$, Hulk salta _due_ volte (effettua un salto da $1$ metro a $t=0$ e uno da $8$ metri a $t=3$ minuti); per $D=7$, Hulk salta _tre_ volte (un salto da $1$ metro a $t=0$, uno da $2$ metri a $t = 1$ minuto e uno da $4$ metri a $t=2$ minuti); per $D=16$, Hulk effettua _un solo_ salto da $16$ metri a $t=4$ minuti.\n\nSapete che, nel suo ultimo spostamento, Hulk ha fatto in totale 3 salti, di cui l'ultimo al tempo $t=\\js{min}$ minuti. Qual è la distanza **{tipo}** percorsa da Hulk nel suo ultimo spostamento?\n\n?> {sol}\n","---\nvariants:\n  - sol: 27\n    time: { A: 2, B: 4, C: 9, D: 13 }\n  - sol: 31\n    time: { A: 2, B: 5, C: 10, D: 14 }\n  - sol: 35\n    time: { A: 2, B: 6, C: 11, D: 15 }\n  - sol: 39\n    time: { A: 2, B: 7, C: 12, D: 16 }\n---\n\nQuattro gondole A, B, C e D sono ormeggiate sulla riva sinistra di un canale. Un gondoliere deve portare le quattro gondole sulla riva destra.\n\nEssendo di differente grandezza, le gondole impiegano tempi diversi per attraversare il canale: la gondola A impiega {time.A} minuti, la gondola B {time.B} minuti, la gondola C {time.C} minuti e la gondola D {time.D} minuti.\n\nIl gondoliere può condurre una sola gondola alla volta, ma può agganciare alla gondola su cui si trova una seconda gondola e trainarla, impiegando in questo caso il tempo di quella più lenta.\n\nQual è il tempo minimo necessario al gondoliere per trasferire le 4 gondole da una riva all’altra?\n\n?> {sol}\n","---\nvariants:\n  - panini: 48, 24, 29, 17, 21, 33, 35, 44, 41\n    sol: 6\n  - panini: 48, 24, 26, 17, 21, 33, 35, 44, 41\n    sol: 5\n  - panini: 48, 26, 29, 19, 21, 33, 37, 46, 41\n    sol: 7\n  - panini: 51, 20, 29, 11, 21, 31, 38, 47, 42\n    sol: 9\n---\n\nPoldo è un famoso mangiatore di panini. Il dottore ha provato a prescrivergli varie diete per convincerlo a mangiare meno, ma Poldo trova sempre dei modi ingegnosi per aggirare le regole e mangiare quanti più panini possibile.\n\nPer questo motivo il dottore ha prescritto a Poldo una nuova dieta: potrà infatti mangiare esattamente $K$ panini, a patto che l'**impatto calorico** sia il minimo possibile.\n\nDefiniamo **impatto calorico** la differenza di peso (in grammi) tra il panino più pesante mangiato e quello più leggero.\n\nOggi Poldo può mangiare esattamente $K = 3$ panini. Aiutalo a trovare il minimo impatto calorico possibile, sapendo che i panini disponibili hanno i seguenti pesi (in grammi):\n\n$$\n\\js{panini}\n$$\n\n?> {sol}\n","---\nvariants:\n  - numA: 2\n    numB: 8\n    numC: 9\n    sol: 37\n  - numA: 3\n    numB: 5\n    numC: 10\n    sol: 39\n  - numA: 4\n    numB: 6\n    numC: 11\n    sol: 41\n  - numA: 5\n    numB: 7\n    numC: 12\n    sol: 43\n---\n\nConsiderate una piramide di numeri, come quella mostrata nella figura che segue. Definiamo una **discesa** come _una sequenza di numeri ottenuti partendo dalla cima della piramide e giungendo alla base, passando ogni volta per uno dei due numeri sottostanti_. Inoltre, il **valore** di una discesa è definito come _la somma dei numeri della discesa_. La discesa massima di una piramide è quella che ha il massimo valore tra tutte le discese della piramide.\n\nNell’esempio seguente è stata evidenziata la discesa ottenuta partendo dalla cima scendendo prima a sinistra e poi sempre a destra fino alla base. I numeri che compongono tale discesa sono $(1, 2, 7, 11)$ e la loro somma vale $21$, che è il valore di questa discesa.\n\n$$\n\\begin{array}{ccccccc}\n\t&    &    &  \\textbf{1} &  &  &  \\\\\n\t&    &  \\textbf{2}  &   & \\js{numC} &  &  \\\\\n\t& \\js{numA}    &    &  \\textbf{7} &  & 5  &  \\\\\n\\js{numB}\t&      &  4   &   &  \\textbf{11} &   & 6  \\\\\n\\end{array}\n$$\n\nSia `Min` il valore della discesa di somma minima, `Max` il valore della discesa di somma massima. Quanto vale `Min + Max`?\n\n?> {sol}\n","---\nvariants:\n  - i: 0\n    sol: 83\n  - i: 1\n    sol: 81\n  - i: 2\n    sol: 84\n  - i: 3\n    sol: 91\n---\n\nIl pirata Barbagialla trova un’antica mappa che spiega come raggiungere un favoloso tesoro. La mappa ha la forma di una matrice di celle; le celle possono essere vuote, contenere ostacoli che impediscono a Barbagialla di attraversarle, oppure premi (costituiti da un certo numero di ghinee d’oro); una cella contiene il tesoro.\n\n![](mappa{i}.svg?w=500)\n\nCon riferimento alla figura, il pirata Barbagialla (la sagoma umana) si trova nella cella individuata dalle coordinate (1,1). Il tesoro, rappresentato da una coppa, è nella cella (8,8); il campo contiene ostacoli, individuati da quadrati neri posti in 13 celle. Nove celle contengono dei premi: ad esempio 8 ghinee d’oro nella cella di coordinate (4,2) e 10 nella cella (6,4). Barbagialla però può spostarsi solo di una cella verso destra o verso l’alto, cioè ad ogni passo solo una delle sue coordinate può aumentare di una unità.\n\nEsistono diversi percorsi disponibili per Barbagialla per raggiungere il tesoro; siano, rispettivamente, `MAX` il numero massimo e `MIN` il numero minimo di ghinee d’oro che Barbagialla potrà raccogliere percorrendo questi percorsi.\n\nQuanto vale `MAX + MIN`?\n\n?> {sol}\n","---\nvariants:\n  - maxINT: 36\n    minINT: 32\n    sol: 6\n  - maxINT: 46\n    minINT: 42\n    sol: 9\n  - maxINT: 52\n    minINT: 48\n    sol: 12\n  - maxINT: 68\n    minINT: 64\n    sol: 7\n---\n\nConsideriamo il seguente algoritmo, che prende in ingresso un intero positivo $N$:\n\n- Se $N$ vale $1$, l’algoritmo termina.\n- Se $N$ è pari, dividi $N$ per $2$, altrimenti (se $N$ è dispari) moltiplicalo per $3$ e aggiungi $1$.\n\nPer esempio, applicato al valore $N = 6$, l’algoritmo produce la seguente sequenza (di lunghezza $9$, contando anche il valore iniziale $N = 6$ e il valore finale $1$): $6, \\, 3, \\, 10, \\, 5, \\, 16, \\, 8, \\, 4, \\, 2, \\, 1$.\n\nLa congettura di Collatz, chiamata anche congettura $3N+1$, afferma che l’algoritmo qui sopra termini sempre per qualsiasi valore $N$; in altre parole, se prendo un qualsiasi numero intero maggiore di $1$, applicare la regola numero $2$ conduce sempre al numero $1$.\n\nConsiderando i numeri compresi tra $\\js{minINT}$ e $\\js{maxINT}$ (estremi inclusi), qual è il valore **minimo** della lunghezza della sequenza (calcolata usando l’algoritmo descritto qui sopra)?\n\n?> {sol}\n","---\nvariants:\n  - numeri: 7, 11, 4, 8, 21, 15\n    sol: 162\n  - numeri: 7, 11, 4, 8, 21, 18\n    sol: 168\n  - numeri: 7, 11, 4, 8, 21, 16\n    sol: 164\n  - numeri: 9, 11, 4, 8, 22, 17\n    sol: 174\n---\n\nAvete un insieme di numeri di cui volete calcolare la somma totale. Potete sommare due numeri alla volta, inserendo il risultato nell’insieme di numeri, fino ad arrivare ad avere un numero solo, pari alla somma totale. Il costo di una somma è pari al valore della somma stessa. Ad esempio, se volete sommare i numeri $2$,$3$ e $7$, possiamo ad esempio sommare $2$ e $3$, con costo $5$, e poi sommare $5$ e $7$, con costo $12$. Il costo totale è quindi $5+12=17$. In alternativa, sommando prima $3$ e $7$ (costo $10$) e poi $2$ e $10$ (costo $12$), il costo totale per arrivare alla somma è $10+12=22$.\n\nSe i numeri da sommare sono i seguenti:\n\n$$\n\\js{numeri}\n$$\n\nqual è il costo minimo per sommarli tutti tra di loro?\n\n?> {sol}\n","---\nvariants:\n  - i: 0\n    sol: 25\n  - i: 1\n    sol: 27\n  - i: 2\n    sol: 23\n  - i: 3\n    sol: 24\n---\n\nIn una zona di montagna, abbastanza isolata, sta per arrivare finalmente una connessione internet di qualità, basata sul 5G. Nella mappa qui sotto vedete le case di un piccolo comprensorio; esiste una connessione di rete tra alcune coppie di case, come mostrato nella mappa qui sotto.\n\n![](graph-{i}.svg?w=500)\n\nGli abitanti del comprensorio, per massimizzare la velocità, decidono che alcune case si doteranno di una antenna 5G in maniera da rispettare la seguente regola:\n**ogni casa deve avere l'antenna 5G oppure deve essere collegata _direttamente_ a una casa con l'antenna 5G**.\nNota bene: due case collegate tra di loro possono, se conveniente, montare entrambe l'antenna 5G; la cosa importante, come detto in precedenza, è che se una casa non è dotata di antenna allora deve essere obbligatoriamente collegata a una con l'antenna.\n\nA seconda delle case, il costo per installare l'antenna è diverso. Per esempio, come mostrato in figura, il costo per installare l'antenna nella casa A è pari a 11.\n\nAiuta gli abitanti del comprensorio a decidere dove costruire le antenne, in maniera da rispettare la regola descritta e da minimizzare la spesa complessiva, ovvero la somma dei costi delle antenne. Qual è il valore della spesa minima complessiva?\n\n?> {sol}\n","---\nvariants:\n  - sol: 10\n    res: 4714\n  - sol: 11\n    res: 3538\n  - sol: 12\n    res: 5926\n  - sol: 13\n    res: 9502\n---\n\nSi consideri la seguente somma, in cui alcune cifre sono state sostituite da $X$ e $Y$ (a lettera uguale corrisponde, naturalmente, cifra uguale):\n\n$$\n\\begin{array}{rc}\n\\texttt{1X3Y} & + \\\\\n\\texttt{XXYY} & = \\\\\n\\hline\n\\texttt{\\js{res}} &\n\\end{array}\n$$\n\nQuanto vale la somma di $X$ e $Y$?\n\n?> {res}\n","---\nvariants:\n  - sol: 52\n    evento: \"C1 e C2 hanno un seme nero e C3 è un Jack\"\n  - sol: 208\n    evento: \"C1 è un cuori, C2 è fiori e C3 è un Re\"\n  - sol: 104\n    evento: \"C1 è un seme nero, C2 è un cuori e C3 è una donna\"\n  - sol: 338\n    evento: \"C1 è un Re, C2 ha un seme nero e C3 è un asso\"\n---\n\nSi supponga di avere un mazzo di carte francesi. Si ricorda che un mazzo di carte francesi ha 52 carte: 13 per ogni seme (carte dal 2 al 10 più Asso, che vale 1, Jack Donna e Re); i semi sono cuori e quadri, di colore rosso, e fiori e picche, di colore nero.\n\nSi supponga di prendere una carta C1 dal mazzo, di rimetterla dentro, mischiare, prenderne una seconda C2, rimetterla dentro, mischiare e prendere una terza carta C3. Si consideri il seguente scenario:\n\n**{evento}.**\n\nLa probabilità di questo scenario è $\\frac{1}{X}$, quanto vale $X$?\n\n?> {sol}\n","---\nvariants:\n  - sol: 233\n    sequenza: 11,50\n  - sol: 100\n    sequenza: 8,28\n  - sol: 80\n    sequenza: 8,24\n  - sol: 154\n    sequenza: 10,38\n---\n\nLa successione di Fibonacci, i cui primi numeri sono $1, 1, 2,3, 5, 8, 13, \\dots$ si ottiene in base alla seguente definizione ricorsiva:\n\n$$\n\\begin{array}{lcll}\n\\mathrm{Fib}(1) &=& 1 & \\\\\n\\mathrm{Fib}(2) &=& 1 & \\\\\n\\mathrm{Fib}(n) &=& \\mathrm{Fib}(n-2) + \\mathrm{Fib}(n-1) & \\text{ se $n$ maggiore di $2$}\n\\end{array}\n$$\n\nSi consideri invece la successione\n$$1,2,\\js{sequenza},C$$\nottenuta in base alla seguente definizione ricorsiva:\n\n$$\n\\begin{array}{lcll}\n\\mathrm{Gib}(1) &=& 1 & \\\\\n\\mathrm{Gib}(2) &=& 2 & \\\\\n\\mathrm{Gib}(n) &=& A \\times \\mathrm{Gib}(n-2) + B \\times \\mathrm{Gib}(n-1) & \\text{ se $n$ maggiore di $2$}\n\\end{array}\n$$\n\n$A$, $B$ e $C$ sono numeri di cui dovete desumere il valore. Quanto vale $C$?\n\n?> {sol}\n","---\nvariants:\n  - aerei: 10\n    macchine: 10\n    sol: 22\n    solomacchine: 5\n    treni: 10\n  - aerei: 10\n    macchine: 12\n    sol: 23\n    solomacchine: 6\n    treni: 11\n  - aerei: 10\n    macchine: 10\n    sol: 24\n    solomacchine: 7\n    treni: 12\n  - aerei: 10\n    macchine: 11\n    sol: 25\n    solomacchine: 8\n    treni: 12\n---\n\nAd una festa sono stati invitati diversi amici, si sa che a {treni} di questi piacciono i treni, a {macchine} piacciono le macchine da corsa e a {aerei} gli aerei. Ogni amico può avere anche più di una passione!\n\nSi sa inoltre:\n\n- solo uno ha la passione per tutti 3 i mezzi\n- a 7 amici piacciono i treni ma non gli aerei\n- a {solomacchine} amici piacciono solo le macchine\n- a 8 amici piacciono gli aerei ma non le macchine\n\nQuanti sono gli amici in tutto?\n\n?> {sol}\n","---\nvariants:\n  - espressione: \\lnot P \\lor (R \\land (\\lnot Q))\n    sol: 11110100\n  - espressione: \\lnot R \\lor (P \\land (\\lnot Q))\n    sol: 10101110\n  - espressione: \\lnot P \\lor (Q \\land (\\lnot R))\n    sol: 11110010\n  - espressione: \\lnot R \\lor (Q \\land (\\lnot P))\n    sol: 10111010\n---\n\nSiano $P$, $Q$, $R$ tre variabili booleane, ossia variabili che possono assumere solo uno dei due valori 1 (VERO) e 0 (FALSO). Ricordiamo che gli operatori booleani sono:\n\n- **not** $A$, che si indica con $\\lnot A$, vale VERO se A è FALSO, e FALSO se A è VERO;\n- $A$ **and** $B$, che si indica con $A\\land B$, vale VERO se sia A sia B sono VERO, e FALSO in tutti gli altri casi;\n- $A$ **or** $B$, che si indica con $A\\lor B$, vale FALSO se sia A sia B sono FALSO, e VERO in tutti gli altri casi. In assenza di parentesi l’ordine di valutazione degli operatori è quello sopra riportato (prima il not, poi l’and, infine l’or).\n\nSi consideri la seguente tabella di verità per le due variabili booleane $P$ e $Q$ e l'espressione logica $\\lnot P \\lor Q$:\n\n$$\n\\begin{array}{ll|c}\nP & Q &  \\lnot P  \\lor Q\\\\\n\\hline\n0 & 0 & 1 \\\\\n0 & 1 & 1 \\\\\n1 & 0 & 0 \\\\\n1 & 1 & 1 \\\\\n\\end{array}\n$$\n\nLa tabella di verità fornisce, in funzione dei valori di P e Q, i valori di verità dell'espressione logica, che possiamo rappresentare con una unica stringa di quattro caratteri zero o uno, in questo caso 1101 (leggendo dall'alto al basso i quattro valori di verità dell'espressione).\n\nConsiderate la seguente tabella di verità corrispondente all'espressione logica $\\js{espressione}$.\n\n$$\n\\begin{array}{lll|c}\nP & Q & R &  \\js{espressione}\\\\\n\\hline\n0 & 0 & 0 &  \\\\\n0 & 0 & 1 &  \\\\\n0 & 1 & 0 &  \\\\\n0 & 1 & 1 &  \\\\\n1 & 0 & 0 &  \\\\\n1 & 0 & 1 &  \\\\\n1 & 1 & 0 &  \\\\\n1 & 1 & 1 &  \\\\\n\\end{array}\n$$\n\nQuale è la stringa, di otto caratteri zero o uno, che rappresenta l'espressione logica di questa tabella di verità (sempre leggendo dall'alto al basso)?\n\n?> {sol}\n","---\nvariants:\n  - iter: 9\n    sol: 1067\n    start: 1\n  - iter: 9\n    sol: 2089\n    start: 2\n  - iter: 8\n    sol: 546\n    start: 1\n  - iter: 8\n    sol: 1056\n    start: 2\n---\n\nDato il seguente programma:\n\n![](es6-{start}-{iter}.svg?s=2)\n\nCosa viene stampato al termine dell'esecuzione?\n\n?> {sol}\n","---\nvariants:\n  - base: 2\n    res: 5\n    sol: 7\n  - base: 2\n    res: 6\n    sol: 11\n  - base: 3\n    res: 5\n    sol: 8\n  - base: 3\n    res: 6\n    sol: 14\n---\n\nData la seguente funzione:\n\n![](es7-{base}.svg?s=2)\n\nQual è il valore minimo da passare ad `f` perché questa ritorni $\\js{res}$?\n\n?> {sol}\n","---\nvariants:\n  - i: 0\n    sol: 6\n  - i: 1\n    sol: 1\n  - i: 2\n    sol: 5\n  - i: 3\n    sol: 4\n---\n\nDato il seguente programma:\n\n![](es8-{i}.svg?s=2)\n\nQual è il valore dell'ultimo intero che viene stampato durante l'esecuzione di questo programma?\n\n?> {sol}\n","---\nvariants:\n  - i: 0\n    domanda: Qual è l'ultimo valore che viene stampato dal programma?\n    sol: 1\n  - i: 1\n    domanda: Qual è l'ultimo valore che viene stampato dal programma?\n    sol: 3\n  - i: 2\n    domanda: Qual è l'ultimo valore che viene stampato dal programma?\n    sol: 0\n  - i: 3\n    domanda: Quale valore viene stampato dal programma?\n    sol: 8\n---\n\nDato il seguente programma:\n\n![](es9-{i}.svg?s=2)\n\n{domanda}\n\n?> {sol}\n","---\nvariants:\n  - bound: 250\n    sol: 170\n    val: 1\n  - bound: 250\n    sol: 219\n    val: 2\n  - bound: 350\n    sol: 341\n    val: 1\n  - bound: 350\n    sol: 347\n    val: 2\n---\n\nDate le seguenti funzioni:\n\n![](es10-{bound}.svg?s=2)\n\nTenendo conto che la divisione restituisce un risultato intero (quindi, ad esempio, sia $4/2$ che $5/2$ restituiscono $2$), qual è il massimo $x$ tale per cui $\\mathrm{G}(x) = \\js{val}$?\n\n?> {sol}\n","---\nvariants:\n  - i: 0\n    num: terzo\n    sol: 4\n  - i: 1\n    num: terzo\n    sol: 2\n  - i: 2\n    num: quarto\n    sol: 9\n  - i: 3\n    num: terzo\n    sol: 7\n---\n\nDato il seguente programma:\n\n![](es11-{i}.svg?s=2)\n\nQual è il **{num}** valore che viene stampato dal programma durante la sua esecuzione?\n\n?> {sol}\n","---\nvariants:\n  - i: 0\n    sol: 14\n  - i: 1\n    sol: 16\n  - i: 2\n    sol: 15\n  - i: 3\n    sol: 17\n---\n\nIl seguente programma cerca, all'interno di un array `v` di `n` interi, il sottoarray (contiguo) che può essere partizionato in due sottoarray non vuoti tale per cui la somma della prima parte, meno la somma della seconda parte è massima. Il programma usa la costante `Infinity`, che è più grande di ogni numero intero (`integer`).\n\n![](es12-{i}.svg?s=2)\n\nTuttavia è presente un errore, in quale riga?\n\n?> {sol}\n","<Contest>\n\n## Sezione 1: Esercizi a carattere logico-matematico\n\n<Section>\n  <Problem points={[2, 0, 0]}><Logica2Pt01 /></Problem>\n  <Problem points={[2, 0, 0]}><Logica2Pt02 /></Problem>\n  <Problem points={[3, 0, 0]}><Logica3Pt03 /></Problem>\n  <Problem points={[3, 0, 0]}><Logica3Pt04 /></Problem>\n  <Problem points={[3, 0, 0]}><Logica3Pt05 /></Problem>\n</Section>\n\n## Sezione 2: Esercizi di programmazione\n\n<Section>\n  <Problem points={[2, 0, 0]}><Prog2Pt06 /></Problem>\n  <Problem points={[2, 0, 0]}><Prog2Pt07 /></Problem>\n  <Problem points={[2, 0, 0]}><Prog2Pt08 /></Problem>\n  <Problem points={[3, 0, 0]}><Prog3Pt09 /></Problem>\n  <Problem points={[3, 0, 0]}><Prog3Pt10 /></Problem>\n  <Problem points={[3, 0, 0]}><Prog3Pt11 /></Problem>\n  <Problem points={[3, 0, 0]}><Prog3Pt12 /></Problem>\n</Section>\n\n## Sezione 3: Esercizi a carattere algoritmico\n\n<Section>\n  <Problem points={[2, 0, 0]}><Algo2Pt13 /></Problem>\n  <Problem points={[2, 0, 0]}><Algo2Pt14 /></Problem>\n  <Problem points={[2, 0, 0]}><Algo2Pt15 /></Problem>\n  <Problem points={[2, 0, 0]}><Algo2Pt18 /></Problem>\n  <Problem points={[3, 0, 0]}><Algo3Pt16 /></Problem>\n  <Problem points={[3, 0, 0]}><Algo3Pt17 /></Problem>\n  <Problem points={[3, 0, 0]}><Algo3Pt19 /></Problem>\n  <Problem points={[3, 0, 0]}><Algo3Pt20 /></Problem>\n</Section>\n\n</Contest>\n","import { NoAuth } from \"@olinfo/quizms/student\";\n\nimport Contest from \"./contest/contest.mdx\";\n\nexport const metadata = {\n  title: \"Scolastiche 2020\",\n  description: \"Olimpiadi Italiane di Informatica 2020/2021 - Selezione scolastica\",\n};\n\nexport default function App() {\n  return (\n    <NoAuth\n      contestName=\"Olimpiadi di Informatica\"\n      contestLongName={metadata.description}\n      duration={90}>\n      <Contest />\n    </NoAuth>\n  );\n}\n"],"names":["_jsx","Equation","_jsxs","_components","tipo","time","A","B","C","D","Code","evento","treni","macchine","aerei","solomacchine","domanda","num","metadata","App","jsx","NoAuth","Contest"],"mappings":"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"}