{"version":3,"file":"f85256a1-page.js","sources":["../../../../src/scolastiche/2024/contest/A11-connetti-stati/question.md","../../../../src/scolastiche/2024/contest/A13-flippa-griglia/question.md","../../../../src/scolastiche/2024/contest/A19-max-sum/question.md","../../../../src/scolastiche/2024/contest/A4-sottrai-potenze/question.md","../../../../src/scolastiche/2024/contest/M1-scegli-intervalli/question.md","../../../../src/scolastiche/2024/contest/M2-percorso-griglia/question.md","../../../../src/scolastiche/2024/contest/M10-salta-potenze/question.md","../../../../src/scolastiche/2024/contest/P2-riempimento-array/question.md","../../../../src/scolastiche/2024/contest/P3-somma-binaria/question.md","../../../../src/scolastiche/2024/contest/P4-valori-distinti/question.md","../../../../src/scolastiche/2024/contest/contest.mdx","../../../../src/scolastiche/2024/header.md","../../../../src/scolastiche/2024/page.tsx"],"sourcesContent":["import variants from \"./variants.py\";\n\n\nA _Olinfolandia_ ci sono $\\js{n}$ Stati e ognuno di essi ha al suo interno $10$ città.\nValerio è stato incaricato di costruire delle strade **bidirezionali** per connettere le città: può costruire una strada che connette due città dello stesso Stato con costo $1$ e città di Stati diversi con costo $2$.\nPer esempio, se ci fossero $3$ Stati con $2$ città ciascuno, si potrebbero collegare come in figura. Questo piano costa $2 \\times 4 + 1 \\times 2 = 10$:\n\n![esempio1](ex1.svg)\n\nIn questo esempio, ci sono anche altri piani validi, ciascuno con un costo di $7$ o più.\n\nRicordando che a _Olinfolandia_ ci sono $\\js{n}$ Stati con $10$ città, se Valerio costruisce strade **bidirezionali**, quanto deve spendere al minimo per fare in modo che da ogni città si possa raggiungere ogni altra città?\n\n?> {ans1}\n\n> Dato che le strade all'interno dello stesso Stato costano poco, conviene intanto collegare le città all'interno dello stesso Stato. Per ogni Stato servono $9$ strade. Ad esempio, colleghiamo la città $1$ con la città $2$, la città $2$ con la città $3$, ..., la città $9$ con la città $10$. Il costo parziale fino a questo punto è quindi $\\js{n} \\times 9 = \\js{n*9}$.\n> Adesso dobbiamo anche connettere gli Stati tra di loro, e servono altre $\\js{n-1}$ strade di costo $2$: ad esempio, se colleghiamo l'ultima città di ogni Stato (tranne l'ultimo) con la prima di quello successivo. Il costo totale è quindi $\\js{2*(n-1)} + \\js{n*9} = \\js{2*(n-1) + n*9}$.\n>\n> ![5.1](5-1.asy)\n\n\n---\n\nMettiamo ora che le strade che Valerio costruisce siano **unidirezionali**, come in questo esempio:\n\n![esempio2](ex2.svg)\n\nQuesto piano costa $3 \\times 2 + 2 \\times 1 = 8$, e consente di poter andare da ogni città ad ogni altra rispettando i versi delle strade.\nCome prima, ci sono anche altri piani validi, ciascuno con un costo di $6$ o più.\n\nRicordando che a _Olinfolandia_ ci sono $\\js{n}$ Stati con $10$ città, se Valerio costruisce strade **unidirezionali**, quanto deve spendere al minimo per fare in modo che da ogni città si possa raggiungere ogni altra città?\n\n?> {ans2}\n\n> Nella versione precedente del problema, abbiamo formato una linea composta da tutte le $\\js{n*10}$ città. Assegniamo lo stesso verso a tutte le strade della linea, in modo che dalla prima città si possa raggiungere l'ultima. Ma in questo modo dall'ultima città non se ne può raggiungere nessun'altra! Per rimediare, basta creare una nuova strada che collega l'ultima città alla prima, pagando un costo aggiuntivo di $2$, per un totale di $\\js{2*n + n*9}$.\n>\n> ![5.2](5-2.asy)\n","import variants from \"./variants.py\";\n\nMentre andava a scuola, Francesco è inciampato su una griglia magica 4x4 formata da caselle bianche e nere, rappresentata in figura.\n\n![Immagine](griglia1.asy?v=variants.py)\n\nProvando a giocarci si è accorto che può invertire tutte le celle in una riga, facendo sì che le caselle nere diventino bianche e viceversa. Ad esempio, se applica l'operazione alla terza riga ottiene la griglia seguente.\n\n![Immagine](immagine1_fliprow2.asy?v=variants.py)\n\nQuali delle seguenti griglie può ottenere se applica questa operazione in modo opportuno? Inserire la lista di griglie che può ottenere, in ordine e non separate da spazi. Per esempio se può ottenere le griglie $2$, $4$ e $5$, inserire $245$.\n\n![Immagine](griglie2.asy?v=variants.py)\n\n?> {ans1}\n\n> Le righe non interagiscono tra loro, quindi posso controllare ogni riga singolarmente.\n> Notiamo che effettuare due operazioni sulla stessa riga è inutile. Quindi, su una riga, posso scegliere se effettuare l'operazione una sola volta o zero volte.\n> Dunque ogni riga può avere due stati possibili (quello iniziale, e quello in cui tutte le caselle sono state invertite).\n> Per ogni possibile griglia che vorrei ottenere, verifico se ogni riga è in uno di quei due stati: se sì la includo nella risposta, altrimenti non la includo.\n> Le griglie ottenibili sono $\\js{String(ans1).split('').join(', ')}$ e quindi la risposta è $\\js{ans1}$.\n>\n> ![6.1](6-1.asy)\n\n---\n\nIl giorno dopo Francesco si accorge che può anche invertire una colonna della griglia. Sapendo quindi che può invertire sia righe che colonne, quali delle seguenti griglie può ottenere? Inserire la risposta nello stesso formato della domanda precedente.\n\n![Immagine](griglie2.asy?v=variants.py)\n\n?> {ans2}\n\n> Le uniche mosse che possono modificare la prima riga sono:\n> - invertire la prima riga;\n> - invertire le colonne.\n> \n> Ad esempio, suppongo di non invertire la prima riga. Allora, guardando la griglia finale, posso capire quali colonne vanno invertite (quelle che non corrispondono nella casella della prima riga).\n> A questo punto ho determinato tutte le mosse sulle colonne, e rimangono solo le mosse sulle altre righe, quindi mi sono ricondotto alla versione facile del problema.\n> Quindi una possibile soluzione è: provo a invertire o non invertire la prima riga, quindi determino le mosse sulle colonne, e infine determino le mosse sulle righe.\n> \n> In realtà, non è necessario controllare entrambi i casi per la mossa sulla prima riga. Se esiste una soluzione che non inverte la prima riga, esiste anche una soluzione che la inverte (e viceversa): basta fare una mossa in più su ogni riga e una su ogni colonna, e queste mosse si annullano tra loro, lasciando la griglia invariata. Possiamo qunidi assumere di non invertire la prima riga.\n>\n> Seguendo questo procedimento, possiamo capire che le griglie ottenibili sono $\\js{String(ans2).split('').join(', ')}$ e quindi la risposta è $\\js{ans2}$.\n>\n> ![6.2](6-2.asy)\n","import variants from \"./variants.py\";\n\nElia è nel suo negozio di quaderni preferito. Davanti a sé ha una fila di quaderni, e ha assegnato ad ognuno di essi un valore in base a quanto gli piace. Vuole comprare alcuni di essi, ma ha deciso di non comprare $2$ quaderni che si trovano vicini.\nQual è la massima somma dei valori dei quaderni che può comprare?\nPer esempio se i valori fossero questi:\n\n![Immagine](esempio.asy?v=variants.py)\n\nla somma massima ottenibile sarebbe $16$.\n\nRispondi considerando che questa è la lista dei valori dei quaderni, in ordine da sinistra a destra.\n\n![Immagine](array1.asy?v=variants.py)\n\n?> {ans1}\n\n> Non ha senso comprare quaderni di valore $0$ (se non li compro, ottengo una soluzione con la stessa somma).\n> Quindi guardo gli intervalli massimali contenenti solo quaderni di valore $1$, e da ogni intervallo mi conviene prendere il primo quaderno, il terzo, il quinto, e così via.\n> Se ho un intervallo lungo $x$, posso prendere metà dei quaderni, arrotondata per eccesso. Adesso basta sommare il numero di quaderni che posso prendere su tutti gli intervalli.\n> \n> In alternativa, anche la strategia \"guardo i quaderni da sinistra a destra, e se ne trovo uno di valore $1$ che posso prendere lo prendo\" funziona.\n> In entrambi i modi si può calcolare la risposta corretta che è quindi $\\js{ans1}$.\n>\n> ![7.1](7-1.asy)\n\n---\n\nQuale sarebbe invece la massima somma se i valori fossero questi?\n\n![Immagine](array2.asy?v=variants.py)\n\n?> {ans2}\n\n> Qui non sembra esserci una strategia semplice (senza memoria) per prendere i quaderni. Ad esempio, \"guardo da sinistra a destra e prendo un quaderno se posso e ha valore positivo\" non funziona.\n> Neanche \"guardo i quaderni partendo da quello di valore massimo e se posso prenderne uno lo prendo\" funziona!\n> Ad esempio, se ho quaderni di valore $[2, 1, 1, 2]$, conviene saltare il terzo quaderno e prendere il primo e il quarto. Se i valori sono $[1, 3, 1]$, conviene prendere solo il secondo quaderno. Se i valori sono $[2, 3, 2]$, conviene prendere il primo e il terzo quaderno.\n> Le possibilità diverse sembrano troppe!\n> \n> Per gestirle, possiamo provare a creare un algoritmo che in qualche modo considera tutti i modi possibili di prendere i quaderni. Ad esempio, posso calcolare $f(i) = $ _massima somma dei valori se guardo solo $i$ quaderni, dal primo fino all'$i$-esimo da sinistra_.\n> In questo modo, ho due casi:\n> - non prendo il quaderno in posizione $i$, quindi la risposta è $f(i-1)$ perché mi riconduco a guardare i quaderni fino alla posizione $i-1$;\n> - prendo il quaderno in posizione $i$, e a quel punto non posso più prendere quello in posizione $i-1$ ma mi riconduco a guardare quelli fino alla posizione $i-2$. Se i quaderni hanno valori $a_1, a_2, \\ldots, a_n$, la risposta sarebbe quindi $f(i - 2) + a_i$.\n> \n> Quindi posso calcolare tutti i valori di $f(i)$ da sinistra a destra usando $f(i) = \\max(f(i - 1), f(i - 2) + a_i)$, considerando che se $i \\leq 0$, $f(i) = 0$.\n> i valori di $f(i)$ per $i=1 \\ldots \\js{test2.length}$ che ottengo in questo modo sono questi (riportati per comodità sotto alla lista dei valori corrispondenti):\n>\n> ![Immagine](array3.asy?v=variants.py)\n> \n> e la risposta corretta è quindi $\\js{ans2}$!\n> Questo problema è un classico esempio di _programmazione dinamica_. Se vuoi approfondire l'argomento, queste sono alcune guide che potresti leggere:\n> \n> - [Guida per le selezioni territoriali - Capitolo 7 (italiano)](https://training.olinfo.it/bugatti.pdf#page=66)\n> - [Dispense di programmazione dinamica (italiano)](https://wiki.olinfo.it/extra/unimi/dinamica.pdf)\n> - [Competitve Programmer's Handbook - Capitolo 7 (inglese)](https://training.olinfo.it/cph.pdf#page=75)\n> - [USACO Guide - Introduction to DP (inglese)](https://usaco.guide/gold/intro-dp)\n>\n> ![7.2](7-2.asy)\n","import variants from \"./variants.py\";\n\nHai due numeri $a$ e $b$, puoi fare due tipi di operazioni:\n- diminuire $a$ di $10^k$, per un qualche $k$ intero non negativo.\n- diminuire $a$ di $b$.\n\nSe $a = \\js{a1}$ e $b = \\js{b1}$, quante mosse servono al minimo per rendere $a = 0$?\n\n?> {ans1}\n\n> Per la proprietà commutativa, l'ordine delle sottrazioni non importa, quindi possiamo prima sottrarre $\\js{b1}$ e poi sottrarre $10^k$ (diminuendo quindi una cifra di $1$: non conviene mai fare riporto).\n> Proviamo a sottrarre $\\js{b1}$ un po' di volte ($0, 1, 2, \\ldots$), e il numero di mosse rimanenti è la somma delle cifre del numero sulla lavagna.\n> Sottraendo $\\js{b1}$ il numero giusto di volte, la somma delle cifre diventa particolarmente piccola, per un numero totale di $\\js{ans1}$ operazioni.\n>\n> ![4.1](4-1.asy)\n\n---\n\nSe invece $a = \\js{a2}$ e $b = \\js{b2}$, quante mosse servono al minimo per rendere $a = 0$?\n\n?> {ans2}\n\n> Qui $b$ è piccolo, quindi provare a sottrarre $b$ finché il numero sulla lavagna non è negativo è troppo lungo.\n> Ma possiamo notare che, dopo aver trovato una sequenza di $\\js{ans2}$ operazioni che porta il totale a zero, non ha senso sottrarre $\\js{b2}$ più di $\\js{ans2}$ volte, e questo accorcia i conti.\n>\n> ![4.2](4-2.asy)\n","import variants from \"./variants.py\";\n\nHai davanti a te una linea di coordinate da $0$ a $\\js{l}$.\n\n![Immagine](number_line.asy?v=variants.py)\n\nVuoi disegnare $2$ segmenti lunghi $1$ (a coordinate intere) su questa linea, in modo che non si sovrappongano (ma possono toccarsi alle estremità).\nAd esempio questo è un modo valido di scegliere i segmenti.\n\n![Immagine](segments1.asy?v=variants.py)\n\nIn quanti modi puoi farlo?\n\n- [x] $\\js{correct1}$\n- [ ] $\\js{wrong1[0]}$\n- [ ] $\\js{wrong1[1]}$\n- [ ] $\\js{wrong1[2]}$\n- [ ] $\\js{wrong1[3]}$\n\n> Chiamiamo intervallo destro l'intervallo che si toverà a destra in una possibile disposizione e intervallo sinistro quello che si \n> troverà a sinistra. Fissando l'intervallo sinistro tra la coordinata $0$ e la $1$ avremmo $\\js{l - 1}$ modi di fissare quello destro,\n> fissando l'intervallo sinistro tra la coordinata $1$ e la $2$ avremmo $\\js{l - 2}$ modi di fissare quello destro e così via. La risposta\n> sarà dunque la sommatoria dei numeri tra $\\js{l - 1}$ e $0$ che si può calcolare grazie alla formula $(\\js{l - 1} \\cdot \\js{l})/2 = \\js{correct1}$.\n>\n> ![1.1](1-1.asy)\n\n---\n\nIn quanti modi puoi disegnare $2$ segmenti lunghi $2$ (a coordinate intere) su questa linea, in modo che non si sovrappongano (ma possono toccarsi alle estremità)?\nAd esempio questo è un modo **non** valido dato che i segmenti si sovrappongono.\n\n![Immagine](segments2.asy?v=variants.py)\n\n- [x] $\\js{correct2}$\n- [ ] $\\js{wrong2[0]}$\n- [ ] $\\js{wrong2[1]}$\n- [ ] $\\js{wrong2[2]}$\n- [ ] $\\js{wrong2[3]}$\n\n> Usiamo lo stesso ragionamento di prima: fissando l'intervallo sinistro tra la coordinata $0$ e la $2$ avremmo $\\js{l - 3}$ modi di fissare quello destro,\n> fissando l'intervallo sinistro tra la coordinata $1$ e la $3$ avremmo $\\js{l - 4}$ modi di fissare quello destro e così via.  La risposta\n> sarà dunque la sommatoria dei numeri tra $\\js{l - 3}$ e $0$ che si può calcolare grazie alla formula $(\\js{l - 3} \\cdot \\js{l - 2})/2 = \\js{correct2}$.\n> \n> ![1.2](1-2.asy)\n","import variants from \"./variants.py\"\n\nValerio sceglie tre punti **distinti** $A$, $B$ e $C$ su una griglia $\\js{n}$ x $\\js{n}$.\nDavide deve scegliere il percorso più corto possibile che parte dal punto $A$, attraversa il punto $B$ e termina nel punto $C$, composto solo da righe orizzontali e verticali.\n\nAd esempio, questo è uno dei percorsi più brevi (lungo $10$ unità) che potrebbe scegliere Davide su una griglia $5$x$5$, dati i punti $A$, $B$ e $C$:\n\n![Esempio](example1.asy)\n\nValerio è malvagio, e sceglie i punti $A$, $B$ e $C$ per rendere il percorso il più lungo possibile.\nQual'è la lunghezza del percorso più lungo che potrebbe dover scegliere Davide su una griglia $\\js{n}$ x $\\js{n}$?\n\n- [x] $\\js{correct1}$\n- [ ] $\\js{wrong1[0]}$\n- [ ] $\\js{wrong1[1]}$\n- [ ] $\\js{wrong1[2]}$\n- [ ] $\\js{wrong1[3]}$\n\n> Valerio vorrebbe rendere sia la distanza $A \\rightarrow B$ sia la distanza $B \\rightarrow C$ uguali al massimo possibile, cioè $\\js{2*n}$ (mettendo $A$ e $B$ opposti, $B$ e $C$ opposti). Ma questo non è possibile perché $A$ e $C$ non possono coincidere.\n> Tuttavia, Valerio può rendere la prima distanza $\\js{2*n}$ e la seconda distanza $\\js{2*n-1}$, scegliendo $A = (0, 0)$, $B = (\\js{n}, \\js{n})$, $C = (0, 1)$. Quindi la risposta corretta è $\\js{correct1}$.\n>\n> ![2.1](2-1.asy)\n\n---\n\nValerio ora permette a Davide di scegliere l'ordine in cui attraversare i punti, che lo sceglie in modo che il percorso risultante sia il più corto possibile.\n\nAd esempio, sulla griglia precedente, questo è uno dei percorsi più brevi (lungo $9$ unità) che potrebbe scegliere Davide:\n\n![Esempio](example2.asy)\n\nQual è la lunghezza del percorso più lungo che potrebbe dover scegliere Davide su una griglia $\\js{n}$ x $\\js{n}$, scegliendo in modo ottimale l'ordine in cui attraversare i punti?\n\n\n- [x] $\\js{correct2}$\n- [ ] $\\js{wrong2[0]}$\n- [ ] $\\js{wrong2[1]}$\n- [ ] $\\js{wrong2[2]}$\n- [ ] $\\js{wrong2[3]}$\n\n> A Valerio conviene mettere i punti sul bordo. In questo modo, Davide gira intorno al bordo, che è composto da tre sottopercorsi $A \\rightarrow B$, $B \\rightarrow C$, $C \\rightarrow A$, di lunghezza totale uguale al perimetro del quadrato, cioè $\\js{4*n}$.\n> Per visitare tutti e tre i punti, a Davide basta visitare due di questi tre sottopercorsi, in particolare i due più corti.\n> Quindi Valerio vuole massimizzare la somma delle lunghezze dei due sottopercorsi più corti, cioè vuole minimizzare la lunghezza del sottopercorso più lungo, che però è lungo almeno un terzo del perimetro. Esiste un modo per Valerio per fare sì che tutti\n> e tre i sottopercorsi siano lunghi uguali visto che $\\js{n}$ è multiplo di 3, dunque la lunghezza finale è $\\js{correct2}$.\n>\n> ![2.2](2-2.asy)\n","import variants from \"./variants.py\";\n\n_Carlo la cavalletta_ ama saltare sulla retta dei numeri interi. Inizialmente si\ntrova in $0$. Successivamente, per ogni $k$ =$0, 1, 2, 3, \\ldots, \\js{moves}$ sceglie\nse saltare in avanti di $2^k$ unità, saltare indietro di $2^k$ unità oppure stare fermo.\nIn quanti interi $x$ tali che $\\js{low} \\le x \\le \\js{hi}$ può trovarsi **alla fine** di questo processo?\n**Attenzione:** prima di finire, Carlo può anche trovarsi in posizioni $x$ maggiori di $\\js{hi}$ o minori di $\\js{low}$.\n\n- [x] $\\js{correct1}$\n- [ ] $\\js{wrong1[0]}$\n- [ ] $\\js{wrong1[1]}$\n- [ ] $\\js{wrong1[2]}$\n- [ ] $\\js{wrong1[3]}$\n\n> - All'inizio, Carlo può trovarsi solo nell'intervallo $[0, 0]$ contenente solo il punto $0$.\n> - Dopo la mossa con $k = 0$, Carlo può spostarsi a sinistra di $1$ (e andare nell'intervallo $[-1, -1]$), rimanere fermo (quindi nell'intervallo $[0, 0]$) o spostarsi a destra di $1$ (nell'intervallo $[1, 1]$). Unendo tutti questi intervalli, ottengo che dopo la prima mossa Carlo si può trovare in qualsiasi coordinata intera in $[-1, 1]$.\n> - Alla mossa con $k = 1$, gli intervalli da unire sono $[-3, -1]$, $[-1, 1]$, $[1, 3]$, quindi Carlo può raggiungere tutte le coordinate intere in $[-3, 3]$.\n> - Continuando così, dimostro che alla fine Carlo si può trovare in qualsiasi punto in $[-2^{\\js{moves}+1}+1, 2^{\\js{moves}+1}-1]$. In particolare, questo intervallo comprende tutti i punti interi in $[\\js{low}, \\js{hi}]$, che sono $\\js{hi} - (\\js{low}) + 1 = \\js{correct1}$.\n>\n> ![3.1](3-1.asy)\n\n---\n\nSe invece Carlo non potesse mai stare fermo, quanti ne potrebbe raggiungere?\n\n\n- [x] $\\js{correct2}$\n- [ ] $\\js{wrong2[0]}$\n- [ ] $\\js{wrong2[1]}$\n- [ ] $\\js{wrong2[2]}$\n- [ ] $\\js{wrong2[3]}$\n\n> - All'inizio, Carlo può trovarsi solo nell'intervallo $[0, 0]$ contenente solo il punto $0$.\n> - Dopo la mossa con $k = 0$, Carlo può spostarsi a sinistra di $1$ (e andare nell'intervallo $[-1, -1]$) o spostarsi a destra di $1$ (nell'intervallo $[1, 1]$). Unendo tutti questi intervalli, ottengo che dopo la prima mossa Carlo si può trovare in qualsiasi coordinata dispari in $[-1, 1]$. Dato che dalla mossa con $k=1$ in poi Carlo può muoversi solo di un numero pari di unità, da ora in poi in ogni intervallo considero solo le coordinate intere dispari.\n> - Alla mossa con $k = 1$, gli intervalli da unire sono $[-3, -1]$, $[1, 3]$, quindi Carlo può raggiungere tutte le coordinate dispari in $[-3, 3]$.\n> - Continuando così, dimostro che alla fine Carlo si può trovare in qualsiasi punto dispari in $[-2^{\\js{moves}+1}+1, 2^{\\js{moves}+1}-1]$. In particolare, questo intervallo comprende tutti i punti dispari in $[\\js{low}, \\js{hi}]$, che sono $\\js{correct2}$.\n>\n> ![3.2](3-2.asy)\n","import variants from \"./variants.py\";\n\nConsidera la seguente funzione, che prende come parametri un intero **positivo** `n`, e restituisce un intero:\n\n```srs\nfunction f(n: integer) -> integer\n    variable arr: integer[]\n    variable i: integer\n    variable sum: integer\n    for i in [1...n) do\n        arr[i] <- 0\n    end for\n    i <- 0\n    while i < n do\n        arr[i] <- i\n        i <- i + 2\n    end while\n    i <- 0\n    while i < n do\n        arr[i] <- i\n        i <- i + 3\n    end while\n    for i in [1...n) do\n        arr[i] <- max(arr[i-1], arr[i])\n    end for\n    sum <- 0\n    for i in [0...n) do\n        sum <- sum + i - arr[i]\n    end for\n    return sum\nend function\n```\n\nCosa viene restituito da `f({n1})`?\n\n- [x] $\\js{correct1}$\n- [ ] $\\js{wrong1[0]}$\n- [ ] $\\js{wrong1[1]}$\n- [ ] $\\js{wrong1[2]}$\n- [ ] $\\js{wrong1[3]}$\n\n> Questo primo quesito si può risolvere anche eseguendo il programma a mano, e calcolando quindi il valore di `arr`, che si può osservare conterrà, in ogni posizione $i$, il massimo multiplo di $2$ o di $3$ minore o uguale di $i$.\n>\n> ![8.1](8-1.asy)\n\n---\n\nCosa viene restituito da `f({n2})`?\n\n- [x] $\\js{correct2}$\n- [ ] $\\js{wrong2[0]}$\n- [ ] $\\js{wrong2[1]}$\n- [ ] $\\js{wrong2[2]}$\n- [ ] $\\js{wrong2[3]}$\n\n> Qui invece conviene accorgersi che `i - arr[i]` dipende solo dal resto di `i` quando viene diviso per $6$ (in particolare, fa $1$ se il resto è $1$ o $5$, $0$ altrimenti).\n> Quindi il problema chiede di contare gli interi in $[1, n]$ che danno resto $1$ o $5$ divisi per $6$: di questi numeri ce ne sono due ogni sei, e quindi dato che $\\js{n2}$ è multiplo di sei la risposta è $\\js{n2} \\times 2 / 6 = \\js{n2/3}$.\n>\n> ![8.2](8-2.asy)\n","import variants from \"./variants.py\";\n\nConsidera la seguente funzione, che prende come parametri due interi **positivi** `l`, `r`, e restituisce un intero:\n\n```srs\nfunction calcola(l: integer, r: integer) -> integer\n    variable a: integer[]\n    variable sum: integer\n\n    for i in [0...r) do\n        a[i] <- 0\n    end for\n\n    for i in [l...r) do\n        variable j: integer\n        j <- i\n        while j >= 1 do\n            a[j] <- 1\n            j <- j / 2\n        end while\n    end for\n\n    sum <- 0\n    for i in [0...r) do\n        sum <- sum + a[i]\n    end for\n    return sum\nend function\n```\n\nChe valore viene restituito da `calcola({l1}, {r1})`?\n\n- [x] $\\js{correct1}$\n- [ ] $\\js{wrong1[0]}$\n- [ ] $\\js{wrong1[1]}$\n- [ ] $\\js{wrong1[2]}$\n- [ ] $\\js{wrong1[3]}$\n\n> Questa versione del problema si può risolvere a mano, simulando l'esecuzione del codice su carta.\n>\n> ![9.1](9-1.asy)\n\n---\n\nChe valore viene restituito da `calcola({l2}, {r2})`?\n\n- [x] $\\js{correct2}$\n- [ ] $\\js{wrong2[0]}$\n- [ ] $\\js{wrong2[1]}$\n- [ ] $\\js{wrong2[2]}$\n- [ ] $\\js{wrong2[3]}$\n\n> Qui invece conviene capire cosa fa effettivamente il codice. Intanto, tutti i valori in $[l, r)$ diventano $1$ (prima che $j$ venga diviso per $2$).\n> Anche i valori in $[\\lfloor l/2 \\rfloor, \\lceil r/2 \\rceil)$ diventano $1$ (quando $j$ viene diviso per $2$ esattamente una volta).\n> Notiamo che $j$ viene diviso per $2$ poche volte ($O(\\log r)$). Quindi, continuando in questo modo, otteniamo pochi intervalli, che sono anche disgiunti, e possiamo calcolarne la lunghezza totale.\n>\n> ![9.2](9-2.asy)\n","import variants from \"./variants.py\";\n\nConsidera la seguente funzione, che prende come parametri un array di interi $a$ e un intero $n$ che indica la sua lunghezza.\n\n```srs\nfunction conta(a: integer[], n:integer) -> integer\n\tvariable ans: integer\n\tans <- 0\n\tfor i in [0...n-1) do\n\t\tif a[i] == a[i + 1] then\n\t\t\tans <- ans + 1\n\t\telse\n\t\t\tans <- ans + a[i + 1] - a[i]\n\t\tend if\n\tend for\n\treturn ans\nend function\n\n```\n\nChe valore viene restituito da `conta([{array1}], 10)`? (l'array $a$ è anche riportato sotto)\n\n![Immagine](immagine1.asy?v=variants.py)\n\n?> {ans1}\n\n> Questa versione del problema si può risolvere a mano, simulando l'esecuzione del codice su carta, e ottenendo la risposta $\\js{ans1}$.\n>\n> ![10.1](10-1.asy)\n\n---\n\nQuanti valori distinti può ritornare la funzione `conta` se $n$ vale $\\js{len2}$ e l'array $a$ è composto da $\\js{len2}$ valori tra $0$ e $9$?\n\n?> {ans2}\n\n> Qui invece conviene capire cosa fa effettivamente il codice.\n> Per ogni coppia di elementi adiacenti uguali, aggiungiamo $1$ alla risposta, e per ogni coppia di elementi adiacenti diversi aggiungiamo $a_i-a_{i-1}$.\n> Ma se due elementi $a_i$, $a_{i-1}$ sono uguali, la loro differenza è $0$, quindi se aggiungiamo $a_i-a_{i-1}$ per ogni coppia di elementi adiacenti (uguali oppure diversi) la risposta non cambia.\n> La somma è $(a_1-a_0) + (a_2-a_1) + \\ldots + (a_{n-1}-a_{n-2}) = a_{n-1}-a_0$ (tutti gli altri termini si semplificano).\n> Quindi `ans` dipende dal primo elemento, dall'ultimo elemento, e dal numero di coppie di elementi adiacenti uguali.\n> Il valore minimo di `ans` si ottiene mettendo $9$ all'inizio, $0$ alla fine, e nessuna coppia di elementi adiacenti uguali, ed è quindi $-9$.\n> Il valore massimo di `ans` si ottiene mettendo $0$ all'inizio, $9$ alla fine, e il numero massimo possibile di coppie adiacenti uguali, cioè $\\js{len2-2}$ (non possono essere $\\js{len2-1}$ perché gli estremi sono diversi), per un totale di $9 + \\js{len2-2} = \\js{len2+7}$.\n> Tutti i valori di `ans` intermedi si possono ottenere, quindi la risposta è $\\js{len2+7} + 9 + 1 = \\js{ans2}$.\n>\n> ![10.2](10-2.asy)\n","<Contest>\n\n## Sezione 1: Esercizi logico-algoritmici\n\n<Section>\n  <Problem points={[5, 1, 0]}><M1ScegliIntervalli /></Problem>\n  <Problem points={[5, 1, 0]}><M2PercorsoGriglia /></Problem>\n  <Problem points={[5, 1, 0]}><M10SaltaPotenze /></Problem>\n  <Problem points={[5, 0, 0]}><A4SottraiPotenze /></Problem>\n  <Problem points={[5, 0, 0]}><A11ConnettiStati /></Problem>\n  <Problem points={[5, 0, 0]}><A13FlippaGriglia /></Problem>\n  <Problem points={[5, 0, 0]}><A19MaxSum /></Problem>\n</Section>\n\n## Sezione 2: Esercizi di programmazione\n\n<Section>\n  <Problem points={[5, 1, 0]}><P2RiempimentoArray /></Problem>\n  <Problem points={[5, 1, 0]}><P3SommaBinaria /></Problem>\n  <Problem points={[5, 0, 0]}><P4ValoriDistinti /></Problem>\n</Section>\n\n</Contest>\n","Ciao! Ecco le informazioni essenziali sulla prova che stai per svolgere. Ti consigliamo di leggerle attentamente.\n\n## Regole di base\n\nTi è permesso:\n\n- avere a disposizione una calcolatrice -- va bene qualunque tipo di calcolatrice, comprese quelle grafiche e la calcolatrice di sistema dell'eventuale dispositivo elettronico che stai usando (PC o dispositivo mobile);\n- avere con te dei fogli bianchi (eventualmente a righe o quadretti);\n- avere con te del materiale di cancelleria (penne, matite, gomma, etc.);\n- andare in bagno in qualunque momento -- in tal caso, dovrai lasciare nell'aula dispositivi elettronici, il testo della prova, e altro materiale cartaceo;\n- comunicare con il docente sorvegliante in caso di problemi tecnici.\n\nNon ti è permesso:\n\n- navigare su internet, se non all'indirizzo del sito della prova;\n- comunicare con i tuoi compagni;\n- comunicare con il docente sorvegliante sul contenuto della prova;\n- diffondere il testo della prova, o parte di esso, prima delle 20:00 del giorno della prova (12 dicembre).\n\n## Formato della prova\n\nLa prova contiene _10 problemi_ da risolvere in _90 minuti_, ed è divisa in due parti:\n- sette problemi di **pensiero logico-algoritmico**, e\n- tre problemi di interpretazione di **procedimenti procedurali** come programmi a blocchi.\n\nIn entrambe le parti i problemi sono **in ordine casuale**, e quindi non in ordine di difficoltà.\nOgni problema comprende _due domande_, valutate separatamente.\nLa prima domanda è **sempre più semplice**, e può aiutare a rispondere alla seconda domanda (che in genere è da considerarsi difficile).\n\n## Punteggio\n\nLe domande possono essere a scelta multipla oppure a risposta aperta numerica.\nTutte le domande a _scelta multipla_ presentano 5 opzioni, di cui **solo una** è corretta. Il punteggio assegnato per tali domande è:\n\n- 5 punti per una risposta _corretta_;\n- 1 punto per una risposta _in bianco_;\n- 0 punti per una risposta _errata_.\n\nOgni _domanda aperta numerica_ richiede come risposta un numero intero (eventualmente negativo). Il punteggio assegnato per tali domande è:\n\n- 5 punti per una risposta _corretta_;\n- 0 punti per una risposta _errata_ o _in bianco_.\n\n## Quesiti di programmazione e pseudocodice\n\nI quesiti di programmazione presentano semplici programmi scritti in _pseudocodice_. Qui sotto puoi trovare un riassunto della sintassi dello pseudocodice, oppure [scarica la guida completa](/Pseudocodice.pdf) in PDF.\n\n![Riassunto guida pseudocodice](pseudocodice-cheatsheet.svg)\n","import { NoAuth } from \"@olinfo/quizms/student\";\n\nimport Contest from \"./contest/contest.mdx\";\nimport Header from \"./header.md\";\n\nexport const metadata = {\n  title: \"Olimpiadi di Informatica\",\n  description: \"Olimpiadi Italiane di Informatica 2024/2025 - Selezione scolastica\",\n};\n\nexport default function App() {\n  return (\n    <NoAuth\n      contestName=\"Olimpiadi di Informatica\"\n      contestLongName={metadata.description}\n      duration={90}>\n      <Header />\n      <Contest />\n    </NoAuth>\n  );\n}\n"],"names":["_jsx","_components","Equation","_jsxs","Code","metadata","App","jsxs","NoAuth","jsx","Header","Contest"],"mappings":"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"}