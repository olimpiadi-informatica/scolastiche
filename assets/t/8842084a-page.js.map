{"version":3,"file":"8842084a-page.js","sources":["../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/contest/s-1-pranzo-no-condizioni/toolbox.ts","../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/contest/s-1-pranzo-no-condizioni/visualizer.jsx","../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/contest/s-1-pranzo-no-condizioni/question.mdx","../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/contest/s-2-pranzo-cond-singola/toolbox.ts","../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/contest/s-2-pranzo-cond-singola/visualizer.jsx","../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/contest/s-2-pranzo-cond-singola/question.mdx","../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/contest/s-3-pranzo-cond-doppia/toolbox.ts","../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/contest/s-3-pranzo-cond-doppia/visualizer.jsx","../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/contest/s-3-pranzo-cond-doppia/question.mdx","../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/contest/s-4-pranzo-operazioni-bool/toolbox.ts","../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/contest/s-4-pranzo-operazioni-bool/visualizer.jsx","../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/contest/s-4-pranzo-operazioni-bool/question.mdx","../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/contest/contest.mdx","../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/header.md","../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/page.tsx"],"sourcesContent":["import type { ToolboxInfo } from \"blockly/core/utils/toolbox\";\n\nexport const toolbox: ToolboxInfo = {\n  kind: \"categoryToolbox\",\n  contents: [\n    {\n      kind: \"category\",\n      name: \"Cicli\",\n      categorystyle: \"loop_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_repeat_ext\",\n          inputs: {\n            TIMES: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n          },\n        },\n      ],\n    },\n  ],\n};\n","\"use client\";\n\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/tiptap.asy?w=66\";\nimport stoveOn from \"./asy/fornello-acceso.asy?w=120\";\nimport stoveBack from \"./asy/fornello-retro.asy?w=120\";\nimport stoveOff from \"./asy/fornello-spento.asy?w=120\";\n\nconst foods = import.meta.glob(\"./asy/cibo-*.asy\", {\n  eager: true,\n  import: \"default\",\n  query: { w: 120 },\n});\n\nexport default function Visualizer({ variables, state }) {\n  function position(x, cook) {\n    if (x === -1) return [1.4, 1.3];\n    if (cook) return [2.2, 1.5];\n    return [0.5 * x + 2.4, 1.3];\n  }\n\n  return (\n    <>\n      <Canvas scale={130}>\n        <Sprite src={bunny} alt=\"Tip-Tap\" x={1.6} y={0.9} follow />\n        <Sprite src={stoveBack} alt=\"Fornello\" x={2.2} y={1.5} />\n        {range(Math.max(state.pos - 1, 0), state.N).map((i) => {\n          const pos = position(i - state.pos, state.queue[i].endsWith(\" cotta\"));\n          return (\n            <Sprite\n              key={i}\n              src={foods[`./asy/cibo-${state.queue[i].split(\" \")[0]}.asy`]}\n              alt={state.queue[i]}\n              x={pos[0]}\n              y={pos[1]}\n            />\n          );\n        })}\n        <Sprite\n          src={\n            state.pos < state.N && state.queue[state.pos].endsWith(\" cotta\") ? stoveOn : stoveOff\n          }\n          alt=\"Fornello\"\n          x={2.2}\n          y={1.5}\n        />\n      </Canvas>\n      <Variables variables={{ ...variables, \"N (num. cibi)\": state.N }} />\n    </>\n  );\n}\n","import { toolbox } from \"./toolbox.ts\";\nimport initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s1.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\nimport { Hint } from \"~/utils/hint\";\n\n**Tip-Tap** deve preparare il pranzo ed ha allineato alcuni cibi che, uno per volta, vuole mangiare **dopo averli cotti.**\nHai a disposizione questi blocchi:\n\n- `N`: il numero totale di cibi allineati.\n- `prossimo cibo`: il prossimo cibo in fila da mangiare.\n- `cuoci` $x$: cuoci il cibo $x$.\n- `mangia` $x$: mangia il cibo $x$.\n- `termina`: smetti di mangiare e vai via dal pranzo.\n\nScrivi un programma che consenta a Tip-Tap di pranzare come più preferisce!\n\nTi basterà usare gli stessi tipi di blocchi visti nella lezione precedente: blocchi istruzione (rettangolari) e blocchi valore (stondati),\nche trovi nelle sezioni _\"Esecuzione\"_ e _\"Cicli\"_.\nAttenzione che alcuni blocchi _\"Esecuzione\"_ questa volta contengono uno spazio in cui puoi inserire un altro blocco valore,\nallo stesso modo di quando inserisci un blocco valore nel ciclo \"ripeti N volte\" per indicare quante volte ripetere.\n\nAttenzione inoltre che **non tutti i valori sono uguali:** il blocco `N` produce un valore numerico, mentre il blocco `prossimo cibo` produce\ncome valore un cibo. E i numeri non si possono cuocere e mangiare...\n\n<Hint>\n  Devi ripetutamente cuocere e poi mangiare tutti gli `N` cibi in fila. Come puoi tradurre questa frase in un programma?\n</Hint>\n\n<Blockly\n  toolbox={toolbox}\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Secondo questo programma, per ognuno degli $N$ cibi che Tip-Tap vuole mangiare, il protagonista\n> lo cuoce e poi lo mangia.\n\nPrima di passare alla prossima domanda, assicurati di aver risolto **tutti i livelli** di questa!\n\nSe l'hai risolta, dovresti vedere quattro _\"V\"_ verdi in alto a sinistra dopo la scritta **Livello**.","import type { ToolboxInfo } from \"blockly/core/utils/toolbox\";\n\nexport const toolbox: ToolboxInfo = {\n  kind: \"categoryToolbox\",\n  contents: [\n    {\n      kind: \"category\",\n      name: \"Logica\",\n      categorystyle: \"logic_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Cicli\",\n      categorystyle: \"loop_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_repeat_ext\",\n          inputs: {\n            TIMES: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n          },\n        },\n      ],\n    },\n  ],\n};\n","\"use client\";\n\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=66\";\nimport stoveOn from \"./asy/fornello-acceso.asy?w=120\";\nimport stoveBack from \"./asy/fornello-retro.asy?w=120\";\nimport stoveOff from \"./asy/fornello-spento.asy?w=120\";\n\nconst foods = import.meta.glob(\"./asy/cibo-*.asy\", {\n  eager: true,\n  import: \"default\",\n  query: { w: 120 },\n});\n\nexport default function Visualizer({ variables, state }) {\n  function position(x, cook) {\n    if (x === -1) return [1.4, 1.3];\n    if (cook) return [2.2, 1.5];\n    return [0.5 * x + 2.4, 1.3];\n  }\n\n  return (\n    <>\n      <Canvas scale={130}>\n        <Sprite src={bunny} alt=\"Tip-Tap\" x={1.6} y={0.9} follow />\n        <Sprite src={stoveBack} alt=\"Fornello\" x={2.2} y={1.5} />\n        {range(Math.max(state.pos - 1, 0), state.N).map((i) => {\n          const pos = position(i - state.pos, state.queue[i].endsWith(\" cotta\"));\n          return (\n            <Sprite\n              key={i}\n              src={foods[`./asy/cibo-${state.queue[i].split(\" \")[0]}.asy`]}\n              alt={state.queue[i]}\n              x={pos[0]}\n              y={pos[1]}\n            />\n          );\n        })}\n        <Sprite\n          src={\n            state.pos < state.N && state.queue[state.pos].endsWith(\" cotta\") ? stoveOn : stoveOff\n          }\n          alt=\"Fornello\"\n          x={2.2}\n          y={1.5}\n        />\n      </Canvas>\n      <Variables variables={{ ...variables, \"N (num. cibi)\": state.N }} />\n    </>\n  );\n}\n","import { toolbox } from \"./toolbox.ts\";\nimport initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s1.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\nimport { Hint } from \"~/utils/hint\";\n\nAnche **Bunny** è ora a pranzo e ha allineato alcuni cibi. Come Tip-Tap, anche lui cuoce le verdure; tuttavia, **non gli piace la frutta cotta.**\nHai a disposizione gli stessi blocchi di prima, più uno per capire se un cibo è frutta o verdura:\n\n- `N`: il numero totale di cibi allineati.\n- `prossimo cibo`: il prossimo cibo in fila da mangiare.\n- $x$ `è una verdura`: vero se il cibo $x$ è una verdura **(nuovo!)**.\n- `cuoci` $x$: cuoci il cibo $x$.\n- `mangia` $x$: mangia il cibo $x$.\n- `termina`: smetti di mangiare e vai via dal pranzo.\n\nScrivi un programma che consenta a Bunny di pranzare come più preferisce, cuocendo solo le verdure!\n\nNota che il blocco che controlla se un cibo è una verdura (sempre nella sezione _\"Esecuzione\"_) ha una forma diversa del solito, ad esagono allungato.\nNella programmazione a blocchi, questa è la forma dei _blocchi verità_, che producono un valore vero/falso! Ricapitolando i tipi di blocchi visti, ci sono:\n\n- **blocchi istruzione (rettangolari)**, usati per fare una qualche azione;\n- **blocchi valore (stondati)**, usati per produrre un valore (numerico o di altro tipo);\n- **blocchi verità (esagonali)**, usati per produrre un valore di verità (vero o falso).\n\nTutti i blocchi possono poi contenere uno o più spazi di una qualunque forma (rettangolare, stondata o esagonale). Per esempio, i blocchi `è una verdura`, `cuoci` e\n`mangia` hanno un singolo spazio stondato. Invece, il blocco \"ripeti N volte\" ha sia uno spazio stondato (per indicare il numero di ripetizioni) che uno spazio rettangolare\n(per indicare cosa ripetere).\n\nPuoi anche notare che ora è comparsa una nuova sezione, _\"Logica\"_! Per ora, in questa sezione trovi solo il blocco \"se ... fai\". Questo è un blocco istruzione detto\n_condizionale_, che ha uno spazio esagonale (per indicare una condizione) e uno spazio rettangolare (per indicare alcune azioni). Il blocco farà quindi le azioni\nindicate **solo se** la condizione risulta vera.\n\n<Hint>\n  Devi ripetutamente mangiare tutti gli `N` cibi in fila, cuocendoli prima solo se sono verdure. Come puoi tradurre questa frase in un programma?\n</Hint>\n\n<Blockly\n  toolbox={toolbox}\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Secondo questo programma, per ognuno degli $N$ cibi che Bunny vuole mangiare, il protagonista\n> controlla se il prossimo cibo è una verdura, e in caso affermativo la cuoce prima di mangiarla.\n> A questo punto mangia il prossimo cibo (che sia verdura o frutta), che sarà di suo gradimento:\n> verdura cotta o frutta cruda.\n\nPrima di passare alla prossima domanda, assicurati di aver risolto **tutti i livelli** di questa!","import type { ToolboxInfo } from \"blockly/core/utils/toolbox\";\n\nexport const toolbox: ToolboxInfo = {\n  kind: \"categoryToolbox\",\n  contents: [\n    {\n      kind: \"category\",\n      name: \"Logica\",\n      categorystyle: \"logic_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n          extraState: {\n            hasElse: \"true\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Cicli\",\n      categorystyle: \"loop_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_repeat_ext\",\n          inputs: {\n            TIMES: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n          },\n        },\n        {\n          kind: \"block\",\n          type: \"controls_whileUntil\",\n        },\n      ],\n    },\n  ],\n};\n","\"use client\";\n\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/allie.asy?w=66\";\nimport stoveOn from \"./asy/fornello-acceso.asy?w=120\";\nimport stoveBack from \"./asy/fornello-retro.asy?w=120\";\nimport stoveOff from \"./asy/fornello-spento.asy?w=120\";\n\nconst foods = import.meta.glob(\"./asy/cibo-*.asy\", {\n  eager: true,\n  import: \"default\",\n  query: { w: 120 },\n});\n\nexport default function Visualizer({ variables, state }) {\n  function position(x, cook) {\n    if (x === -1) return state.trash ? [0.5, 1.7] : [1.4, 1.3];\n    if (cook) return [2.2, 1.5];\n    return [0.5 * x + 2.4, 1.3];\n  }\n\n  return (\n    <>\n      <Canvas scale={130}>\n        <Sprite src={bunny} alt=\"Tip-Tap\" x={1.6} y={0.9} follow />\n        <Sprite src={stoveBack} alt=\"Fornello\" x={2.2} y={1.5} />\n        {range(Math.max(state.pos - 1, 0), state.N).map((i) => {\n          const pos = position(i - state.pos, state.queue[i].endsWith(\" cotta\"));\n          return (\n            <Sprite\n              key={i}\n              src={foods[`./asy/cibo-${state.queue[i].split(\" \")[0]}.asy`]}\n              alt={state.queue[i]}\n              x={pos[0]}\n              y={pos[1]}\n            />\n          );\n        })}\n        <Sprite\n          src={\n            state.pos < state.N && state.queue[state.pos].endsWith(\" cotta\") ? stoveOn : stoveOff\n          }\n          alt=\"Fornello\"\n          x={2.2}\n          y={1.5}\n        />\n      </Canvas>\n      <Variables variables={{ ...variables, \"N (num. cibi)\": state.N }} />\n    </>\n  );\n}\n","import { toolbox } from \"./toolbox.ts\";\nimport initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s1.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\nimport { Hint } from \"~/utils/hint\";\n\nAnche **Allie** è ora a pranzo e ha allineato alcuni cibi. Come gli altri, anche lei cuoce le verdure; tuttavia, non gli piace affatto la frutta, né cruda né cotta.\nNon solo: detesta talmente il colore giallo, che appena vede qualcosa di giallo perde l'appetito e non vuole più mangiare!\nHai a disposizione gli stessi blocchi di prima, più uno per controllare se un cibo è giallo e un'altro per scartare il cibo:\n\n- `N`: il numero totale di cibi allineati.\n- `prossimo cibo`: il prossimo cibo in fila da mangiare.\n- $x$ `è una verdura`: vero se il cibo $x$ è una verdura.\n- $x$ `è giallo`: vero se il cibo $x$ è giallo **(nuovo!)**.\n- `cuoci` $x$: cuoci il cibo $x$.\n- `mangia` $x$: mangia il cibo $x$.\n- `butta` $x$: butta via il cibo $x$ **(nuovo!)**.\n- `termina`: smetti di mangiare e vai via dal pranzo.\n\nScrivi un programma che consenta a Allie di pranzare come più preferisce, senza perdere tempo a cuocere cose prima di buttarle!\n\nStavolta nella sezione _\"Logica\"_ c'è un blocco istruzione in più: \"se ... fai ... altrimenti\". Anche questo è detto _condizionale_ e funziona come il \"se ... fai\",\nperò ha uno spazio rettangolare in più per indicare alcune azioni da svolgere quando la condizione (esagonale) inserita è falsa.\n\nInoltre, anche nella sezione _\"Cicli\"_ c'è un blocco istruzione in più: \"ripeti mentre/fino a che\", che ha uno spazio esagonale (per indicare una condizione) e uno spazio rettangolare (per indicare alcune azioni).\nNella forma di \"ripeti mentre\", ripete le azioni più volte mentre che la condizione è vera, fermandosi appena la condizione diventa falsa.\nDopo averlo trascinato, puoi anche cliccare sul triangolino dopo \"mentre\" per trasformarlo in \"ripeti fino a che\": in questo caso, ripete le azioni mentre che la condizione è falsa, fermandosi appena diventa vera.\n\n<Hint>\n  Devi ripetutamente considerare i cibi in fila, cuocendoli e mangiandoli se sono verdure, e buttandoli se sono frutta, fermandoti appena arriva un cibo giallo. Come puoi tradurre questa frase in un programma?\n</Hint>\n\n<Blockly\n  toolbox={toolbox}\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Secondo questo programma, Allie continua a mangiare cibi fino a che non vede il colore giallo.\n> Per ciascun cibo che incontra fino a quel momento, la protagonista\n> controlla se il prossimo cibo è una verdura, e in caso affermativo la cuoce e poi la mangia.\n> Altrimenti si tratta di frutta, e quindi la butta.\n\nPrima di passare alla prossima domanda, assicurati di aver risolto **tutti i livelli** di questa!","import type { ToolboxInfo } from \"blockly/core/utils/toolbox\";\n\nexport const toolbox: ToolboxInfo = {\n  kind: \"categoryToolbox\",\n  contents: [\n    {\n      kind: \"category\",\n      name: \"Logica\",\n      categorystyle: \"logic_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"logic_operation\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_negate\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n          extraState: {\n            hasElse: \"true\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Cicli\",\n      categorystyle: \"loop_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_repeat_ext\",\n          inputs: {\n            TIMES: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n          },\n        },\n        {\n          kind: \"block\",\n          type: \"controls_whileUntil\",\n        },\n      ],\n    },\n  ],\n};\n","\"use client\";\n\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/carol.asy?w=66\";\nimport stoveOn from \"./asy/fornello-acceso.asy?w=120\";\nimport stoveBack from \"./asy/fornello-retro.asy?w=120\";\nimport stoveOff from \"./asy/fornello-spento.asy?w=120\";\n\nconst foods = import.meta.glob(\"./asy/cibo-*.asy\", {\n  eager: true,\n  import: \"default\",\n  query: { w: 120 },\n});\n\nexport default function Visualizer({ variables, state }) {\n  function position(x, cook) {\n    if (x === -1) return state.trash ? [0.5, 1.7] : [1.4, 1.3];\n    if (cook) return [2.2, 1.5];\n    return [0.5 * x + 2.4, 1.3];\n  }\n\n  return (\n    <>\n      <Canvas scale={130}>\n        <Sprite src={bunny} alt=\"Tip-Tap\" x={1.6} y={0.9} follow />\n        <Sprite src={stoveBack} alt=\"Fornello\" x={2.2} y={1.5} />\n        {range(Math.max(state.pos - 1, 0), state.N).map((i) => {\n          const pos = position(i - state.pos, state.queue[i].endsWith(\" cotta\"));\n          return (\n            <Sprite\n              key={i}\n              src={foods[`./asy/cibo-${state.queue[i].split(\" \")[0]}.asy`]}\n              alt={state.queue[i]}\n              x={pos[0]}\n              y={pos[1]}\n            />\n          );\n        })}\n        <Sprite\n          src={\n            state.pos < state.N && state.queue[state.pos].endsWith(\" cotta\") ? stoveOn : stoveOff\n          }\n          alt=\"Fornello\"\n          x={2.2}\n          y={1.5}\n        />\n      </Canvas>\n      <Variables variables={{ ...variables, \"N (num. cibi)\": state.N }} />\n    </>\n  );\n}\n","import { toolbox } from \"./toolbox.ts\";\nimport initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s1.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\nimport { Hint } from \"~/utils/hint\";\n\nAnche **Carol** è ora a pranzo e ha allineato alcuni cibi. Come Bunny, anche lei mangia di tutto e preferisce mangiare la frutta cruda.\nTuttavia non cuoce tutte le verdure: **cuoce solo le verdure che non sono gialle!**\nHai a disposizione gli stessi blocchi di prima:\n\n- `N`: il numero totale di cibi allineati.\n- `prossimo cibo`: il prossimo cibo in fila da mangiare.\n- $x$ `è una verdura`: vero se il cibo $x$ è una verdura.\n- $x$ `è giallo`: vero se il cibo $x$ è giallo.\n- `cuoci` $x$: cuoci il cibo $x$.\n- `mangia` $x$: mangia il cibo $x$.\n- `butta` $x$: butta via il cibo $x$.\n- `termina`: smetti di mangiare e vai via dal pranzo.\n\nScrivi un programma che consenta a Carol di pranzare come più preferisce!\n\nOra nella sezione _\"Logica\"_ ci sono due nuovi blocchi verità (esagonali) con spazi esagonali: \"e/o\" (che inizialmente è \"e\" ma puoi trasformare in \"o\") e \"non\".\nQuesti blocchi sono detti _operazioni logiche_ sui valori di verità inseriti negli spazi (che chiamiamo _argomenti_), e producono come valore di verità:\n\n- per il blocco \"non\", l'opposto dell'unico argomento (quindi produce falso se l'argomento è vero, e vero se l'argomento è falso);\n- per il blocco \"e\", produce vero solo se entrambi gli argomenti sono veri, e falso in tutti gli altri casi;\n- per il blocco \"o\", produce falso solo se entrambi gli argomenti sono falsi, e vero in tutti gli altri casi.\n\nSe ci pensi, questo è lo stesso significato che hanno le congiunzioni \"e\", \"o\" e \"non\" in italiano!\n\n<Hint>\n  Il comportamento di Carol è diverso da quello di Allie ma molto simile a quello di Bunny, cambiando solo la condizione secondo cui decide di cuocere i cibi: li cuoce se sono verdura e non gialli. Come puoi tradurre questa condizione in blocchi?\n</Hint>\n\n<Blockly\n  toolbox={toolbox}\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Secondo questo programma, per ognuno degli $N$ cibi che Carol vuole mangiare, il protagonista\n> controlla se il prossimo cibo è una verdura *e* non è giallo, e in caso affermativo lo cuoce prima di mangiarlo.\n> A questo punto mangia il prossimo cibo (che sia verdura o frutta, gialla o no), che sarà di suo gradimento.\n","<Contest>\n\n<Section>\n  <Problem points={[5, 0, 0]}><S1PranzoNoCondizioni /></Problem>\n  <Problem points={[5, 0, 0]}><S2PranzoCondSingola /></Problem>\n  <Problem points={[5, 0, 0]}><S3PranzoCondDoppia /></Problem>\n  <Problem points={[5, 0, 0]}><S4PranzoOperazioniBool /></Problem>\n</Section>\n\n</Contest>\n","# Corso di Programmazione a Blocchi\n\n## Lezione 2 - Blocchi Condizionali e Ripeti Mentre\n\nBentornato nel corso di programmazione a blocchi per la preparazione ai Giochi di Fibonacci!\n\nQuesta è la seconda lezione, in cui ti faremo vedere:\n\n- i blocchi di tipo \"logica\";\n- il blocco \"ripeti mentre/fino a che\".\n\nSe non l'avessi ancora fatto, ti invitiamo a completare la prima lezione prima di iniziare questa (anche se pensi di conoscere già quegli argomenti!).\n\n## Punteggio e struttura delle lezioni\n\nLe lezioni di questo corso contengono alcuni problemi di programmazione a blocchi, da risolvere in al massimo _4 giorni_. Appena avrai finito di lavorarci, potrai cliccare su \"Termina\" per vedere subito un riepilogo del punteggio che hai ottenuto, e le soluzioni spiegate di tutti i problemi! Se anche non lo farai, la lezione verrà terminata automaticamente dopo 4 giorni. Potrai comunque ricominciare la lezione quante volte vuoi, cliccando sul tasto \"Ricomincia\" (freccia curva che torna indietro).\n\nI problemi richiedono di scrivere un **singolo** programma a blocchi, che viene valutato **contemporaneamente** su più livelli.\nQuindi attenzione che non puoi scrivere programmi diversi per i diversi livelli, ma uno solo!\nPer ciascun livello correttamente risolto di ciascun problema, otterrai _5 punti_.\n","import { NoAuth } from \"@olinfo/quizms/student\";\n\nimport Statement from \"./contest/contest.mdx\";\nimport Header from \"./header.md\";\n\nexport const metadata = {\n  title: \"Corso di Programmazione\",\n  description: \"Corso di Programmazione a Blocchi per i Giochi di Fibonacci\",\n};\n\nexport default function App() {\n  return (\n    <NoAuth contestLongName=\"\" contestName=\"Corso di Programmazione\" duration={5760}>\n      <Header />\n      <Statement />\n    </NoAuth>\n  );\n}\n"],"names":["toolbox","foods","__vite_glob_0_0","__vite_glob_0_1","__vite_glob_0_2","__vite_glob_0_3","__vite_glob_0_4","__vite_glob_0_5","Visualizer","variables","state","position","x","cook","jsxs","Fragment","Canvas","jsx","Sprite","bunny","stoveBack","range","i","pos","stoveOn","stoveOff","Variables","_jsx","_components","_jsxs","Code","customBlocks","initialBlocks","testcases","Equation","metadata","App","NoAuth","Header","Statement"],"mappings":"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"}