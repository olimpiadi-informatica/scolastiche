{"version":3,"file":"dfc81dca-page.js","sources":["../../../src/fibonacci-secondarie/2023-terza-fase/contest/s-1-cioccolato/visualizer.jsx","../../../src/fibonacci-secondarie/2023-terza-fase/contest/s-1-cioccolato/question.mdx","../../../node_modules/d3-shape/src/constant.js","../../../node_modules/d3-path/src/path.js","../../../node_modules/d3-shape/src/path.js","../../../node_modules/d3-shape/src/array.js","../../../node_modules/d3-shape/src/curve/linear.js","../../../node_modules/d3-shape/src/point.js","../../../node_modules/d3-shape/src/line.js","../../../node_modules/d3-shape/src/curve/bump.js","../../../src/fibonacci-secondarie/2023-terza-fase/contest/s-2-montagna/visualizer.jsx","../../../src/fibonacci-secondarie/2023-terza-fase/contest/s-2-montagna/question.mdx","../../../src/fibonacci-secondarie/2023-terza-fase/contest/s-3-calcolatrice/visualizer.jsx","../../../src/fibonacci-secondarie/2023-terza-fase/contest/s-3-calcolatrice/question.mdx","../../../src/fibonacci-secondarie/2023-terza-fase/contest/s-4-superbunny/visualizer.jsx","../../../src/fibonacci-secondarie/2023-terza-fase/contest/s-4-superbunny/question.mdx","../../../src/fibonacci-secondarie/2023-terza-fase/contest/contest.mdx","../../../src/fibonacci-secondarie/2023-terza-fase/header.md","../../../src/fibonacci-secondarie/2023-terza-fase/page.jsx"],"sourcesContent":["\"use client\";\n\nimport clsx from \"clsx\";\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=66\";\nimport chocolate from \"./asy/chocolate.asy?w=25\";\n\nconst bunnies = import.meta.glob(\"./asy/bunnies*.asy\", {\n  eager: true,\n  import: \"default\",\n  query: { w: 50 },\n});\n\nexport default function Visualizer({ variables, state }) {\n  let { N, M, K, cuts } = state;\n  if (N > 20 || M > 20) {\n    return (\n      <div className=\"text-slate-800 p-4\">\n        La visualizzazione è disponibile solo per i primi 5 livelli.\n      </div>\n    );\n  }\n\n  const xChoco = range(N).map(() => []);\n  const yChoco = range(M).map(() => []);\n\n  let xoffs = 1.5;\n  let yoffs = 2;\n\n  const chocblock = (N0, N, M0, M) => {\n    for (let i = N0; i < N; ++i) {\n      xChoco[i] ??= [];\n      yChoco[i] ??= [];\n      for (let j = M0; j < M; ++j) {\n        xChoco[i][j] = xoffs + i * 0.5;\n        yChoco[i][j] = yoffs - j * 0.5;\n      }\n    }\n  };\n\n  const sep = 0.15;\n  chocblock(0, N, 0, M);\n  for (let i = cuts.length - 1; i >= 0; --i) {\n    const c = cuts[i];\n    if (c > 0) {\n      yoffs -= sep;\n      chocblock(0, N, M, M + c);\n      M += c;\n    } else {\n      xoffs += sep;\n      chocblock(N, N - c, 0, M);\n      N -= c;\n    }\n  }\n\n  const len = Object.keys(bunnies).length;\n\n  return (\n    <>\n      <Canvas scale={50}>\n        <Sprite src={bunny} alt=\"Tip-Tap\" follow />\n        {range(state.initialK).map((i) => (\n          <Sprite\n            key={i}\n            src={bunnies[`./asy/bunnies${i % len}.asy`]}\n            alt=\"Bunny\"\n            x={2 + N * (0.5 + sep) + ((11 * i) % 19) * 0.4}\n            y={-5 + (3 * i) / (K + cuts.length - 1)}\n            className={clsx(i < state.initialK - K && \"invisible\")}\n          />\n        ))}\n        {xChoco.flatMap((row, i) =>\n          row.map((x, j) => (\n            <Sprite key={`${i}-${j}`} src={chocolate} alt=\"cioccolata\" x={x} y={yChoco[i][j]} />\n          )),\n        )}\n      </Canvas>\n      <Variables\n        variables={{\n          larghezza: N,\n          altezza: M,\n          compagni: K,\n          ...variables,\n        }}\n      />\n    </>\n  );\n}\n","import initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s1.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nTip-Tap adora il cioccolato, e allora si è comprato una tavoletta di cioccolato fatta di $N \\times M$ quadratini.\nAnche i $K$ suoi compagni di fattoria vorrebbero mangiare il cioccolato, e Tip-Tap è troppo buono per non dargliene!\nQuindi per $K$ volte spezza la tavoletta in due parti rettangolari, non necessariamente uguali, e dà una delle due ad uno dei suoi $K$ compagni tenendo infine l'ultimo pezzo per sè.\n\n![\"La tavoletta di Tip-Tap\"](lorenzo.jpg \"Il cioccolato non è mai troppo!\")\n\nLa tavoletta può essere spezzata solo lungo i bordi dei quadratini, in orizzontale o verticale, in modo tale da non dividere nessun quadratino in due.\nInoltre una volta spezzata una parte, quella viene subito presa e mangiata da un amico senza dargli la possibilità di spezzarla ulteriormente.\nTip-Tap vorrebbe sapere come spezzare la tavoletta $K$ volte in modo che gli rimangano il maggior numero possibile di quadratini. Puoi aiutarlo?\n\nPuoi usare questi blocchi:\n\n- `larghezza`: la larghezza attuale della tavoletta.\n- `altezza`: l'altezza attuale della tavoletta.\n- `compagni`: il numero di compagni che ancora chiedono del cioccolato.\n- `spezza x quadratini in orizzontale`: spezza la tavoletta in orizzontale, lasciando $x$ file ad un compagno.\n- `spezza x quadratini in verticale`: spezza la tavoletta in verticale, lasciando $x$ colonne ad un compagno.\n- `termina`: mangia il cioccolato rimasto.\n\nAiuta Tip-Tap a spezzare la tavoletta $K$ volte, in modo gli rimanga il maggior numero possibile di quadratini!\n\n<Blockly\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  debug={{ logBlocks: false, logJs: false, logVariables: false }}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Secondo questo programma, per ognuno dei compagni di Tip-Tap, il protagonista\n> controlla se la tavoletta è più larga o più alta, e gli passa una singola fila\n> o colonna a seconda di quale delle due è più piccola. In questo modo, si\n> assicura che alla fine gli rimanga più cioccolato possibile.\n","export default function(x) {\n  return function constant() {\n    return x;\n  };\n}\n","const pi = Math.PI,\n    tau = 2 * pi,\n    epsilon = 1e-6,\n    tauEpsilon = tau - epsilon;\n\nfunction append(strings) {\n  this._ += strings[0];\n  for (let i = 1, n = strings.length; i < n; ++i) {\n    this._ += arguments[i] + strings[i];\n  }\n}\n\nfunction appendRound(digits) {\n  let d = Math.floor(digits);\n  if (!(d >= 0)) throw new Error(`invalid digits: ${digits}`);\n  if (d > 15) return append;\n  const k = 10 ** d;\n  return function(strings) {\n    this._ += strings[0];\n    for (let i = 1, n = strings.length; i < n; ++i) {\n      this._ += Math.round(arguments[i] * k) / k + strings[i];\n    }\n  };\n}\n\nexport class Path {\n  constructor(digits) {\n    this._x0 = this._y0 = // start of current subpath\n    this._x1 = this._y1 = null; // end of current subpath\n    this._ = \"\";\n    this._append = digits == null ? append : appendRound(digits);\n  }\n  moveTo(x, y) {\n    this._append`M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;\n  }\n  closePath() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._append`Z`;\n    }\n  }\n  lineTo(x, y) {\n    this._append`L${this._x1 = +x},${this._y1 = +y}`;\n  }\n  quadraticCurveTo(x1, y1, x, y) {\n    this._append`Q${+x1},${+y1},${this._x1 = +x},${this._y1 = +y}`;\n  }\n  bezierCurveTo(x1, y1, x2, y2, x, y) {\n    this._append`C${+x1},${+y1},${+x2},${+y2},${this._x1 = +x},${this._y1 = +y}`;\n  }\n  arcTo(x1, y1, x2, y2, r) {\n    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error(`negative radius: ${r}`);\n\n    let x0 = this._x1,\n        y0 = this._y1,\n        x21 = x2 - x1,\n        y21 = y2 - y1,\n        x01 = x0 - x1,\n        y01 = y0 - y1,\n        l01_2 = x01 * x01 + y01 * y01;\n\n    // Is this path empty? Move to (x1,y1).\n    if (this._x1 === null) {\n      this._append`M${this._x1 = x1},${this._y1 = y1}`;\n    }\n\n    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n    else if (!(l01_2 > epsilon));\n\n    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n    // Equivalently, is (x1,y1) coincident with (x2,y2)?\n    // Or, is the radius zero? Line to (x1,y1).\n    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\n      this._append`L${this._x1 = x1},${this._y1 = y1}`;\n    }\n\n    // Otherwise, draw an arc!\n    else {\n      let x20 = x2 - x0,\n          y20 = y2 - y0,\n          l21_2 = x21 * x21 + y21 * y21,\n          l20_2 = x20 * x20 + y20 * y20,\n          l21 = Math.sqrt(l21_2),\n          l01 = Math.sqrt(l01_2),\n          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n          t01 = l / l01,\n          t21 = l / l21;\n\n      // If the start tangent is not coincident with (x0,y0), line to.\n      if (Math.abs(t01 - 1) > epsilon) {\n        this._append`L${x1 + t01 * x01},${y1 + t01 * y01}`;\n      }\n\n      this._append`A${r},${r},0,0,${+(y01 * x20 > x01 * y20)},${this._x1 = x1 + t21 * x21},${this._y1 = y1 + t21 * y21}`;\n    }\n  }\n  arc(x, y, r, a0, a1, ccw) {\n    x = +x, y = +y, r = +r, ccw = !!ccw;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error(`negative radius: ${r}`);\n\n    let dx = r * Math.cos(a0),\n        dy = r * Math.sin(a0),\n        x0 = x + dx,\n        y0 = y + dy,\n        cw = 1 ^ ccw,\n        da = ccw ? a0 - a1 : a1 - a0;\n\n    // Is this path empty? Move to (x0,y0).\n    if (this._x1 === null) {\n      this._append`M${x0},${y0}`;\n    }\n\n    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\n      this._append`L${x0},${y0}`;\n    }\n\n    // Is this arc empty? We’re done.\n    if (!r) return;\n\n    // Does the angle go the wrong way? Flip the direction.\n    if (da < 0) da = da % tau + tau;\n\n    // Is this a complete circle? Draw two arcs to complete the circle.\n    if (da > tauEpsilon) {\n      this._append`A${r},${r},0,1,${cw},${x - dx},${y - dy}A${r},${r},0,1,${cw},${this._x1 = x0},${this._y1 = y0}`;\n    }\n\n    // Is this arc non-empty? Draw an arc!\n    else if (da > epsilon) {\n      this._append`A${r},${r},0,${+(da >= pi)},${cw},${this._x1 = x + r * Math.cos(a1)},${this._y1 = y + r * Math.sin(a1)}`;\n    }\n  }\n  rect(x, y, w, h) {\n    this._append`M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${w = +w}v${+h}h${-w}Z`;\n  }\n  toString() {\n    return this._;\n  }\n}\n\nexport function path() {\n  return new Path;\n}\n\n// Allow instanceof d3.path\npath.prototype = Path.prototype;\n\nexport function pathRound(digits = 3) {\n  return new Path(+digits);\n}\n","import {Path} from \"d3-path\";\n\nexport function withPath(shape) {\n  let digits = 3;\n\n  shape.digits = function(_) {\n    if (!arguments.length) return digits;\n    if (_ == null) {\n      digits = null;\n    } else {\n      const d = Math.floor(_);\n      if (!(d >= 0)) throw new RangeError(`invalid digits: ${_}`);\n      digits = d;\n    }\n    return shape;\n  };\n\n  return () => new Path(digits);\n}\n","export var slice = Array.prototype.slice;\n\nexport default function(x) {\n  return typeof x === \"object\" && \"length\" in x\n    ? x // Array, TypedArray, NodeList, array-like\n    : Array.from(x); // Map, Set, iterable, string, or anything else\n}\n","function Linear(context) {\n  this._context = context;\n}\n\nLinear.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; // falls through\n      default: this._context.lineTo(x, y); break;\n    }\n  }\n};\n\nexport default function(context) {\n  return new Linear(context);\n}\n","export function x(p) {\n  return p[0];\n}\n\nexport function y(p) {\n  return p[1];\n}\n","import array from \"./array.js\";\nimport constant from \"./constant.js\";\nimport curveLinear from \"./curve/linear.js\";\nimport {withPath} from \"./path.js\";\nimport {x as pointX, y as pointY} from \"./point.js\";\n\nexport default function(x, y) {\n  var defined = constant(true),\n      context = null,\n      curve = curveLinear,\n      output = null,\n      path = withPath(line);\n\n  x = typeof x === \"function\" ? x : (x === undefined) ? pointX : constant(x);\n  y = typeof y === \"function\" ? y : (y === undefined) ? pointY : constant(y);\n\n  function line(data) {\n    var i,\n        n = (data = array(data)).length,\n        d,\n        defined0 = false,\n        buffer;\n\n    if (context == null) output = curve(buffer = path());\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) output.lineStart();\n        else output.lineEnd();\n      }\n      if (defined0) output.point(+x(d, i, data), +y(d, i, data));\n    }\n\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n\n  line.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), line) : x;\n  };\n\n  line.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), line) : y;\n  };\n\n  line.defined = function(_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), line) : defined;\n  };\n\n  line.curve = function(_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\n  };\n\n  line.context = function(_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\n  };\n\n  return line;\n}\n","import pointRadial from \"../pointRadial.js\";\n\nclass Bump {\n  constructor(context, x) {\n    this._context = context;\n    this._x = x;\n  }\n  areaStart() {\n    this._line = 0;\n  }\n  areaEnd() {\n    this._line = NaN;\n  }\n  lineStart() {\n    this._point = 0;\n  }\n  lineEnd() {\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  }\n  point(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: {\n        this._point = 1;\n        if (this._line) this._context.lineTo(x, y);\n        else this._context.moveTo(x, y);\n        break;\n      }\n      case 1: this._point = 2; // falls through\n      default: {\n        if (this._x) this._context.bezierCurveTo(this._x0 = (this._x0 + x) / 2, this._y0, this._x0, y, x, y);\n        else this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y) / 2, x, this._y0, x, y);\n        break;\n      }\n    }\n    this._x0 = x, this._y0 = y;\n  }\n}\n\nclass BumpRadial {\n  constructor(context) {\n    this._context = context;\n  }\n  lineStart() {\n    this._point = 0;\n  }\n  lineEnd() {}\n  point(x, y) {\n    x = +x, y = +y;\n    if (this._point === 0) {\n      this._point = 1;\n    } else {\n      const p0 = pointRadial(this._x0, this._y0);\n      const p1 = pointRadial(this._x0, this._y0 = (this._y0 + y) / 2);\n      const p2 = pointRadial(x, this._y0);\n      const p3 = pointRadial(x, y);\n      this._context.moveTo(...p0);\n      this._context.bezierCurveTo(...p1, ...p2, ...p3);\n    }\n    this._x0 = x, this._y0 = y;\n  }\n}\n\nexport function bumpX(context) {\n  return new Bump(context, true);\n}\n\nexport function bumpY(context) {\n  return new Bump(context, false);\n}\n\nexport function bumpRadial(context) {\n  return new BumpRadial(context);\n}\n","\"use client\";\n\nimport { curveBumpX, line } from \"d3-shape\";\nimport { Fragment } from \"react\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=50\";\nimport offcharge from \"./asy/offcharge.asy?w=20\";\nimport oncharge from \"./asy/oncharge.asy?w=20\";\n\nexport default function Visualizer({ variables, state }) {\n  const { H, N, posx, rot } = state;\n\n  if (N > 40) {\n    return (\n      <div className=\"text-slate-800 p-4\">\n        La visualizzazione è disponibile solo per i primi 5 livelli.\n      </div>\n    );\n  }\n\n  const maxH = Math.max(...H);\n\n  const p = (y) => (8 * y) / maxH;\n\n  const mountainCurve = line()\n    .x((_h, i) => i)\n    .y((h) => p(h))\n    .curve(curveBumpX);\n\n  const mountains = mountainCurve([-maxH / 8, ...state.H, -maxH / 8]);\n\n  return (\n    <>\n      <Canvas scale={40}>\n        <Rectangle\n          width={N + 0.65}\n          height={0.2}\n          x={0.25}\n          y={p(maxH) + 2.1}\n          className=\"bg-gradient-to-b from-amber-800/80 to-white !border-0\"\n        />\n        <Rectangle width={N + 1} height={p(maxH) + 1} x={0} y={1.1} className=\"!border-0\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox={`0 -0.9 ${N + 1} ${p(maxH) + 1}`}\n            className=\"-scale-y-100\">\n            <title>I conigli attraversano la montagna</title>\n            <path d={mountains} className=\"fill-amber-800/80\" />\n            {H.map((h, i) => {\n              if (h < H[i - 1] || h < H[i + 1]) return;\n              return (\n                <Fragment key={i}>\n                  <ellipse cx={i + 0.7} cy={p(h)} rx=\".6\" ry=\"0.6\" fill=\"white\" />\n                  <ellipse cx={i + 1} cy={p(h) - 0.1} rx=\".4\" ry=\"0.4\" fill=\"white\" />\n                </Fragment>\n              );\n            })}\n            <path d={mountains} fillOpacity={0} strokeWidth={0.06} className=\"stroke-amber-900\" />\n          </svg>\n        </Rectangle>\n        <Sprite\n          src={bunny}\n          x={posx + 0.8}\n          y={p(maxH - H[posx])}\n          alt=\"Tip-Tap\"\n          rotation={(-0.5 * rot) / Math.PI}\n          follow\n        />\n        {H.map((h, i) => (\n          <Sprite\n            key={i}\n            src={i === posx && state.charging ? oncharge : offcharge}\n            x={i + 0.6}\n            y={p(maxH - h) + 0.1}\n            alt=\"Stazione di ricarica\"\n          />\n        ))}\n      </Canvas>\n      <Variables\n        variables={{\n          N: state.N,\n          energia: state.energy,\n          tempo: state.time,\n          ...variables,\n        }}\n      />\n    </>\n  );\n}\n","import initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s2.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nI conigli della fattoria Fibonacci hanno appena comprato una nuova efficentissima macchina elettrica!\n\nNon vedono l'ora di provarla, quindi organizzano un viaggio di prova sulle montagne vicine. Il tragitto che vogliono fare è fatto da tratti in salita e tratti in discesa.\nLungo il percorso ci sono $N$ colonnine di ricarica dove potersi fermare, a diverse altezze. La macchina **usa** un'unità di energia **salendo** di $1$ metro di altitudine,\nmentre **guadagna** un'unità di energia **scendendo** di $1$ metro di altitudine, e non le serve energia per avanzare nei tratti in piano.\nPurtroppo la macchina parte senza energia, e per ricaricarsi può attendere **un minuto** ad una delle colonnine per ogni unità di energia che vuole ottenere in quel momento.\n\nPuoi usare questi blocchi:\n\n- `N`: la lunghezza $N$ del percorso.\n- `energia`: la quantità corrente di energia.\n- `altitudine della colonnina i`: l'altitudine della colonnina di ricarica $i$-esima nel percorso.\n- `avanza`: prosegui il viaggio fino alla prossima colonnina, se hai abbastanza energia.\n- `ricarica per x minuti`: attendi $x$ minuti ad una colonnina per ricaricare $x$ unità di energia.\n- `termina`: spegni la macchina.\n\nI conigli partono dalla colonnina 1, e devono arrivare alla colonnina $N$.\nOrganizza il viaggio sulle montagne, evitando che la macchina si fermi prima di arrivare!\n\n<Blockly\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  debug={{ logBlocks: false, logJs: false, logVariables: false }}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol1.png)\n>\n> Secondo questo programma, per ognuna delle colonnine a partire dalla seconda, si controlla\n> se c'è abbastanza energia rimasta per coprire la differenza di altezza tra la prossima\n> colonnina $i$ e quella corrente $i-1$. Se non è sufficiente, ci si ricarica\n> alla colonnina per la quantità di minuti minima indispensabile. Poi in ogni\n> caso si procede alla colonnina successiva.\n>\n> Un altro possibile approccio è il seguente:\n>\n> ![soluzione](sol2.png)\n>\n> Secondo questo programma, prima si calcola la massima altezza di una qualunque colonnina\n> lungo il percorso. A questo punto, ci si ricarica una singola volta della quantità di energia\n> necessaria per salire dall'altezza iniziale fino all'altezza massima. A questo punto c'è\n> abbastanza energia per procedere fino alla fine senza fermarsi.\n","\"use client\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=100\";\nimport calcolatrice from \"./calcolatrice.svg?w=200\";\n\nexport default function Visualizer({ variables, state }) {\n  if (state.N > 10_000) {\n    return (\n      <div className=\"text-slate-800 p-4\">\n        La visualizzazione è disponibile solo per i primi 5 livelli.\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <link\n        href=\"https://fonts.googleapis.com/css?family=Orbitron\"\n        rel=\"stylesheet\"\n        type=\"text/css\"\n      />\n      <Canvas scale={50}>\n        <Sprite src={bunny} alt=\"Bunny\" x={1} y={0} />\n        <Sprite src={calcolatrice} alt=\"Calcolatrice\" x={3} y={1} />\n        <Rectangle\n          color=\"transparent\"\n          borderColor=\"transparent\"\n          height={0.4}\n          width={2.2}\n          x={4.3}\n          y={1.4}\n          rotation={0.025}\n          className=\"font-[Orbitron] text-black\">\n          {state.N}\n        </Rectangle>\n      </Canvas>\n      <Variables variables={{ ...variables }} />\n    </>\n  );\n}\n","import initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s3.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nCarol ha fatto cadere la sua calcolatrice, e ora non funziona più come dovrebbe!\nGli unici tasti funzionanti sono il $-$, il $\\times$, l'$1$ e il $2$.\nPer utilizzare la calcolatrice è costretta a partire dal numero $1$ o dal numero $2$ (premendo il tasto corrispondente) e applicare zero o più volte una delle $4$ possibili operazioni funzionanti:\n\n- sottrarre $1$\n- sottrarre $2$\n- moltiplicare per $1$\n- moltiplicare per $2$\n\nPer fare uno scherzo ai suoi amici, vorrebbe raggiungere sulla calcolatrice il numero $N$. Quante operazioni deve fare al minimo per farlo?\n\n_**Nota:** premere il tasto $1$ o $2$ all'inizio conta come un'operazione, inoltre la calcolatrice è danneggiata quindi Carol è costretta a partire sempre da $1$ o $2$ (**non** può ad esempio premere $2$ e poi $1$ per partire dal numero $21$) e le uniche operazioni ammesse sono quelle precedentemente elencate (**non** può per esempio moltiplicare o sottrarre $12$ o $21$)._\n\nPuoi usare questi blocchi:\n\n- `N`: il numero $N$ che vuole raggiungere.\n- `termina in x operazioni`: riporta che è possibile raggiungere il numero $N$ in $x$ operazioni.\n\n_**Attenzione:** non ti viene richiesto di ricostruire le operazioni da fare, basta che calcoli il numero di operazioni necessario!_\n\n<Blockly\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  debug={{ logBlocks: false, logJs: false, logVariables: false }}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> L'idea di questa soluzione è di ragionare al contrario, partendo dal numero\n> che si vuole raggiungere e tornando indietro con le operazioni inverse. Per\n> esempio, se vogliamo raggiungere il numero 5, ci chiediamo quale numero potrebbe\n> essere l'ultimo che raggiungiamo prima di arrivare al 5. Visto che 5 è dispari,\n> non può essere che l'ultima operazione sia un raddoppio, e moltiplicare per 1\n> non è mai utile. Quindi il numero prima potrebbe essere o il 6 (da cui sottraendo\n> 1 si arriva al 5), oppure il 7 (da cui sottraendo 2 si arriva al 5). Il 7 però\n> non sembra conveniente, perché essendo dispari ci si può arrivare solo da un'altro\n> numero ancora più grande (8 o 9), il che ci allontana dal nostro obiettivo.\n> Si può quindi mostrare che quando dobbiamo raggiungere un valore $n$ dispari,\n> la cosa migliore è raggiungere prima $n+1$. Similmente, quando dobbiamo raggiungere\n> un valore $n$ pari, la cosa migliore è raggiungere prima $n/2$. Ripetiamo quindi\n> questo procedimento a ritroso a partire dal nostro obiettivo $N$, fino a che\n> non raggiungiamo 1 o 2, che sono numeri che possiamo direttamente scrivere\n> sulla nostra calcolatrice. Nel frattempo contiamo quante operazioni stiamo\n> facendo nella variabile risposta, risolvendo il quesito!\n","\"use client\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=50\";\nimport platform from \"./asy/platform.asy?w=90\";\n\nexport default function Visualizer({ variables, state }) {\n  const { N, A, VA, B, VB } = state;\n  if (N > 50) {\n    return (\n      <div className=\"text-slate-800 p-4\">\n        La visualizzazione è disponibile solo per i primi 5 livelli.\n      </div>\n    );\n  }\n\n  const maxH = Math.max(...A);\n\n  const p = (y) => (3 * y) / maxH;\n\n  return (\n    <>\n      <Canvas scale={100}>\n        {A.map((a, i) => (\n          <Rectangle\n            key={i}\n            color=\"#d1d5db\"\n            borderColor=\"#6b7280\"\n            x={i + 1.48}\n            y={-p(a) - 0.1}\n            height={p(a) + 0.3}\n            width={0.15}\n            className=\"rounded-md\"\n          />\n        ))}\n        {A.map((a, i) => (\n          <Sprite key={i} src={platform} alt=\"Pedana\" x={i + 1.1} y={-p(a)} />\n        ))}\n        {B.map((b, i) => (\n          <Sprite key={i} src={platform} alt=\"Pedana\" x={i + 1.1} y={-p(b)} />\n        ))}\n        {VA.map((v, i) => (\n          <Rectangle\n            key={i}\n            color=\"transparent\"\n            borderColor=\"transparent\"\n            height={1}\n            width={2.2}\n            x={i + 1.1}\n            y={-p(A[i]) - 0.35}\n            className=\"text-3xl text-gray-400 [text-shadow:0_0_2px_#fff]\">\n            {v}\n          </Rectangle>\n        ))}\n        {VB.map((v, i) => (\n          <Rectangle\n            key={i}\n            color=\"transparent\"\n            borderColor=\"transparent\"\n            height={1}\n            width={2.2}\n            x={i + 1.1}\n            y={-p(B[i]) - 0.35}\n            className=\"text-3xl text-gray-400 [text-shadow:0_0_2px_#fff]\">\n            {v}\n          </Rectangle>\n        ))}\n        <Rectangle color=\"brown\" borderColor=\"#D35A1E\" height={0.3} width={Math.min(N, 50) + 2} />\n        <Sprite src={bunny} alt=\"Bunny\" x={0.2} y={-0.8} />\n      </Canvas>\n      <Variables variables={{ ...variables }} />\n    </>\n  );\n}\n","import initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s4.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nIl nuovissimo videogioco _SuperBunny_ è finalmente in commercio! Bunny, il protagonista del videogioco, in ogni livello deve superare $N$ ostacoli numerati da $1$ ad $N$.\nSu ogni ostacolo ci sono $2$ pedane (ad altezze diverse) su cui Bunny può saltare: l'ostacolo numero $i$ è fatto da una pedana più in alto che si trova ad una altezza di $A_i$ metri, e da una pedana più in basso ad un'altezza di $B_i$ metri.\n\nBunny parte da terra ad altezza $0$ e deve per prima cosa saltare sull'ostacolo numero $1$ scegliendo una delle due pedane. Una volta raggiunto l'ostacolo $1$, sceglierà una delle due pedane dell'ostacolo successivo, il $2$, e ci salterà sopra.\nL'obiettivo del gioco è superare in ordine tutti gli ostacoli fino all'ostacolo numero $N$. Anche se Bunny può scegliere ogni volta su quale pedana di un ostacolo saltare, non tutti i salti sono uguali!\nInfatti, più il salto è grande e più tempo ci vuole per farlo. Per saltare da pedana ad altezza $h$ fino ad una pedana sull'ostacolo successivo ad altezza $k$, Bunny ci metterà una quantità di secondi pari alla _differenza assoluta_ tra $h$ e $k$.\n\n_**Nota:** la differenza assoluta tra $h$ e $k$, in formule $|h - k|$, indica il valore della differenza tra $h$ e $k$ ignorando il segno: quindi $h - k$ se $h > k$ o $k - h$ se $k > h$._\n\nIl tempo totale impiegato per completare un livello è la somma dei tempi impiegati in ogni salto. Quanti secondi servono a Bunny per completare il livello?\nPuoi usare questi blocchi:\n\n- `N`: il numero $N$ di ostacoli.\n- `pedana alta i`: l'altezza $A_i$ della $i$-esima pedana più in alto.\n- `pedana bassa i`: l'altezza $B_i$ della $i$-esima pedana più in basso.\n- `differenza assoluta tra x e y`: la differenza assoluta $|x - y|$ tra $x$ e $y$.\n- `minimo tra x e y`: il valore minimo tra due numeri $x$ e $y$.\n- `termina in x tempo`: riporta che è possibile raggiungere l'$N$-esimo ostacolo in $x$ tempo.\n\nInoltre, se ti serve, avrai la possibilità di annotarti un valore a tua scelta su ogni piattaforma, che verrà anche mostrato nella figura, con questi blocchi:\n\n- `valore pedana alta i`: il valore scritto sulla pedana alta $i$-esima.\n- `valore pedana bassa i`: il valore scritto sulla pedana bassa $i$-esima.\n- `imposta valore pedana alta i a x`: scrivi sulla pedana alta $i$-esima il valore $x$.\n- `imposta valore pedana bassa i a x`: scrivi sulla pedana bassa $i$-esima il valore $x$.\n\n_**Attenzione:** non ti viene richiesto di ricostruire i salti da fare, basta che calcoli il tempo necessario!_\n\n_**Avvertimento:** incastrare un blocco grosso in un altro blocco può non essere semplice. Cerca di mettere la **punta sinistra** del blocco grosso nello spazio in cui vuoi inserirlo, per non avere difficoltà!_\n\n<Blockly\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  debug={{ logBlocks: false, logJs: false, logVariables: false }}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> In questo programma, segnamo come valore su ciascuna pedana il **tempo minimo per raggiungerla**.\n> Per le pedane sul primo ostacolo, il tempo per raggiungerle è pari alla loro altezza.\n> Per ogni pedana successiva (alta o bassa), il tempo minimo per raggiungerla è pari al minimo tra due cose:\n>\n> - se decidiamo di arrivarci dalla pedana alta precedente, allora è pari al tempo minimo (valore) della pedana alta precedente, più la differenza assoluta tra la pedana che stiamo considerando e la pedana alta precedente;\n> - se decidiamo di arrivarci dalla pedana bassa precedente, allora si può calcolare analogamente ma considerando il valore e la differenza assoluta con la pedana bassa precedente.\n>\n> Una volta scritti tutti questi valori, il migliore tempo per chiudere il livello sarà il minore\n> tra il tempo minimo (valore) per raggiungere l'ultima pedana alta, e il tempo minimo (valore)\n> per raggiungere l'ultima pedana bassa.\n","<Contest>\n\n<Section>\n  <Problem points={[5, 0, 0]}><S1Cioccolato /></Problem>\n  <Problem points={[5, 0, 0]}><S2Montagna /></Problem>\n  <Problem points={[5, 0, 0]}><S3Calcolatrice /></Problem>\n  <Problem points={[5, 0, 0]}><S4Superbunny /></Problem>\n</Section>\n\n</Contest>\n","# Giochi di Fibonacci 2023/2024\n\n## Fase finale - Scuole secondarie\n\nQuesta prova contiene _4 domande_ da risolvere in _3 ore_.\nTutte le domande sono di **programmazione** tramite blocchi, e sono ordinate per difficoltà crescente.\n**Attento che la difficoltà è soggettiva!** Se stai passando tanto tempo cercando di risolvere una domanda, prova a passare ad altre domande e altre categorie!\n\n## Punteggio\n\nTutte le domande sono a _blocchi_ e richiedono di scrivere un singolo programma a blocchi, che viene valutato su 10 diversi livelli.\nPer ciascuna domanda e per ciascun livello, Il punteggio che puoi ottenere è:\n\n- 5 punti se il programma produce la risposta _corretta_;\n- 0 punti se il programma produce una risposta _sbagliata_.\n\nQuindi ogni domanda a blocchi può valere fino a 50 punti in totale.\n\nIn ogni domanda a blocchi, i primi 5 livelli vengono anche visualizzati graficamente, mentre gli ultimi 5 livelli non vengono visualizzati.\n","import { NoAuth } from \"@olinfo/quizms/student\";\n\nimport Statement from \"./contest/contest.mdx\";\nimport Header from \"./header.md\";\n\nexport const metadata = {\n  title: \"Giochi di Fibonacci 2023/2024 - Fase Finale\",\n  description: \"Fase Finale dei Giochi di Fibonacci 2023/2024\",\n};\n\nexport default function App() {\n  return (\n    <NoAuth contestName=\"Giochi di Fibonacci\" duration={180}>\n      <Header />\n      <Statement />\n    </NoAuth>\n  );\n}\n"],"names":["bunnies","__vite_glob_0_0","__vite_glob_0_1","__vite_glob_0_2","__vite_glob_0_3","Visualizer","variables","state","N","M","K","cuts","jsx","xChoco","range","yChoco","xoffs","yoffs","chocblock","N0","M0","i","j","sep","c","len","jsxs","Fragment","Canvas","Sprite","bunny","clsx","row","x","chocolate","Variables","_jsx","Equation","customBlocks","initialBlocks","testcases","logBlocks","logJs","logVariables","constant","pi","tau","epsilon","tauEpsilon","append","strings","n","appendRound","digits","d","k","Path","y","x1","y1","x2","y2","x0","y0","x21","y21","x01","y01","l01_2","x20","y20","l21_2","l20_2","l21","l01","l","t01","t21","r","a0","a1","ccw","dx","dy","cw","da","w","h","withPath","shape","_","array","Linear","context","curveLinear","p","line","defined","curve","output","path","pointX","pointY","data","defined0","buffer","Bump","bumpX","H","posx","rot","maxH","mountains","_h","curveBumpX","Rectangle","oncharge","offcharge","_components","_jsxs","calcolatrice","A","VA","B","VB","a","platform","b","v","metadata","App","NoAuth","Header","Statement"],"mappings":"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","x_google_ignoreList":[2,3,4,5,6,7,8,9]}