{"version":3,"file":"e141ae48-page.js","sources":["../../../../src/fibonacci-corso/1-blocchi-esecuzione-e-ripeti-n/contest/s-1-salta-tutto-caso-singolo/toolbox.ts","../../../../src/fibonacci-corso/1-blocchi-esecuzione-e-ripeti-n/contest/s-1-salta-tutto-caso-singolo/visualizer.jsx","../../../../src/fibonacci-corso/1-blocchi-esecuzione-e-ripeti-n/contest/s-1-salta-tutto-caso-singolo/question.mdx","../../../../src/fibonacci-corso/1-blocchi-esecuzione-e-ripeti-n/contest/s-2-salta-tutto-livelli-nocicli/toolbox.ts","../../../../src/fibonacci-corso/1-blocchi-esecuzione-e-ripeti-n/contest/s-2-salta-tutto-livelli-nocicli/visualizer.jsx","../../../../src/fibonacci-corso/1-blocchi-esecuzione-e-ripeti-n/contest/s-2-salta-tutto-livelli-nocicli/question.mdx","../../../../src/fibonacci-corso/1-blocchi-esecuzione-e-ripeti-n/contest/s-3-salta-tutto-ciclo-piatto/toolbox.ts","../../../../src/fibonacci-corso/1-blocchi-esecuzione-e-ripeti-n/contest/s-3-salta-tutto-ciclo-piatto/visualizer.jsx","../../../../src/fibonacci-corso/1-blocchi-esecuzione-e-ripeti-n/contest/s-3-salta-tutto-ciclo-piatto/question.mdx","../../../../src/fibonacci-corso/1-blocchi-esecuzione-e-ripeti-n/contest/s-4-salta-tutto-ciclo-ostacoli/toolbox.ts","../../../../src/fibonacci-corso/1-blocchi-esecuzione-e-ripeti-n/contest/s-4-salta-tutto-ciclo-ostacoli/visualizer.jsx","../../../../src/fibonacci-corso/1-blocchi-esecuzione-e-ripeti-n/contest/s-4-salta-tutto-ciclo-ostacoli/question.mdx","../../../../src/fibonacci-corso/1-blocchi-esecuzione-e-ripeti-n/contest/contest.mdx","../../../../src/fibonacci-corso/1-blocchi-esecuzione-e-ripeti-n/header.md","../../../../src/fibonacci-corso/1-blocchi-esecuzione-e-ripeti-n/page.tsx"],"sourcesContent":["import type { ToolboxInfo } from \"blockly/core/utils/toolbox\";\n\nexport const toolbox: ToolboxInfo = {\n  kind: \"categoryToolbox\",\n  contents: [],\n};\n","\"use client\";\n\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=66\";\nimport flag from \"./asy/flag.asy?w=80\";\nimport flatRock from \"./asy/flat_rock.asy?w=120\";\nimport rock from \"./asy/rock.asy?w=120\";\n\nexport default function Visualizer({ variables, state }) {\n  if (state.N > 50) {\n    return (\n      <div className=\"text-slate-800 p-4\">\n        La visualizzazione è disponibile solo per i primi 5 livelli.\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Canvas scale={130}>\n        {range(state.rocks.length).map((i) => {\n          return (\n            <Sprite\n              key={i}\n              src={state.rocks[i] ? rock : flatRock}\n              alt={state.rocks[i] ? \"ostacolo\" : \"percorso\"}\n              x={i}\n              y={state.rocks[i] ? 0.9 : 1.5}\n            />\n          );\n        })}\n        <Sprite src={bunny} alt=\"Tip-Tap\" x={state.pos + 0.2} y={0.8 - state.flight} follow />\n        <Sprite src={flag} alt=\"Bandierina\" x={state.N - 0.6} y={0.9} />\n      </Canvas>\n      <Variables variables={{ ...variables }} />\n    </>\n  );\n}\n","import { toolbox } from \"./toolbox.ts\";\nimport initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s1.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nCarol si è iscritta ad una gara di corsa ad ostacoli!\nIl percorso si svolge su una sequenza di rocce, piatte o alte: si può stare solo sulle rocce piatte, mentre le rocce alte sono gli ostacoli.\nSe si avanza o atterra su una roccia alta si cade, perdendo la gara.\nLo scopo della gara è di raggiungere la bandierina finale.\nHai a disposizione questi blocchi:\n\n- `avanza`: avanza alla roccia successiva se possibile (sta ferma se ha davanti un ostacolo).\n- `salta`: salta oltre alla prossima roccia, atterrando su quella dopo.\n- `termina`: finisci la gara.\n\nNell'editor a blocchi qui sotto a destra, scrivi un programma che consenta ad Carol di completare la gara!\n\nPotrai trovare tutti i blocchi che ti servono cliccando sulla sezione _\"Esecuzione\"_, e trascinandoli nella finestra attaccandoli sotto al blocco _\"Inizia qui\"_ potrai comporre il tuo programma.\nPer provare la tua soluzione, premi sul pulsante _\"Correggi la soluzione\"_ verde con l'aeroplanino di carta: vedrai se è corretta, e potrai verificare il comportamento del programma tramite i\ntasti blu _\"Esegui/pausa\"_, _\"Esegui un blocco\"_, _\"Ricomincia da capo\"_.\n\n<Blockly\n  toolbox={toolbox}\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Secondo questo programma, il protagonista salta l'ostacolo davanti a se,\n> avanza alla roccia successiva, salta il secondo ostacolo, e avanza ancora\n> una volta per raggiungere la bandierina.\n\nPrima di passare alla prossima domanda, assicurati di aver risolto questa! Se l'hai risolta, dovresti vedere una _\"V\"_ verde in alto a sinistra, sopra la rappresentazione del livello, dopo la scritta **Livello**.","import type { ToolboxInfo } from \"blockly/core/utils/toolbox\";\n\nexport const toolbox: ToolboxInfo = {\n  kind: \"categoryToolbox\",\n  contents: [],\n};\n","\"use client\";\n\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=66\";\nimport flag from \"./asy/flag.asy?w=80\";\nimport flatRock from \"./asy/flat_rock.asy?w=120\";\nimport rock from \"./asy/rock.asy?w=120\";\n\nexport default function Visualizer({ variables, state }) {\n  if (state.N > 50) {\n    return (\n      <div className=\"text-slate-800 p-4\">\n        La visualizzazione è disponibile solo per i primi 5 livelli.\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Canvas scale={130}>\n        {range(state.rocks.length).map((i) => {\n          return (\n            <Sprite\n              key={i}\n              src={state.rocks[i] ? rock : flatRock}\n              alt={state.rocks[i] ? \"ostacolo\" : \"percorso\"}\n              x={i}\n              y={state.rocks[i] ? 0.9 : 1.5}\n            />\n          );\n        })}\n        <Sprite src={bunny} alt=\"Tip-Tap\" x={state.pos + 0.2} y={0.8 - state.flight} follow />\n        <Sprite src={flag} alt=\"Bandierina\" x={state.N - 0.6} y={0.9} />\n      </Canvas>\n      <Variables variables={{ ...variables }} />\n    </>\n  );\n}\n","import { toolbox } from \"./toolbox.ts\";\nimport initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s1.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\nimport { Hint } from \"~/utils/hint\";\n\nSiamo sempre alla corsa ad ostacoli di Carol, e hai a disposizione gli stessi blocchi di prima:\n\n- `avanza`: avanza alla roccia successiva se possibile (sta ferma se ha davanti un ostacolo).\n- `salta`: salta oltre alla prossima roccia, atterrando su quella dopo.\n- `termina`: finisci la gara.\n\nQuesta volta, però, Carol deve riuscire a superare **più diversi livelli, con un solo programma!**\n\nQuando provi la tua soluzione, premendo sul pulsante _\"Correggi la soluzione\"_, vedrai in un colpo solo quali livelli di questa domanda hai risolto correttamente.\nI livelli sono indicati in alto a sinistra, dopo la scritta **Livello**, e per ciascuno vedrai una _\"V\"_ verde se l'hai superato, oppure una _\"X\"_ rossa se non l'hai superato.\nCliccando su uno di questi simboli, potrai scegliere il livello su cui poi provare la tua soluzione con _\"Esegui/pausa\"_.\n\nAttenzione che questa domanda è piuttosto difficile... se ti senti in difficoltà, prova a leggere alcuni di questi suggerimenti:\n\n<Hint label=\"suggerimento 1\">\n  Guarda bene tutti i livelli. Quante volte dovrai saltare?\n</Hint>\n\n<Hint label=\"suggerimento 2\">\n  Quando fai l'azione _\"avanza\"_, il personaggio sta fermo se ha davanti un ostacolo. Come puoi sfruttare questa cosa?\n</Hint>\n\n<Hint label=\"suggerimento 3\">\n  Guarda i livelli uno per volta: prima di ogni salto, quante volte devi avanzare per assicurarti di arrivare all'ostacolo?\n</Hint>\n\n<Blockly\n  toolbox={toolbox}\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Per capire come impostare un programma, dobbiamo vedere tutti i diversi livelli.\n> - Per superare il primo livello basta andare avanti abbastanza.\n> - Per superare il secondo livello, dovremo saltare tre volte, e con questo superiamo anche il primo livello.\n> - Per superare anche il terzo livello, bisognerà avanzare almeno una volta prima dei primi due salti. Questa cosa non avrà effetto nel secondo livello, quindi con questo superiamo i primi tre livelli.\n> - Per superare anche il quarto livello, bisognerà avanzare una seconda volta prima del secondo salto: questa cosa non avrà effetto nel secondo e terzo livello, e quindi con questo superiamo tutti i livelli.\n\nPrima di passare alla prossima domanda, assicurati di aver risolto **tutti i livelli** di questa! Se l'hai risolta, dovresti vedere quattro _\"V\"_ verdi in alto a sinistra dopo la scritta **Livello**.\n","import type { ToolboxInfo } from \"blockly/core/utils/toolbox\";\n\nexport const toolbox: ToolboxInfo = {\n  kind: \"categoryToolbox\",\n  contents: [\n    {\n      kind: \"category\",\n      name: \"Cicli\",\n      categorystyle: \"loop_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_repeat_ext\",\n          inputs: {\n            TIMES: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n          },\n        },\n      ],\n    },\n  ],\n};\n","\"use client\";\n\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=66\";\nimport flag from \"./asy/flag.asy?w=80\";\nimport flatRock from \"./asy/flat_rock.asy?w=120\";\nimport rock from \"./asy/rock.asy?w=120\";\n\nexport default function Visualizer({ variables, state }) {\n  if (state.N > 50) {\n    return (\n      <div className=\"text-slate-800 p-4\">\n        La visualizzazione è disponibile solo per i primi 5 livelli.\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Canvas scale={130}>\n        {range(state.rocks.length).map((i) => {\n          return (\n            <Sprite\n              key={i}\n              src={state.rocks[i] ? rock : flatRock}\n              alt={state.rocks[i] ? \"ostacolo\" : \"percorso\"}\n              x={i}\n              y={state.rocks[i] ? 0.9 : 1.5}\n            />\n          );\n        })}\n        <Sprite src={bunny} alt=\"Tip-Tap\" x={state.pos + 0.2} y={0.8 - state.flight} follow />\n        <Sprite src={flag} alt=\"Bandierina\" x={state.N - 0.6} y={0.9} />\n      </Canvas>\n      <Variables variables={{ ...variables, \"N (num. rocce)\" : state.N }} />\n    </>\n  );\n}\n","import { toolbox } from \"./toolbox.ts\";\nimport initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s1.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nSiamo sempre alla corsa ad ostacoli di Carol, anche se questa volta **non ci sono ostacoli!**\nSempre nella sezione _\"Esecuzione\"_, hai a disposizione gli stessi blocchi di prima per risolvere quattro livelli, **più uno nuovo:**\n\n- `N`: il numero di rocce che ti separano dalla bandierina **(nuovo!)**.\n- `avanza`: avanza alla roccia successiva se possibile (sta ferma se ha davanti un ostacolo).\n- `salta`: salta oltre alla prossima roccia, atterrando su quella dopo.\n- `termina`: finisci la gara.\n\nPuoi notare che il nuovo blocco `N` ha una forma stondata, diversa dagli altri: questo perché non è un blocco istruzione (un blocco che _fa qualcosa_), ma un blocco che _produce un valore_\n(in questo caso il numero di rocce che ti separano dalla bandierina). Non si può quindi attaccare sotto a _\"Inizia qui\"_, ma deve invece essere inserito dentro ad altri blocchi istruzione\n(rettangolari) che contengano un spazio di simile forma stondata.\n\nNoterai anche che è comparsa una nuova sezione _\"Cicli\"_! Infatti, per riuscire a risolvere il livello, avrai bisogno di usare il tuo primo ciclo _\"ripeti N volte\"_.\nQuesto blocco ti consente di specificare quante volte vuoi ripetere alcune operazioni, mettendo un blocco valore che vuoi al posto del numero standard di ripetizioni (10).\nPuoi anche indicare quali sono i blocchi istruzione che vuoi ripetere, mettendoli nello spazio rettangolare che sta in mezzo al blocco.\n\n<Blockly\n  toolbox={toolbox}\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Secondo questo programma, il protagonista avanzerà $N$ volte, superando esattamente l'ostacolo.\n\nPrima di passare alla prossima domanda, assicurati di aver risolto **tutti i livelli** di questa! Se l'hai risolta, dovresti vedere quattro _\"V\"_ verdi in alto a sinistra dopo la scritta **Livello**.","import type { ToolboxInfo } from \"blockly/core/utils/toolbox\";\n\nexport const toolbox: ToolboxInfo = {\n  kind: \"categoryToolbox\",\n  contents: [\n    {\n      kind: \"category\",\n      name: \"Cicli\",\n      categorystyle: \"loop_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_repeat_ext\",\n          inputs: {\n            TIMES: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n          },\n        },\n      ],\n    },\n  ],\n};\n","\"use client\";\n\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=66\";\nimport flag from \"./asy/flag.asy?w=80\";\nimport flatRock from \"./asy/flat_rock.asy?w=120\";\nimport rock from \"./asy/rock.asy?w=120\";\n\nexport default function Visualizer({ variables, state }) {\n  if (state.N > 50) {\n    return (\n      <div className=\"text-slate-800 p-4\">\n        La visualizzazione è disponibile solo per i primi 5 livelli.\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Canvas scale={130}>\n        {range(state.rocks.length).map((i) => {\n          return (\n            <Sprite\n              key={i}\n              src={state.rocks[i] ? rock : flatRock}\n              alt={state.rocks[i] ? \"ostacolo\" : \"percorso\"}\n              x={i}\n              y={state.rocks[i] ? 0.9 : 1.5}\n            />\n          );\n        })}\n        <Sprite src={bunny} alt=\"Tip-Tap\" x={state.pos + 0.2} y={0.8 - state.flight} follow />\n        <Sprite src={flag} alt=\"Bandierina\" x={state.N - 0.6} y={0.9} />\n      </Canvas>\n      <Variables variables={{ ...variables, \"N (num. rocce)\" : state.N, \"M (num. ostacoli)\" : state.M }} />\n    </>\n  );\n}\n","import { toolbox } from \"./toolbox.ts\";\nimport initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s1.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\nimport { Hint } from \"~/utils/hint\";\n\nSiamo sempre alla corsa ad ostacoli di Carol, e di nuovo sono comparsi alcuni ostacoli.\nHai a disposizione gli stessi blocchi di prima per risolvere quattro livelli, **più uno nuovo:**\n\n- `N`: il numero di rocce che ti separano dalla bandierina.\n- `M`: il numero di ostacoli che ti separano dalla bandierina **(nuovo!)**.\n- `avanza`: avanza alla roccia successiva se possibile (sta ferma se ha davanti un ostacolo).\n- `salta`: salta oltre alla prossima roccia, atterrando su quella dopo.\n- `termina`: finisci la gara.\n\nTi servirà di nuovo sfruttare i cicli. Se ti senti in difficoltà, prova anche a leggere questo suggerimento:\n\n<Hint>\n  Guarda bene tutti i livelli: prima di ogni salto, quante volte al minimo devi avanzare per assicurarti di arrivare all'ostacolo? Quante volte bisogna avanzare dopo aver saltato tutti gli ostacoli?\n</Hint>\n\n<Blockly\n  toolbox={toolbox}\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Dato che ci sono $M$ ostacoli, dobbiamo saltare $M$ volte.\n> Per superare anche il terzo livello, bisogna avanzare almeno una volta prima di ogni salto.\n> Per superare anche l'ultimo livello, bisogna avanzare almeno due volte prima di ogni salto, e serve avanzare un'ulteriore volta dopo i salti.\n","<Contest>\n\n<Section>\n  <Problem points={[5, 0, 0]}><S1SaltaTuttoCasoSingolo /></Problem>\n  <Problem points={[5, 0, 0]}><S2SaltaTuttoLivelliNocicli /></Problem>\n  <Problem points={[5, 0, 0]}><S3SaltaTuttoCicloPiatto /></Problem>\n  <Problem points={[5, 0, 0]}><S4SaltaTuttoCicloOstacoli /></Problem>\n</Section>\n\n</Contest>\n","# Corso di Programmazione a Blocchi\n\n## Lezione 1 - Blocchi Esecuzione e Ripeti N\n\nBenvenuto nel corso di programmazione a blocchi per la preparazione ai Giochi di Fibonacci!\n\nQuesta è la tua prima lezione, in cui ti faremo vedere:\n\n- come funzionano i problemi di programmazione a blocchi;\n- i più semplici blocchi di tipo \"esecuzione\";\n- il blocco \"ripeti N volte\".\n\n## Punteggio e struttura delle lezioni\n\nLe lezioni di questo corso contengono alcuni problemi di programmazione a blocchi, da risolvere in al massimo _4 giorni_. Appena avrai finito di lavorarci, potrai cliccare su \"Termina\" per vedere subito un riepilogo del punteggio che hai ottenuto, e le soluzioni spiegate di tutti i problemi! Se anche non lo farai, la lezione verrà terminata automaticamente dopo 4 giorni. Potrai comunque ricominciare la lezione quante volte vuoi, cliccando sul tasto \"Ricomincia\" (freccia curva che torna indietro).\n\nI problemi richiedono di scrivere un **singolo** programma a blocchi, che viene valutato **contemporaneamente** su più livelli.\nQuindi attenzione che non puoi scrivere programmi diversi per i diversi livelli, ma uno solo!\nPer ciascun livello correttamente risolto di ciascun problema, otterrai _5 punti_.\n","import { NoAuth } from \"@olinfo/quizms/student\";\n\nimport Statement from \"./contest/contest.mdx\";\nimport Header from \"./header.md\";\n\nexport const metadata = {\n  title: \"Corso di Programmazione\",\n  description: \"Corso di Programmazione a Blocchi per i Giochi di Fibonacci\",\n};\n\nexport default function App() {\n  return (\n    <NoAuth contestLongName=\"\" contestName=\"Corso di Programmazione\" duration={5760}>\n      <Header />\n      <Statement />\n    </NoAuth>\n  );\n}\n"],"names":["toolbox","Visualizer","variables","state","jsx","jsxs","Fragment","Canvas","range","i","Sprite","rock","flatRock","bunny","flag","Variables","_jsx","_components","customBlocks","initialBlocks","testcases","Code","Equation","metadata","App","NoAuth","Header","Statement"],"mappings":"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"}