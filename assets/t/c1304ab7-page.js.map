{"version":3,"file":"c1304ab7-page.js","sources":["../../../../src/fibonacci-corso/6-programmazione-dinamica/contest/s-1-salta-gratis/toolbox.ts","../../../../src/fibonacci-corso/6-programmazione-dinamica/contest/s-1-salta-gratis/visualizer.jsx","../../../../src/fibonacci-corso/6-programmazione-dinamica/contest/s-1-salta-gratis/question.mdx","../../../../src/fibonacci-corso/6-programmazione-dinamica/contest/s-2-salta-caro/toolbox.ts","../../../../src/fibonacci-corso/6-programmazione-dinamica/contest/s-2-salta-caro/visualizer.jsx","../../../../src/fibonacci-corso/6-programmazione-dinamica/contest/s-2-salta-caro/question.mdx","../../../../src/fibonacci-corso/6-programmazione-dinamica/contest/s-4-investi-tutto/visualizer.jsx","../../../../src/fibonacci-corso/6-programmazione-dinamica/contest/s-4-investi-tutto/question.mdx","../../../../src/fibonacci-corso/6-programmazione-dinamica/contest/s-4-superbunny/visualizer.jsx","../../../../src/fibonacci-corso/6-programmazione-dinamica/contest/s-4-superbunny/question.mdx","../../../../src/fibonacci-corso/6-programmazione-dinamica/contest/contest.mdx","../../../../src/fibonacci-corso/6-programmazione-dinamica/header.md","../../../../src/fibonacci-corso/6-programmazione-dinamica/page.tsx"],"sourcesContent":["import type { ToolboxInfo } from \"blockly/core/utils/toolbox\";\n\nexport const toolbox: ToolboxInfo = {\n  kind: \"categoryToolbox\",\n  contents: [\n    {\n      kind: \"category\",\n      name: \"Variabili\",\n      categorystyle: \"variable_category\",\n      custom: \"VARIABLE\",\n    },\n    {\n      kind: \"category\",\n      name: \"Matematica\",\n      categorystyle: \"math_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"math_number\",\n          fields: { NUM: 123 },\n        },\n        {\n          kind: \"block\",\n          type: \"math_arithmetic\",\n          fields: {\n            OP: \"ADD\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Logica\",\n      categorystyle: \"logic_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"logic_compare\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_operation\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_negate\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n          extraState: {\n            hasElse: \"true\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Cicli\",\n      categorystyle: \"loop_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_repeat_ext\",\n          inputs: {\n            TIMES: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n          },\n        },\n        {\n          kind: \"block\",\n          type: \"controls_whileUntil\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_for\",\n          fields: {\n            VAR: \"i\",\n          },\n          inputs: {\n            FROM: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 1 },\n              },\n            },\n            TO: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n            BY: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 1 },\n              },\n            },\n          },\n        },\n      ],\n    },\n  ],\n};\n","\"use client\";\n\nimport clsx from \"clsx\";\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=66\";\nimport carrot from \"./asy/carrot.asy?w=40\";\nimport flag from \"./asy/flag.asy?w=80\";\nimport flatRock from \"./asy/flat_rock.asy?w=120\";\nimport pricedRock from \"./asy/priced_rock.asy?w=120\";\n\nexport default function Visualizer({ variables, state }) {\n  if (state.N > 50) {\n    return (\n      <div className=\"text-slate-800 p-4\">\n        La visualizzazione è disponibile solo per i primi 5 livelli.\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Canvas scale={130}>\n        {state.start === 1 ? null : (\n          <Sprite\n            src={bunny}\n            alt=\"Tip-Tap\"\n            x={state.pos + 0.2}\n            y={0.2 - 0.6 * state.start}\n            follow\n          />\n        )}\n        {range(state.N).map((i) => {\n          return (\n            <Sprite\n              src={state.cost[i] === 0 ? flatRock : pricedRock}\n              alt={state.cost[i] === 0 ? \"roccia gratis\" : \"roccia a pagamento\"}\n              x={i}\n              y={1.5}\n              key={`rock${i}`}\n            />\n          );\n        })}\n        {range(state.N).map((i) =>\n          state.cost[i] === 0 ? null : (\n            <Rectangle\n              color=\"transparent\"\n              width={0.5}\n              height={0.3}\n              key={`cost${i}`}\n              x={i}\n              y={1.8}\n              className={clsx(\n                \"!border-none flex items-center justify-end text-3xl decoration-red-500\",\n                state.pos === i && state.flight === 0 ? \"underline text-red-500\" : \"text-black\",\n              )}>\n              {state.cost[i]}\n            </Rectangle>\n          ),\n        )}\n        {range(state.N).map((i) =>\n          state.cost[i] === 0 ? null : (\n            <Sprite src={carrot} alt=\"carota\" x={i + 0.5} y={1.8} key={`carrot${i}`} />\n          ),\n        )}\n        {state.start < 1 ? null : (\n          <Sprite src={bunny} alt=\"Tip-Tap\" x={state.pos + 0.2} y={0.8 - state.flight} follow />\n        )}\n        <Sprite src={flag} alt=\"Bandierina\" x={state.N - 1.4} y={0.9} />\n      </Canvas>\n      <Variables\n        variables={{ ...variables, \"N (num. rocce)\": state.N, \"carote spese\": state.count }}\n      />\n    </>\n  );\n}\n","import { toolbox } from \"./toolbox.ts\";\nimport initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s1.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\nimport { Hint } from \"~/utils/hint\";\n\nCarol, nota per la sua passione per la corsa ad ostacoli, sta iniziando un nuovo tipo di competizione:\nla **corsa a pagamento**! Il funzionamento è simile a quello della corsa ad ostacoli, solo che invece\ndegli ostacoli (su cui non si può mai atterrare) ci sono alcune rocce marroni che sono _a pagamento_.\nCarol può atterrare sulle rocce a pagamento, ma se lo fa dovrà pagare alcune carote di penalità alla\nfine della corsa!\n\nIl percorso è composto da $N$ rocce, numerate da $1$ a $N$, e la roccia $i$-esima ha un costo di $P_i$.\nCarol comincia subito prima della prima roccia, e deve raggiungere o superare la bandierina finale\n(sull'ultima roccia). In questa prima corsa, gli organizzatori sono stati attenti ad assicurarsi che\n**non ci siano mai due rocce a pagamento di seguito**. Hai a disposizione questi blocchi:\n\n- `N`: il numero di rocce del percorso.\n- `posizione Carol`: la posizione corrente di Carol.\n- `costo roccia` $i$: il costo $P_i$ in carote per atterrare sulla $i$-esima roccia del percorso (zero per le rocce gratis).\n- `comincia la corsa`: comincia la corsa dalla posizione di partenza.\n- `avanza`: avanza alla roccia successiva.\n- `salta`: salta oltre alla prossima roccia, atterrando su quella dopo.\n- `termina`: finisci la corsa e vai a pagare le penalità.\n\nAiuta Carol a completare il percorso pagando meno carote possibile!\n\n<Hint>\n  Quando cominci la corsa, ad ogni punto del percorso, devi scegliere tra avanzare e saltare.\n  Come nella scorsa lezione, puoi scegliere cosa fare in modo greedy!\n</Hint>\n\n<Blockly\n  toolbox={toolbox}\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Secondo questo programma, Carol comincia subito la corsa dalla posizione di partenza.\n> Poi, fino a che non raggiunge l'ultima roccia (in posizione $N$), procede saltando o avanzando.\n> Se la roccia davanti a Carol è gratis, avanza; invece se è a pagamento la salta.\n> Dato che non ci sono due rocce a pagamento vicine, Carol riuscirà in questo modo a raggiungere\n> la fine del percorso senza pagare nessuna carota!\n\nPrima di passare alla prossima domanda, assicurati di aver risolto **tutti i livelli** di questa!","import type { ToolboxInfo } from \"blockly/core/utils/toolbox\";\n\nexport const toolbox: ToolboxInfo = {\n  kind: \"categoryToolbox\",\n  contents: [\n    {\n      kind: \"category\",\n      name: \"Variabili\",\n      categorystyle: \"variable_category\",\n      custom: \"VARIABLE\",\n    },\n    {\n      kind: \"category\",\n      name: \"Matematica\",\n      categorystyle: \"math_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"math_number\",\n          fields: { NUM: 123 },\n        },\n        {\n          kind: \"block\",\n          type: \"math_arithmetic\",\n          fields: {\n            OP: \"ADD\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Logica\",\n      categorystyle: \"logic_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"logic_compare\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_operation\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_negate\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n          extraState: {\n            hasElse: \"true\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Cicli\",\n      categorystyle: \"loop_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_repeat_ext\",\n          inputs: {\n            TIMES: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n          },\n        },\n        {\n          kind: \"block\",\n          type: \"controls_whileUntil\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_for\",\n          fields: {\n            VAR: \"i\",\n          },\n          inputs: {\n            FROM: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 1 },\n              },\n            },\n            TO: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n            BY: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 1 },\n              },\n            },\n          },\n        },\n      ],\n    },\n  ],\n};\n","\"use client\";\n\nimport clsx from \"clsx\";\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=66\";\nimport carrot from \"./asy/carrot.asy?w=40\";\nimport flag from \"./asy/flag.asy?w=80\";\nimport pricedRock from \"./asy/priced_rock.asy?w=120\";\n\nexport default function Visualizer({ variables, state }) {\n  if (state.N > 50) {\n    return (\n      <div className=\"text-slate-800 p-4\">\n        La visualizzazione è disponibile solo per i primi 5 livelli.\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Canvas scale={130}>\n        {state.start === 1 ? null : (\n          <Sprite\n            src={bunny}\n            alt=\"Tip-Tap\"\n            x={state.pos + 0.2}\n            y={0.2 - 0.6 * state.start}\n            follow\n          />\n        )}\n        {range(state.N).map((i) => {\n          return (\n            <Sprite src={pricedRock} alt={\"roccia a pagamento\"} x={i} y={1.5} key={`rock${i}`} />\n          );\n        })}\n        {range(state.N).map((i) =>\n          state.cost[i] === 0 ? null : (\n            <Rectangle\n              color=\"transparent\"\n              width={0.5}\n              height={0.3}\n              key={`cost${i}`}\n              x={i}\n              y={1.8}\n              className={clsx(\n                \"!border-none flex items-center justify-end text-3xl decoration-red-500\",\n                state.pos === i && (state.flight === 0) & (state.start === 1)\n                  ? \"underline text-red-500\"\n                  : \"text-black\",\n              )}>\n              {state.cost[i]}\n            </Rectangle>\n          ),\n        )}\n        {range(state.N).map((i) =>\n          state.cost[i] === 0 ? null : (\n            <Sprite src={carrot} alt=\"carota\" x={i + 0.5} y={1.8} key={`carrot${i}`} />\n          ),\n        )}\n        {range(state.N).map((i) => (\n          <Rectangle\n            color=\"black\"\n            borderColor=\"gray\"\n            width={0.7}\n            height={0.5}\n            key={`value${i}`}\n            x={i + 0.1}\n            y={0.8}\n            className=\"flex items-center justify-center text-3xl text-white\">\n            {state.value[i]}\n          </Rectangle>\n        ))}\n        {state.start < 1 ? null : (\n          <Sprite src={bunny} alt=\"Tip-Tap\" x={state.pos + 0.2} y={0.8 - state.flight} follow />\n        )}\n        <Sprite src={flag} alt=\"Bandierina\" x={state.N - 1.4} y={0.9} />\n      </Canvas>\n      <Variables\n        variables={{ ...variables, \"N (num. rocce)\": state.N, \"carote spese\": state.count }}\n      />\n    </>\n  );\n}\n","import { toolbox } from \"./toolbox.ts\";\nimport initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s2.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\nimport { Hint } from \"~/utils/hint\";\n\nCarol vuole partecipare ad una nuova _corsa a pagamento_. Dato che con la prima corsa gli organizzatori\nhanno guadagnato poco, hanno deciso che ora metteranno **solamente rocce a pagamento**!\nIn compenso, hanno messo una lavagna ad ogni posizione del percorso, su cui i partecipanti possono\nannotare una loro **preferenza numerica** per ciascuna posizione **prima di cominciare la corsa**.\nHai a disposizione gli stessi blocchi di prima, più due nuovi per leggere e scrivere sulle lavagne:\n\n- `N`: il numero di rocce del percorso.\n- `posizione Carol`: la posizione corrente di Carol.\n- `costo roccia` $i$: il costo $P_i$ in carote per atterrare sulla $i$-esima roccia del percorso (zero per le rocce gratis).\n- `scrivi` $x$ `sulla lavagna` $i$: Carol scrive la preferenza $x$ sulla lavagna $i$-esima prima di cominciare la corsa **(nuovo!)**.\n- `preferenza` $i$: il numero che Carol ha scritto sulla lavagna $i$-esima, <u>oppure zero se la lavagna </u>$i$<u>-esima non esiste</u> **(nuovo!)**.\n- `comincia la corsa`: comincia la corsa dalla posizione di partenza.\n- `avanza`: avanza alla roccia successiva.\n- `salta`: salta oltre alla prossima roccia, atterrando su quella dopo.\n- `termina`: finisci la corsa e vai a pagare le penalità.\n\nAiuta Carol a completare il percorso pagando meno carote possibile!\n\nQuesta volta scegliere tra avanzare e saltare in modo greedy (senza preoccuparsi del resto del percorso)\nnon ci farà pagare il meno possibile. _Se vuoi, ti invitiamo a provare e vedere come va!_ Fare meglio non\nsarà facile, e per riuscirci avremo bisogno di usare prima le lavagne e annotarci le giuste preferenze\nsopra ogni posizione. Poi, potremo scegliere tra avanzare e saltare basandoci sui numeri che abbiamo\nscritto sulle lavagne.\n\n<Hint label=\"suggerimento 1\">\n  Il valore di preferenza che scriveremo dovrà servire a guidarci nelle scelte, per cui potremo guardare\n  la preferenza delle prossime rocce più vicine per capire se avanzare o saltare. Cosa dovrà quindi\n  rappresentare questo valore di preferenza?\n</Hint>\n\n<Hint label=\"suggerimento 2\">\n  Per calcolare i valori di preferenza bisognerà utilizzare un ciclo contatore per scandire tutte le rocce.\n  Conviene scandirle dall'inizio o dalla fine? Ti ricordiamo che per scandire in avanti nel ciclo contatore\n  basta impostare che il ciclo proceda \"per 1\", mentre per scandire all'indietro bisogna indicare \"per -1\".\n</Hint>\n\n<Blockly\n  toolbox={toolbox}\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Secondo questo programma, prima di cominciare la corsa, scandiamo tutte le rocce dall'ultima tornando\n> indietro verso la prima. Per ciascuna di essere, annotiamo un valore di preferenza sulla lavagna, che\n> corrisponde a **quanto ci costa finire il percorso da quel punto in poi**. Ci viene anche in aiuto che\n> il blocco `preferenza` $i$ restituisce zero per tutte le posizioni $i$ dopo la fine del percorso, che è\n> proprio pari al costo (zero) che abbiamo da quel punto in poi (visto che lì abbiamo già finito).\n>\n> Per calcolare quindi la preferenza (cioè il costo per finire da una certa roccia in poi), dobbiamo\n> trovare il minimo tra la preferenza delle due rocce successive (cioè i costi per finire da quelle rocce).\n> Salviamo questo valore nella variabile _minimo_, e da questo otteniamo la preferenza della roccia\n> corrente aggiungendoci il suo costo.\n>\n> Al termine di questo ciclo, avremo compilato le preferenze su tutte le lavagne, e quindi possiamo\n> procedere in modo simile al problema precedente. Cominciamo quindi la corsa dalla posizione di partenza,\n> poi procediamo saltando o avanzando fino a che non abbiamo raggiunto o superato l'ultima roccia.\n> Avanziamo se la preferenza della prossima roccia è minore di quella della roccia successiva, altrimenti\n> saltiamo. In questo modo andremo a spendere esattamente il numero minimo di carote per raggiungere la\n> fine del percorso!\n\nPrima di passare alla prossima domanda, assicurati di aver risolto **tutti i livelli** di questa!\n\n**(lezione in costruzione, continua...)**","\"use client\";\n\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport arrow from \"./asy/arrow.asy?w=120\";\nimport bunny from \"./asy/bunny.asy?w=66\";\nimport carrot from \"./asy/carrot.asy?w=30\";\nimport certificate from \"./asy/certificate.asy?w=120\";\nimport flag from \"./asy/flag.asy?w=80\";\n\nexport default function Visualizer({ variables, state }) {\n  const step = 15;\n\n  if (state.N > 10) {\n    return (\n      <div className=\"text-slate-800 p-4\">\n        La visualizzazione è disponibile solo per i primi 5 livelli.\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Canvas gravity=\"bottom\" scale={10}>\n        <Sprite src={bunny} alt=\"Bunny\" x={step * (state.pos + 0.25) - 1} y={26} follow />\n        <Sprite src={flag} alt=\"fine\" x={step * (state.N + 0.8) - 1} y={27} />\n        {range(state.N).map((i) => (\n          <Sprite\n            src={certificate}\n            alt=\"titolo\"\n            x={step * i}\n            y={10 + (state.taken === i ? 5 : 0)}\n            key={`titolo${i}`}\n          />\n        ))}\n        {range(state.N).map((i) => (\n          <Rectangle\n            color=\"transparent\"\n            width={12}\n            height={3}\n            key={`day${i}`}\n            x={step * i + 0.5}\n            y={23 + (state.taken === i ? 5 : 0)}\n            className=\"!border-none flex items-center justify-start italic text-xl\">\n            {i === 0 ? \"Carrot\" : `Giorno ${i}`}\n          </Rectangle>\n        ))}\n        {range(state.N).map((i) => (\n          <Rectangle\n            color=\"transparent\"\n            width={7}\n            height={3}\n            key={`value${i}`}\n            x={step * i}\n            y={20 + (state.taken === i ? 5 : 0)}\n            className=\"!border-none flex items-center justify-end text-2xl\">\n            {state.V[i]}\n          </Rectangle>\n        ))}\n        {range(state.N).map((i) => (\n          <Sprite\n            src={carrot}\n            alt=\"carota\"\n            x={step * i + 6.8}\n            y={20.2 + (state.taken === i ? 5 : 0)}\n            key={`carota${i}`}\n          />\n        ))}\n        {range(state.N).map((i) => (\n          <Rectangle\n            color=\"transparent\"\n            width={7}\n            height={3}\n            key={`gain${i}`}\n            x={step * i + 1}\n            y={17 + (state.taken === i ? 5 : 0)}\n            className=\"!border-none flex items-center justify-end italic text-2xl\">\n            {`+${state.G[i]}`}\n          </Rectangle>\n        ))}\n        {range(state.N).map((i) => (\n          <Sprite\n            src={carrot}\n            alt=\"carota\"\n            x={step * i + 8}\n            y={17.2 + (state.taken === i ? 5 : 0)}\n            key={`+carota${i}`}\n          />\n        ))}\n        {range(state.N).map((i) => (\n          <Rectangle\n            color=\"transparent\"\n            width={10}\n            height={3}\n            key={`gain${i}`}\n            x={step * i + 1}\n            y={14 + (state.taken === i ? 5 : 0)}\n            className=\"flex items-center justify-start font-bold text-2xl\">\n            {state.pref[i]}\n          </Rectangle>\n        ))}\n        {range(state.N).map((i) => {\n          return (\n            <Sprite\n              src={arrow}\n              alt=\"freccia\"\n              x={step * i + 0.7 + (state.next[i] - i) * 7.3}\n              y={10 - 2 * (state.next[i] - i)}\n              scaleX={1.3 * (state.next[i] - i)}\n              scaleY={1.3 * (state.next[i] - i)}\n              key={`+freccia${i}`}\n            />\n          );\n        })}\n        {range(state.taken >= 0 ? 1 : 0).map(() => {\n          return (\n            <Sprite\n              src={carrot}\n              alt=\"carotacorrente\"\n              x={step * state.pos + (state.taken === state.pos ? 6.8 : 12.8)}\n              y={state.taken === state.pos ? 25.2 : 30.2}\n              key=\"carval\"\n            />\n          );\n        })}\n        {range(state.taken >= 0 ? 1 : 0).map(() => {\n          return (\n            <Rectangle\n              color=\"transparent\"\n              width={5}\n              height={3}\n              key=\"curval\"\n              x={step * state.pos + (state.taken === state.pos ? 2 : 8)}\n              y={state.taken === state.pos ? 25 : 30}\n              className=\"!border-none flex items-center justify-end font-bold text-[25px]\">\n              {state.curval}\n            </Rectangle>\n          );\n        })}\n      </Canvas>\n      <Variables\n        variables={{\n          ...variables,\n          \"N (num. giorni)\": state.N,\n        }}\n      />\n    </>\n  );\n}\n","import initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s4.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nPer il suo compleanno, a Tip-Tap hanno regalato un titolo di investimento della **Carrot**. Il titolo oggi ha un valore $T_0$ carote,\nma il suo valore sale di $G_0$ carote ogni giorno, per cui tra $k$ giorni varrà $T_0 + k \\cdot G_0$. Il nostro amico allora ha deciso di darsi alla finanza!\n\nTuttavia, un solo intermediario accetta di fare affari con i conigli, e con delle condizioni molto restrittive. Ogni giorno,\nl'intermediario offre a Tip-Tap un singolo titolo: nel giorno $i$, un titolo che vale $T_i$ in quel giorno e il cui valore salirà di $G_i$\nin ogni successivo giorno. Se il titolo che Tip-Tap possiede quel giorno vale più di quello offerto dall'intermediario, Tip-Tap può decidere di scambiare il\ntitolo che ha con quello offerto, ma senza ricevere nessun resto in cambio.\n\nQuello che però l'intermediario non sa è che Tip-Tap è molto furbo, ed è riuscito a scoprire quali titoli offrirà l'intermediario per i prossimi $N$ giorni.\nUsa queste informazioni per assicurarti il massimo guadagno dopo $N$ giorni!\nHai a disposizione questi blocchi per ispezionare la situazione:\n\n- `N`: il numero di giorni.\n- `valore del titolo` $i$: il valore $T_i$ del titolo che viene proposto nel giorno $i$.\n- `guadagno del titolo` $i$: il guadagno $G_i$ che avrà il titolo $i$-esimo in ogni giorno successivo.\n- `valore del titolo` $i$ `al giorno` $d$: il valore $T_i$ del titolo che viene proposto nel giorno $i$, incrementato di $G_i$ al giorno fino al giorno $d$ ($T_i + (d-i) \\cdot G_i$).\n\nInoltre, hai a disposizione questi blocchi per annotarti informazioni di supporto:\n\n- `annota preferenza` $x$ `per il titolo` $i$: annota un numero $x$ a tua scelta sul titolo $i$-esimo.\n- `leggi preferenza per il titolo` $i$: leggi il numero che hai annotato sul titolo $i$-esimo.\n\nInfine, hai a disposizione questi blocchi per riportare un piano finanziario:\n\n- `prendi il titolo` $k$ `dopo il titolo` $i$: pianifica di prendere il titolo $k$ come prossimo titolo dopo $i$ (se prenderai il titolo $i$).\n- `non prendere altri titoli dopo` $i$: pianifica di tenere il titolo $i$ fino alla fine degli $N$ giorni (e questo è il piano iniziale per tutti i titoli).\n- `termina`: segui il piano che hai indicato con i blocchi fino alla fine degli $N$ giorni.\n\n**Attenzione:** è possibile cambiare idea più volte su quale titolo prendere dopo un certo titolo $i$ (e se prenderne o no), usando più volte i blocchi relativi.\nNota inoltre che il tuo piano può pianificare un _prossimo titolo_ anche per titoli che in realtà non verranno poi presi nell'esecuzione finale.\n\n<Blockly\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> L'idea principale che serve a risolvere il problema è capire cosa annotare sui titoli. Supponiamo\n> di annotare su ogni titolo un numero che rappresenta **quanto al massimo potremmo avere all'ultimo giorno**,\n> **se prenderemo questo titolo e poi faremo le scelte migliori possibili**.\n> Con questa idea, un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Secondo questo programma, scandiamo i titoli dall'ultimo all'indietro dall'ultimo fino al primo, per capire\n> cosa possiamo annotarci sopra (e quale \"freccia\" mettere). Per l'ultimo ci sono poche scelte: dovremo per\n> forza tenerlo, quindi non mettiamo frecce e annotiamo il valore che acquisisce all'ultimo giorno.\n>\n> Per gli altri titoli $i$, iniziamo comunque allo stesso modo, considerando cosa possiamo ottenere se li tenessimo\n> fino alla fine, quindi annotando il valore che acquisirebbero all'ultimo giorno. Poi, però, dobbiamo consideriare\n> se ad un certo punto ci potrebbe convenire scambiarli con un altro titolo!\n>\n> Iteriamo quindi sui titoli $j$ successivi, verificando prima se lo scambio ci verrebbe accettato dall'intermediario,\n> e poi se lo scambio ci porterebbe vantaggio. Possiamo facilmente capire se ci porta vantaggio, andando a leggere\n> l'annotazione che su quel titolo avremo già messo, e che ci dice quanto al massimo potremo fare dal titolo $j$\n> in poi! Se questa è meglio di quello che abbiamo trovato finora per il titolo $i$, e lo scambio è accettabile,\n> ipotizziamo di fare lo scambio: aggiorniamo quindi l'annotazione per $i$ e programmiamo di prendere $j$ dopo $i$.\n>\n> Ripetendo questo procedimento per tutti i titoli, andiamo a costruire il piano di investimento migliore!\n>\n> ![statistiche](stats.asy)\n","\"use client\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=50\";\nimport platform from \"./asy/platform.asy?w=90\";\n\nexport default function Visualizer({ variables, state }) {\n  const { N, A, VA, B, VB } = state;\n  if (N > 50) {\n    return (\n      <div className=\"text-slate-800 p-4\">\n        La visualizzazione è disponibile solo per i primi 5 livelli.\n      </div>\n    );\n  }\n\n  const maxH = Math.max(...A);\n\n  const p = (y) => (3 * y) / maxH;\n\n  return (\n    <>\n      <Canvas scale={100}>\n        {A.map((a, i) => (\n          <Rectangle\n            key={i}\n            color=\"#d1d5db\"\n            borderColor=\"#6b7280\"\n            x={i + 1.48}\n            y={-p(a) - 0.1}\n            height={p(a) + 0.3}\n            width={0.15}\n            className=\"rounded-md\"\n          />\n        ))}\n        {A.map((a, i) => (\n          <Sprite key={i} src={platform} alt=\"Pedana\" x={i + 1.1} y={-p(a)} />\n        ))}\n        {B.map((b, i) => (\n          <Sprite key={i} src={platform} alt=\"Pedana\" x={i + 1.1} y={-p(b)} />\n        ))}\n        {VA.map((v, i) => (\n          <Rectangle\n            key={i}\n            color=\"transparent\"\n            borderColor=\"transparent\"\n            height={1}\n            width={2.2}\n            x={i + 1.1}\n            y={-p(A[i]) - 0.35}\n            className=\"text-3xl text-gray-400 [text-shadow:0_0_2px_#fff]\">\n            {v}\n          </Rectangle>\n        ))}\n        {VB.map((v, i) => (\n          <Rectangle\n            key={i}\n            color=\"transparent\"\n            borderColor=\"transparent\"\n            height={1}\n            width={2.2}\n            x={i + 1.1}\n            y={-p(B[i]) - 0.35}\n            className=\"text-3xl text-gray-400 [text-shadow:0_0_2px_#fff]\">\n            {v}\n          </Rectangle>\n        ))}\n        <Rectangle color=\"brown\" borderColor=\"#D35A1E\" height={0.3} width={Math.min(N, 50) + 2} />\n        <Sprite src={bunny} alt=\"Bunny\" x={0.2} y={-0.8} />\n      </Canvas>\n      <Variables variables={{ ...variables }} />\n    </>\n  );\n}\n","import initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s4.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nIl nuovissimo videogioco _SuperBunny_ è finalmente in commercio! Bunny, il protagonista del videogioco, in ogni livello deve superare $N$ ostacoli numerati da $1$ ad $N$.\nSu ogni ostacolo ci sono $2$ pedane (ad altezze diverse) su cui Bunny può saltare: l'ostacolo numero $i$ è fatto da una pedana più in alto che si trova ad una altezza di $A_i$ metri, e da una pedana più in basso ad un'altezza di $B_i$ metri.\n\nBunny parte da terra ad altezza $0$ e deve per prima cosa saltare sull'ostacolo numero $1$ scegliendo una delle due pedane. Una volta raggiunto l'ostacolo $1$, sceglierà una delle due pedane dell'ostacolo successivo, il $2$, e ci salterà sopra.\nL'obiettivo del gioco è superare in ordine tutti gli ostacoli fino all'ostacolo numero $N$. Anche se Bunny può scegliere ogni volta su quale pedana di un ostacolo saltare, non tutti i salti sono uguali!\nInfatti, più il salto è grande e più tempo ci vuole per farlo. Per saltare da pedana ad altezza $h$ fino ad una pedana sull'ostacolo successivo ad altezza $k$, Bunny ci metterà una quantità di secondi pari alla _differenza assoluta_ tra $h$ e $k$.\n\n_**Nota:** la differenza assoluta tra $h$ e $k$, in formule $|h - k|$, indica il valore della differenza tra $h$ e $k$ ignorando il segno: quindi $h - k$ se $h > k$ o $k - h$ se $k > h$._\n\nIl tempo totale impiegato per completare un livello è la somma dei tempi impiegati in ogni salto. Quanti secondi servono a Bunny per completare il livello?\nPuoi usare questi blocchi:\n\n- `N`: il numero $N$ di ostacoli.\n- `pedana alta i`: l'altezza $A_i$ della $i$-esima pedana più in alto.\n- `pedana bassa i`: l'altezza $B_i$ della $i$-esima pedana più in basso.\n- `differenza assoluta tra x e y`: la differenza assoluta $|x - y|$ tra $x$ e $y$.\n- `minimo tra x e y`: il valore minimo tra due numeri $x$ e $y$.\n- `termina in x tempo`: riporta che è possibile raggiungere l'$N$-esimo ostacolo in $x$ tempo.\n\nInoltre, se ti serve, avrai la possibilità di annotarti un valore a tua scelta su ogni piattaforma, che verrà anche mostrato nella figura, con questi blocchi:\n\n- `valore pedana alta i`: il valore scritto sulla pedana alta $i$-esima.\n- `valore pedana bassa i`: il valore scritto sulla pedana bassa $i$-esima.\n- `imposta valore pedana alta i a x`: scrivi sulla pedana alta $i$-esima il valore $x$.\n- `imposta valore pedana bassa i a x`: scrivi sulla pedana bassa $i$-esima il valore $x$.\n\n_**Attenzione:** non ti viene richiesto di ricostruire i salti da fare, basta che calcoli il tempo necessario!_\n\n_**Avvertimento:** incastrare un blocco grosso in un altro blocco può non essere semplice. Cerca di mettere la **punta sinistra** del blocco grosso nello spazio in cui vuoi inserirlo, per non avere difficoltà!_\n\n<Blockly\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  debug={{ logBlocks: false, logJs: false, logVariables: false }}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> In questo programma, segnamo come valore su ciascuna pedana il **tempo minimo per raggiungerla**.\n> Per le pedane sul primo ostacolo, il tempo per raggiungerle è pari alla loro altezza.\n> Per ogni pedana successiva (alta o bassa), il tempo minimo per raggiungerla è pari al minimo tra due cose:\n>\n> - se decidiamo di arrivarci dalla pedana alta precedente, allora è pari al tempo minimo (valore) della pedana alta precedente, più la differenza assoluta tra la pedana che stiamo considerando e la pedana alta precedente;\n> - se decidiamo di arrivarci dalla pedana bassa precedente, allora si può calcolare analogamente ma considerando il valore e la differenza assoluta con la pedana bassa precedente.\n>\n> Una volta scritti tutti questi valori, il migliore tempo per chiudere il livello sarà il minore\n> tra il tempo minimo (valore) per raggiungere l'ultima pedana alta, e il tempo minimo (valore)\n> per raggiungere l'ultima pedana bassa.\n","<Contest>\n\n<Section>\n  <Problem points={[5, 0, 0]}><S1SaltaGratis /></Problem>\n  <Problem points={[5, 0, 0]}><S2SaltaCaro /></Problem>\n</Section>\n\n</Contest>\n","# Corso di Programmazione a Blocchi\n\n## Lezione 6 - Programmazione Dinamica\n\nBentornato nel corso di programmazione a blocchi per la preparazione ai Giochi di Fibonacci!\n\nQuesta è la sesta lezione, nella quale non introdurremo blocchi nuovi. Invece, vedremo alcuni esempi\ndella strategia risolutiva nota come _programmazione dinamica_. Come per le soluzioni greedy, anche\nin questo caso dovremo affrontare una serie di scelte. Nei problemi che vedremo questa volta, però,\nnon potremo fare le scelte senza considerare le conseguenze: dovremo quindi andare a salvarci dei\nrisultati intermedi di parti del problema, ed utilizzarli per guidare le nostre scelte.\n\nSe non l'avessi ancora fatto, ti invitiamo a completare le lezioni precedenti prima di iniziare questa (anche se pensi di conoscere già quegli argomenti!).\n**Attenzione: anche questa lezione è un po' più lunga delle prime quattro!**\n\n## Punteggio e struttura delle lezioni\n\nLe lezioni di questo corso contengono alcuni problemi di programmazione a blocchi, da risolvere in al massimo _4 giorni_. Appena avrai finito di lavorarci, potrai cliccare su \"Termina\" per vedere subito un riepilogo del punteggio che hai ottenuto, e le soluzioni spiegate di tutti i problemi! Se anche non lo farai, la lezione verrà terminata automaticamente dopo 4 giorni. Potrai comunque ricominciare la lezione quante volte vuoi, cliccando sul tasto \"Ricomincia\" (freccia curva che torna indietro).\n\nI problemi richiedono di scrivere un **singolo** programma a blocchi, che viene valutato **contemporaneamente** su più livelli.\nQuindi attenzione che non puoi scrivere programmi diversi per i diversi livelli, ma uno solo!\nPer ciascun livello correttamente risolto di ciascun problema, otterrai _5 punti_.\n\nQuando termini la lezione, ti consigliamo di **leggere tutte le soluzioni spiegate**, anche dei problemi che avevi\ngià risolto correttamente: potresti scoprire modi diversi di risolvere quegli stessi problemi, e dei suggerimenti\nche ti potrebbero tornare utili per altri problemi simili che troverai in futuro!","import { NoAuth } from \"@olinfo/quizms/student\";\n\nimport Statement from \"./contest/contest.mdx\";\nimport Header from \"./header.md\";\n\nexport const metadata = {\n  title: \"Corso di Programmazione\",\n  description: \"Corso di Programmazione a Blocchi per i Giochi di Fibonacci\",\n};\n\nexport default function App() {\n  return (\n    <NoAuth contestLongName=\"\" contestName=\"Corso di Programmazione\" duration={5760}>\n      <Header />\n      <Statement />\n    </NoAuth>\n  );\n}\n"],"names":["toolbox","Visualizer","variables","state","jsx","jsxs","Fragment","Canvas","Sprite","bunny","range","i","flatRock","pricedRock","Rectangle","clsx","carrot","flag","Variables","_jsx","_components","Equation","_jsxs","customBlocks","initialBlocks","testcases","Code","certificate","arrow","N","A","VA","B","VB","maxH","p","y","a","platform","b","v","logBlocks","logJs","logVariables","metadata","App","NoAuth","Header","Statement"],"mappings":";kXAEO,MAAMA,EAAuB,CAClC,KAAM,kBACN,SAAU,CACR,CACE,KAAM,WACN,KAAM,YACN,cAAe,oBACf,OAAQ,UAAA,EAEV,CACE,KAAM,WACN,KAAM,aACN,cAAe,gBACf,SAAU,CACR,CACE,KAAM,QACN,KAAM,cACN,OAAQ,CAAE,IAAK,GAAA,CAAI,EAErB,CACE,KAAM,QACN,KAAM,kBACN,OAAQ,CACN,GAAI,KAAA,CACN,CACF,CACF,EAEF,CACE,KAAM,WACN,KAAM,SACN,cAAe,iBACf,SAAU,CACR,CACE,KAAM,QACN,KAAM,eAAA,EAER,CACE,KAAM,QACN,KAAM,iBAAA,EAER,CACE,KAAM,QACN,KAAM,cAAA,EAER,CACE,KAAM,QACN,KAAM,aAAA,EAER,CACE,KAAM,QACN,KAAM,cACN,WAAY,CACV,QAAS,MAAA,CACX,CACF,CACF,EAEF,CACE,KAAM,WACN,KAAM,QACN,cAAe,gBACf,SAAU,CACR,CACE,KAAM,QACN,KAAM,sBACN,OAAQ,CACN,MAAO,CACL,MAAO,CACL,KAAM,cACN,OAAQ,CAAE,IAAK,EAAA,CAAG,CACpB,CACF,CACF,EAEF,CACE,KAAM,QACN,KAAM,qBAAA,EAER,CACE,KAAM,QACN,KAAM,eACN,OAAQ,CACN,IAAK,GAAA,EAEP,OAAQ,CACN,KAAM,CACJ,MAAO,CACL,KAAM,cACN,OAAQ,CAAE,IAAK,CAAA,CAAE,CACnB,EAEF,GAAI,CACF,MAAO,CACL,KAAM,cACN,OAAQ,CAAE,IAAK,EAAA,CAAG,CACpB,EAEF,GAAI,CACF,MAAO,CACL,KAAM,cACN,OAAQ,CAAE,IAAK,CAAA,CAAE,CACnB,CACF,CACF,CACF,CACF,CACF,CAEJ,qnHClGA,SAAwBC,GAAW,CAAE,UAAAC,EAAW,MAAAC,GAAS,CACvD,OAAIA,EAAM,EAAI,GAEVC,EAAAA,IAAC,MAAA,CAAI,UAAU,qBAAqB,SAAA,+DAEpC,EAKFC,EAAAA,KAAAC,WAAA,CACE,SAAA,CAAAD,EAAAA,KAACE,EAAA,CAAO,MAAO,IACZ,SAAA,CAAAJ,EAAM,QAAU,EAAI,KACnBC,EAAAA,IAACI,EAAA,CACC,IAAKC,EACL,IAAI,UACJ,EAAGN,EAAM,IAAM,GACf,EAAG,GAAM,GAAMA,EAAM,MACrB,OAAM,EAAA,CAAA,EAGTO,EAAMP,EAAM,CAAC,EAAE,IAAKQ,GAEjBP,EAAAA,IAACI,EAAA,CACC,IAAKL,EAAM,KAAKQ,CAAC,IAAM,EAAIC,EAAWC,GACtC,IAAKV,EAAM,KAAKQ,CAAC,IAAM,EAAI,gBAAkB,qBAC7C,EAAGA,EACH,EAAG,GAAA,EACE,OAAOA,CAAC,EAAA,CAGlB,EACAD,EAAMP,EAAM,CAAC,EAAE,IAAKQ,GACnBR,EAAM,KAAKQ,CAAC,IAAM,EAAI,KACpBP,EAAAA,IAACU,EAAA,CACC,MAAM,cACN,MAAO,GACP,OAAQ,GAER,EAAGH,EACH,EAAG,IACH,UAAWI,EACT,yEACAZ,EAAM,MAAQQ,GAAKR,EAAM,SAAW,EAAI,yBAA2B,YAAA,EAEpE,SAAAA,EAAM,KAAKQ,CAAC,CAAA,EAPR,OAAOA,CAAC,EAAA,CAQf,EAGHD,EAAMP,EAAM,CAAC,EAAE,IAAKQ,GACnBR,EAAM,KAAKQ,CAAC,IAAM,EAAI,KACpBP,EAAAA,IAACI,EAAA,CAAO,IAAKQ,EAAQ,IAAI,SAAS,EAAGL,EAAI,GAAK,EAAG,KAAU,SAASA,CAAC,EAAI,CAAA,EAG5ER,EAAM,MAAQ,EAAI,KACjBC,EAAAA,IAACI,EAAA,CAAO,IAAKC,EAAO,IAAI,UAAU,EAAGN,EAAM,IAAM,GAAK,EAAG,GAAMA,EAAM,OAAQ,OAAM,GAAC,EAEtFC,EAAAA,IAACI,EAAA,CAAO,IAAKS,EAAM,IAAI,aAAa,EAAGd,EAAM,EAAI,IAAK,EAAG,EAAA,CAAK,CAAA,EAChE,EACAC,EAAAA,IAACc,EAAA,CACC,UAAW,CAAE,GAAGhB,EAAW,iBAAkBC,EAAM,EAAG,eAAgBA,EAAM,KAAA,CAAM,CAAA,CACpF,EACF,CAEJ,uTCtEA,SAAA,CAAA;AAAA,KAAAgB,MAAAC,EAAA,OAAA,CACK,SAAA,mBAAmB,CAAA,EAAA;AAAA,yFAAAD,MAAAC,EAAA,GAAA,CACgE,SAAA,aAAY,CAAA,EAAA;AAAA;AAAA,kBAAA,gBAIpG,SAAA,CAAA,6BAAAD,EAAAA,IAAAE,EAAA,uBAA6B,CAAA,EAAA,uBAAAF,EAAAA,IAAAE,EAAA,uBAAuB,CAAA,EAAA,MAAAC,OAAAF,EAAA,KAAA,4FAAM,CAAA,EAAA,gBAAAE,OAAAF,EAAA,KAAA,iGAAiB,CAAA,EAAA,mBAAAE,OAAAF,EAAA,KAAA,8FAA2B,CAAA,EAAA;AAAA;AAAA;AAAA,EAAAD,MAAAC,EAAA,OAAA,CAGpG,SAAA,mDAAmD,CAAA,EAAA,sCAAA;oGAEhD,CAAA,EAAA,oCAAA;kHACc,CAAA,EAAA,mCAAA;+GACH,CAAA,EAAA,IAAAE,OAAAF,EAAA,KAAA,4FAAI,CAAA,EAAA,aAAAD,EAAAA,IAAAE,EAAA,yBAAgB,CAAA,EAAA,kCAAAC,OAAAF,EAAA,KAAA,iGAAkC,CAAA,EAAA,kDAAA;oHACjD,CAAA,EAAA,kDAAA;yGACX,CAAA,EAAA,kCAAA;wGACD,CAAA,EAAA,gEAAA;0GACE,CAAA,EAAA,gDAAA;gBAEX,SAAA,qGAGE,SAAA;AAAA,kFAKSpB,QAAAA,EACKuB,aAAAA,EACCC,cAAAA,EACJC,UAAAA,EACCxB,WAAAA,oCAGZ,SAAA,uJAIA,SAAA,CAAA;AAAA,8DAAAqB,OAAAF,EAAA,KAAA,6FAC+D,CAAA,EAAA;AAAA;AAAA;AAAA,kDAAA,mBAKjE,SAAA,CAAA,sEAAAD,MAAAC,EAAA,OAAA,CAAqE,SAAA,iBAAiB,CAAA,EAAA,aAAA,iXCjD/E,MAAMpB,GAAuB,CAClC,KAAM,kBACN,SAAU,CACR,CACE,KAAM,WACN,KAAM,YACN,cAAe,oBACf,OAAQ,UAAA,EAEV,CACE,KAAM,WACN,KAAM,aACN,cAAe,gBACf,SAAU,CACR,CACE,KAAM,QACN,KAAM,cACN,OAAQ,CAAE,IAAK,GAAA,CAAI,EAErB,CACE,KAAM,QACN,KAAM,kBACN,OAAQ,CACN,GAAI,KAAA,CACN,CACF,CACF,EAEF,CACE,KAAM,WACN,KAAM,SACN,cAAe,iBACf,SAAU,CACR,CACE,KAAM,QACN,KAAM,eAAA,EAER,CACE,KAAM,QACN,KAAM,iBAAA,EAER,CACE,KAAM,QACN,KAAM,cAAA,EAER,CACE,KAAM,QACN,KAAM,aAAA,EAER,CACE,KAAM,QACN,KAAM,cACN,WAAY,CACV,QAAS,MAAA,CACX,CACF,CACF,EAEF,CACE,KAAM,WACN,KAAM,QACN,cAAe,gBACf,SAAU,CACR,CACE,KAAM,QACN,KAAM,sBACN,OAAQ,CACN,MAAO,CACL,MAAO,CACL,KAAM,cACN,OAAQ,CAAE,IAAK,EAAA,CAAG,CACpB,CACF,CACF,EAEF,CACE,KAAM,QACN,KAAM,qBAAA,EAER,CACE,KAAM,QACN,KAAM,eACN,OAAQ,CACN,IAAK,GAAA,EAEP,OAAQ,CACN,KAAM,CACJ,MAAO,CACL,KAAM,cACN,OAAQ,CAAE,IAAK,CAAA,CAAE,CACnB,EAEF,GAAI,CACF,MAAO,CACL,KAAM,cACN,OAAQ,CAAE,IAAK,EAAA,CAAG,CACpB,EAEF,GAAI,CACF,MAAO,CACL,KAAM,cACN,OAAQ,CAAE,IAAK,CAAA,CAAE,CACnB,CACF,CACF,CACF,CACF,CACF,CAEJ,20JCnGA,SAAwBC,GAAW,CAAE,UAAAC,EAAW,MAAAC,GAAS,CACvD,OAAIA,EAAM,EAAI,GAEVC,EAAAA,IAAC,MAAA,CAAI,UAAU,qBAAqB,SAAA,+DAEpC,EAKFC,EAAAA,KAAAC,WAAA,CACE,SAAA,CAAAD,EAAAA,KAACE,EAAA,CAAO,MAAO,IACZ,SAAA,CAAAJ,EAAM,QAAU,EAAI,KACnBC,EAAAA,IAACI,EAAA,CACC,IAAKC,EACL,IAAI,UACJ,EAAGN,EAAM,IAAM,GACf,EAAG,GAAM,GAAMA,EAAM,MACrB,OAAM,EAAA,CAAA,EAGTO,EAAMP,EAAM,CAAC,EAAE,IAAKQ,GAEjBP,EAAAA,IAACI,EAAA,CAAO,IAAKK,GAAY,IAAK,qBAAsB,EAAGF,EAAG,EAAG,GAAA,EAAU,OAAOA,CAAC,EAAI,CAEtF,EACAD,EAAMP,EAAM,CAAC,EAAE,IAAKQ,GACnBR,EAAM,KAAKQ,CAAC,IAAM,EAAI,KACpBP,EAAAA,IAACU,EAAA,CACC,MAAM,cACN,MAAO,GACP,OAAQ,GAER,EAAGH,EACH,EAAG,IACH,UAAWI,EACT,yEACAZ,EAAM,MAAQQ,GAAMR,EAAM,SAAW,EAAMA,EAAM,QAAU,EACvD,yBACA,YAAA,EAEL,SAAAA,EAAM,KAAKQ,CAAC,CAAA,EATR,OAAOA,CAAC,EAAA,CAUf,EAGHD,EAAMP,EAAM,CAAC,EAAE,IAAKQ,GACnBR,EAAM,KAAKQ,CAAC,IAAM,EAAI,KACpBP,EAAAA,IAACI,EAAA,CAAO,IAAKQ,GAAQ,IAAI,SAAS,EAAGL,EAAI,GAAK,EAAG,KAAU,SAASA,CAAC,EAAI,CAAA,EAG5ED,EAAMP,EAAM,CAAC,EAAE,IAAKQ,GACnBP,EAAAA,IAACU,EAAA,CACC,MAAM,QACN,YAAY,OACZ,MAAO,GACP,OAAQ,GAER,EAAGH,EAAI,GACP,EAAG,GACH,UAAU,uDACT,SAAAR,EAAM,MAAMQ,CAAC,CAAA,EAJT,QAAQA,CAAC,EAAA,CAMjB,EACAR,EAAM,MAAQ,EAAI,KACjBC,EAAAA,IAACI,EAAA,CAAO,IAAKC,EAAO,IAAI,UAAU,EAAGN,EAAM,IAAM,GAAK,EAAG,GAAMA,EAAM,OAAQ,OAAM,GAAC,EAEtFC,EAAAA,IAACI,EAAA,CAAO,IAAKS,GAAM,IAAI,aAAa,EAAGd,EAAM,EAAI,IAAK,EAAG,EAAA,CAAK,CAAA,EAChE,EACAC,EAAAA,IAACc,EAAA,CACC,UAAW,CAAE,GAAGhB,EAAW,iBAAkBC,EAAM,EAAG,eAAgBA,EAAM,KAAA,CAAM,CAAA,CACpF,EACF,CAEJ,uTC9EA,SAAA,CAAA,wCAAAgB,MAAAC,EAAA,GAAA,CAAsC,SAAA,mBAAkB,CAAA,EAAA;AAAA,yDAAAD,MAAAC,EAAA,OAAA,CACC,SAAA,6BAA6B,CAAA,EAAA;AAAA;AAAA,oBAAAD,MAAAC,EAAA,OAAA,CAElE,SAAA,qBAAqB,CAAA,EAAA,2BAAAD,MAAAC,EAAA,OAAA,CAA0B,SAAA,8BAA8B,CAAA,EAAA;AAAA,oGAAA;oGAG5F,CAAA,EAAA,oCAAA;kHACc,CAAA,EAAA,mCAAA;+GACH,CAAA,EAAA,IAAAE,OAAAF,EAAA,KAAA,4FAAI,CAAA,EAAA,aAAAD,EAAAA,IAAAE,EAAA,yBAAgB,CAAA,EAAA,kCAAAC,OAAAF,EAAA,KAAA,iGAAkC,CAAA,EAAA,kDAAA;yGAC5D,CAAA,EAAA,IAAAD,EAAAA,IAAAE,EAAA,uBAAI,CAAA,EAAA,IAAAF,EAAAA,IAAAO,EAAA,+EAAgB,CAAA,EAAA,IAAAJ,OAAAF,EAAA,KAAA,4FAAI,CAAA,EAAA,+BAAAD,EAAAA,IAAAE,EAAA,uBAAgC,CAAA,EAAA,kBAAAC,OAAAF,EAAA,KAAA,iGAAkB,CAAA,EAAA,iCAAAD,MAAAC,EAAA,OAAA,CAAsC,SAAA,UAAU,CAAA,EAAA,GAAA;6GACtH,CAAA,EAAA,IAAAE,OAAAF,EAAA,KAAA,4FAAI,CAAA,EAAA,iDAAAE,OAAAF,EAAA,KAAA,kGAAkD,CAAA,EAAA,IAAAD,EAAAA,IAAA,IAAA,CAAW,SAAA,4EAAoC,SAAA,mBAAqB,CAAA,EAAA,IAAAA,MAAAC,EAAA,OAAA,CAAG,SAAA,UAAU,CAAA,EAAA,GAAA;oHAChI,CAAA,EAAA,kDAAA;yGACX,CAAA,EAAA,kCAAA;wGACD,CAAA,EAAA,gEAAA;0GACE,CAAA,EAAA,gDAAA;gBAEX,SAAA,oFAEA,SAAA,CAAA;AAAA,wCAAAD,MAAAC,EAAA,GAAA,CACuC,SAAA,mDAAkD,CAAA,EAAA;AAAA;AAAA;AAAA,uBAAA,wDAMvF,SAAA;AAAA;AAAA,oGAMA,SAAA;AAAA;AAAA,wHAMSpB,QAAAA,GACKuB,aAAAA,GACCC,cAAAA,GACJC,UAAAA,GACCxB,WAAAA,oCAGZ,SAAA,uJAIA,SAAA,CAAA;AAAA;AAAA,gBAAAkB,MAAAC,EAAA,OAAA,CAEgB,SAAA,yDAAyD,CAAA,EAAA;AAAA,YAAAD,EAAAA,IAAAO,EAAA,4EACnD,CAAA,EAAA,IAAAP,EAAAA,IAAAE,EAAA,uBAAI,CAAA,EAAA,4CAAAF,EAAAA,IAAAE,EAAA,uBAA4C,CAAA,EAAA;AAAA,iGAAA,gBAGtE,SAAA,CAAA;AAAA;AAAA,yCAAAF,MAAAC,EAAA,GAAA,CAEwC,SAAA,QAAO,CAAA,EAAA;AAAA,qCAAA,eAG/C,SAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAOF,SAAA,CAAA,sEAAAD,MAAAC,EAAA,OAAA,CAAqE,SAAA,iBAAiB,CAAA,EAAA,aAAA,wCAEpF,SAAA,42SC/DF,SAAwBnB,GAAW,CAAE,UAAAC,EAAW,MAAAC,GAAS,CAGvD,OAAIA,EAAM,EAAI,GAEVC,EAAAA,IAAC,MAAA,CAAI,UAAU,qBAAqB,SAAA,+DAEpC,EAKFC,EAAAA,KAAAC,WAAA,CACE,SAAA,CAAAD,EAAAA,KAACE,EAAA,CAAO,QAAQ,SAAS,MAAO,GAC9B,SAAA,CAAAH,EAAAA,IAACI,EAAA,CAAO,IAAKC,GAAO,IAAI,QAAQ,EAAG,IAAQN,EAAM,IAAM,KAAQ,EAAG,EAAG,GAAI,OAAM,GAAC,EAChFC,EAAAA,IAACI,EAAA,CAAO,IAAKS,GAAM,IAAI,OAAO,EAAG,IAAQd,EAAM,EAAI,IAAO,EAAG,EAAG,GAAI,EACnEO,EAAMP,EAAM,CAAC,EAAE,IAAKQ,GACnBP,EAAAA,IAACI,EAAA,CACC,IAAKmB,GACL,IAAI,SACJ,EAAG,GAAOhB,EACV,EAAG,IAAMR,EAAM,QAAUQ,EAAI,EAAI,EAAA,EAC5B,SAASA,CAAC,EAAA,CAElB,EACAD,EAAMP,EAAM,CAAC,EAAE,IAAKQ,GACnBP,EAAAA,IAACU,EAAA,CACC,MAAM,cACN,MAAO,GACP,OAAQ,EAER,EAAG,GAAOH,EAAI,GACd,EAAG,IAAMR,EAAM,QAAUQ,EAAI,EAAI,GACjC,UAAU,8DACT,SAAAA,IAAM,EAAI,SAAW,UAAUA,CAAC,EAAA,EAJ5B,MAAMA,CAAC,EAAA,CAMf,EACAD,EAAMP,EAAM,CAAC,EAAE,IAAKQ,GACnBP,EAAAA,IAACU,EAAA,CACC,MAAM,cACN,MAAO,EACP,OAAQ,EAER,EAAG,GAAOH,EACV,EAAG,IAAMR,EAAM,QAAUQ,EAAI,EAAI,GACjC,UAAU,sDACT,SAAAR,EAAM,EAAEQ,CAAC,CAAA,EAJL,QAAQA,CAAC,EAAA,CAMjB,EACAD,EAAMP,EAAM,CAAC,EAAE,IAAKQ,GACnBP,EAAAA,IAACI,EAAA,CACC,IAAKQ,EACL,IAAI,SACJ,EAAG,GAAOL,EAAI,IACd,EAAG,MAAQR,EAAM,QAAUQ,EAAI,EAAI,EAAA,EAC9B,SAASA,CAAC,EAAA,CAElB,EACAD,EAAMP,EAAM,CAAC,EAAE,IAAKQ,GACnBP,EAAAA,IAACU,EAAA,CACC,MAAM,cACN,MAAO,EACP,OAAQ,EAER,EAAG,GAAOH,EAAI,EACd,EAAG,IAAMR,EAAM,QAAUQ,EAAI,EAAI,GACjC,UAAU,6DACT,SAAA,IAAIR,EAAM,EAAEQ,CAAC,CAAC,EAAA,EAJV,OAAOA,CAAC,EAAA,CAMhB,EACAD,EAAMP,EAAM,CAAC,EAAE,IAAKQ,GACnBP,EAAAA,IAACI,EAAA,CACC,IAAKQ,EACL,IAAI,SACJ,EAAG,GAAOL,EAAI,EACd,EAAG,MAAQR,EAAM,QAAUQ,EAAI,EAAI,EAAA,EAC9B,UAAUA,CAAC,EAAA,CAEnB,EACAD,EAAMP,EAAM,CAAC,EAAE,IAAKQ,GACnBP,EAAAA,IAACU,EAAA,CACC,MAAM,cACN,MAAO,GACP,OAAQ,EAER,EAAG,GAAOH,EAAI,EACd,EAAG,IAAMR,EAAM,QAAUQ,EAAI,EAAI,GACjC,UAAU,qDACT,SAAAR,EAAM,KAAKQ,CAAC,CAAA,EAJR,OAAOA,CAAC,EAAA,CAMhB,EACAD,EAAMP,EAAM,CAAC,EAAE,IAAKQ,GAEjBP,EAAAA,IAACI,EAAA,CACC,IAAKoB,GACL,IAAI,UACJ,EAAG,GAAOjB,EAAI,IAAOR,EAAM,KAAKQ,CAAC,EAAIA,GAAK,IAC1C,EAAG,GAAK,GAAKR,EAAM,KAAKQ,CAAC,EAAIA,GAC7B,OAAQ,KAAOR,EAAM,KAAKQ,CAAC,EAAIA,GAC/B,OAAQ,KAAOR,EAAM,KAAKQ,CAAC,EAAIA,EAAA,EAC1B,WAAWA,CAAC,EAAA,CAGtB,EACAD,EAAMP,EAAM,OAAS,EAAI,EAAI,CAAC,EAAE,IAAI,IAEjCC,EAAAA,IAACI,EAAA,CACC,IAAKQ,EACL,IAAI,iBACJ,EAAG,GAAOb,EAAM,KAAOA,EAAM,QAAUA,EAAM,IAAM,IAAM,MACzD,EAAGA,EAAM,QAAUA,EAAM,IAAM,KAAO,IAAA,EAClC,QAAA,CAGT,EACAO,EAAMP,EAAM,OAAS,EAAI,EAAI,CAAC,EAAE,IAAI,IAEjCC,EAAAA,IAACU,EAAA,CACC,MAAM,cACN,MAAO,EACP,OAAQ,EAER,EAAG,GAAOX,EAAM,KAAOA,EAAM,QAAUA,EAAM,IAAM,EAAI,GACvD,EAAGA,EAAM,QAAUA,EAAM,IAAM,GAAK,GACpC,UAAU,mEACT,SAAAA,EAAM,MAAA,EAJH,QAAA,CAOT,CAAA,EACH,EACAC,EAAAA,IAACc,EAAA,CACC,UAAW,CACT,GAAGhB,EACH,kBAAmBC,EAAM,CAAA,CAC3B,CAAA,CACF,EACF,CAEJ,uTCjJA,SAAA,CAAA,mFAAAgB,MAAAC,EAAA,OAAA,CAAkF,SAAA,QAAQ,CAAA,EAAA,iCAAAD,EAAAA,IAAAE,EAAA,yBAAmC,CAAA,EAAA;AAAA,2BAAAF,EAAAA,IAAAE,EAAA,yBAC/F,CAAA,EAAA,oCAAAF,EAAAA,IAAAE,EAAA,uBAAoC,CAAA,EAAA,iBAAAC,OAAAF,EAAA,KAAA,4GAAiC,CAAA,EAAA,0DAAA,gBAEnG,SAAA,CAAA;AAAA,gEAAAE,OAAAF,EAAA,KAAA,4FACiE,CAAA,EAAA,uBAAAD,EAAAA,IAAAE,EAAA,yBAA0B,CAAA,EAAA,6CAAAF,EAAAA,IAAAE,EAAA,yBAA+C,CAAA,EAAA;AAAA;AAAA,4EAAA,gBAI1I,SAAA,CAAA,oJAAAF,EAAAA,IAAAE,EAAA,uBAAoJ,CAAA,EAAA;AAAA,mEAAAF,EAAAA,IAAAE,EAAA,uBAChF,CAAA,EAAA;AAAA,iEAAA;oGAG/D,CAAA,EAAA,wBAAA;oHACgB,CAAA,EAAA,IAAAC,OAAAF,EAAA,KAAA,4FAAI,CAAA,EAAA,cAAAD,EAAAA,IAAAE,EAAA,yBAAiB,CAAA,EAAA,6CAAAC,OAAAF,EAAA,KAAA;sHACnB,CAAA,EAAA,IAAAE,OAAAF,EAAA,KAAA,4FAAI,CAAA,EAAA,gBAAAD,EAAAA,IAAAE,EAAA,yBAAmB,CAAA,EAAA,uBAAAC,OAAAF,EAAA,KAAA,iGAAuB,CAAA,EAAA,6BAAA;oHAChD,CAAA,EAAA,IAAAD,EAAAA,IAAAE,EAAA,uBAAI,CAAA,EAAA,IAAAF,EAAAA,IAAAO,EAAA,2EAAY,CAAA,EAAA,IAAAJ,OAAAF,EAAA,KAAA,4FAAI,CAAA,EAAA,cAAAD,EAAAA,IAAAE,EAAA,yBAAiB,CAAA,EAAA,6CAAAC,OAAAF,EAAA,KAAA,4FAA6C,CAAA,EAAA,oBAAAD,EAAAA,IAAAE,EAAA,yBAAuB,CAAA,EAAA,6BAAAF,EAAAA,IAAAE,EAAA,uBAA6B,CAAA,EAAA,KAAAC,OAAAF,EAAA,KAAA;gBAE3J,SAAA;oHAEqB,CAAA,EAAA,IAAAD,EAAAA,IAAAE,EAAA,uBAAI,CAAA,EAAA,IAAAF,EAAAA,IAAAO,EAAA,+EAAgB,CAAA,EAAA,IAAAJ,OAAAF,EAAA,KAAA,4FAAI,CAAA,EAAA,qBAAAD,EAAAA,IAAAE,EAAA,uBAAsB,CAAA,EAAA,4BAAAC,OAAAF,EAAA,KAAA;iIACjC,CAAA,EAAA,IAAAE,OAAAF,EAAA,KAAA,4FAAI,CAAA,EAAA,gDAAAE,OAAAF,EAAA,KAAA;gBAEtC,SAAA;mHAEoB,CAAA,EAAA,IAAAD,EAAAA,IAAAE,EAAA,uBAAI,CAAA,EAAA,IAAAF,EAAAA,IAAAO,EAAA,gFAAiB,CAAA,EAAA,IAAAJ,OAAAF,EAAA,KAAA,4FAAI,CAAA,EAAA,oCAAAD,EAAAA,IAAAE,EAAA,uBAAqC,CAAA,EAAA,8BAAAF,EAAAA,IAAAE,EAAA,uBAA8B,CAAA,EAAA,4BAAAC,OAAAF,EAAA,KAAA;iIAC9E,CAAA,EAAA,IAAAE,OAAAF,EAAA,KAAA,4FAAI,CAAA,EAAA,kCAAAD,EAAAA,IAAAE,EAAA,uBAAmC,CAAA,EAAA,yBAAAF,EAAAA,IAAAE,EAAA,uBAAyB,CAAA,EAAA,4DAAA;0GACvF,CAAA,EAAA,wEAAAF,EAAAA,IAAAE,EAAA,uBAAwE,CAAA,EAAA,UAAA;2CAEjF,SAAA,aAAa,CAAA,EAAA,sFAAAF,EAAAA,IAAAE,EAAA,uBAAsF,CAAA,EAAA;AAAA,mDAAAF,MAAAC,EAAA,GAAA,CACnD,SAAA,iBAAgB,CAAA,EAAA,gFAAA,aAGlDG,aAAAA,GACCC,cAAAA,GACJC,UAAAA,GACCxB,WAAAA,qCAGZ,SAAA,CAAA;AAAA,uDAAAkB,MAAAC,EAAA,OAAA,CACuD,SAAA,oDAAoD,CAAA,EAAA;AAAA,EAAAD,MAAAC,EAAA,OAAA,CACzG,SAAA,uEAAuE,CAAA,EAAA;AAAA,gEAAA,uGAKzE,SAAA;AAAA;AAAA,iHAIA,SAAA,CAAA,wBAAAE,OAAAF,EAAA,KAAA,4FAAwB,CAAA,EAAA;AAAA;AAAA,2EAAA,gBAIxB,SAAA,CAAA,8BAAAD,EAAAA,IAAAE,EAAA,uBAA8B,CAAA,EAAA;AAAA;AAAA,6GAAAF,EAAAA,IAAAE,EAAA,uBAEgF,CAAA,EAAA;AAAA,gFAAAC,OAAAF,EAAA,KAAA,4FAC7B,CAAA,EAAA;AAAA,uEAAAD,EAAAA,IAAAE,EAAA,uBACT,CAAA,EAAA,+BAAAF,EAAAA,IAAAE,EAAA,uBAA+B,CAAA,EAAA,SAAAC,OAAAF,EAAA,KAAA,6GAEvG,SAAA,swpCCzDF,SAAwBnB,GAAW,CAAE,UAAAC,EAAW,MAAAC,GAAS,CACvD,KAAM,CAAE,EAAA0B,EAAG,EAAAC,EAAG,GAAAC,EAAI,EAAAC,EAAG,GAAAC,GAAO9B,EAC5B,GAAI0B,EAAI,GACN,OACEzB,EAAAA,IAAC,MAAA,CAAI,UAAU,qBAAqB,SAAA,+DAEpC,EAIJ,MAAM8B,EAAO,KAAK,IAAI,GAAGJ,CAAC,EAEpBK,EAAKC,GAAO,EAAIA,EAAKF,EAE3B,OACE7B,EAAAA,KAAAC,WAAA,CACE,SAAA,CAAAD,EAAAA,KAACE,EAAA,CAAO,MAAO,IACZ,SAAA,CAAAuB,EAAE,IAAI,CAACO,EAAG1B,IACTP,EAAAA,IAACU,EAAA,CAEC,MAAM,UACN,YAAY,UACZ,EAAGH,EAAI,KACP,EAAG,CAACwB,EAAEE,CAAC,EAAI,GACX,OAAQF,EAAEE,CAAC,EAAI,GACf,MAAO,IACP,UAAU,YAAA,EAPL1B,CAAA,CASR,EACAmB,EAAE,IAAI,CAACO,EAAG1B,IACTP,EAAAA,IAACI,EAAA,CAAe,IAAK8B,EAAU,IAAI,SAAS,EAAG3B,EAAI,IAAK,EAAG,CAACwB,EAAEE,CAAC,GAAlD1B,CAAqD,CACnE,EACAqB,EAAE,IAAI,CAACO,EAAG5B,IACTP,EAAAA,IAACI,EAAA,CAAe,IAAK8B,EAAU,IAAI,SAAS,EAAG3B,EAAI,IAAK,EAAG,CAACwB,EAAEI,CAAC,GAAlD5B,CAAqD,CACnE,EACAoB,EAAG,IAAI,CAACS,EAAG7B,IACVP,EAAAA,IAACU,EAAA,CAEC,MAAM,cACN,YAAY,cACZ,OAAQ,EACR,MAAO,IACP,EAAGH,EAAI,IACP,EAAG,CAACwB,EAAEL,EAAEnB,CAAC,CAAC,EAAI,IACd,UAAU,oDACT,SAAA6B,CAAA,EARI7B,CAAA,CAUR,EACAsB,EAAG,IAAI,CAACO,EAAG7B,IACVP,EAAAA,IAACU,EAAA,CAEC,MAAM,cACN,YAAY,cACZ,OAAQ,EACR,MAAO,IACP,EAAGH,EAAI,IACP,EAAG,CAACwB,EAAEH,EAAErB,CAAC,CAAC,EAAI,IACd,UAAU,oDACT,SAAA6B,CAAA,EARI7B,CAAA,CAUR,EACDP,EAAAA,IAACU,EAAA,CAAU,MAAM,QAAQ,YAAY,UAAU,OAAQ,GAAK,MAAO,KAAK,IAAIe,EAAG,EAAE,EAAI,EAAG,EACxFzB,EAAAA,IAACI,GAAO,IAAKC,GAAO,IAAI,QAAQ,EAAG,GAAK,EAAG,GAAA,CAAM,CAAA,EACnD,QACCS,EAAA,CAAU,UAAW,CAAE,GAAGhB,EAAU,CAAG,CAAA,EAC1C,CAEJ,uTCrEA,SAAA,CAAA,4BAAAiB,MAAAC,EAAA,GAAA,CAA0B,SAAA,YAAW,CAAA,EAAA,oGAAAD,EAAAA,IAAAE,EAAA,uBAAoG,CAAA,EAAA,yBAAAF,EAAAA,IAAAE,EAAA,uBAAyB,CAAA,EAAA,OAAAC,OAAAF,EAAA,KAAA,4FAAO,CAAA,EAAA;AAAA,2BAAAD,EAAAA,IAAAE,EAAA,uBAC7I,CAAA,EAAA,4EAAAF,EAAAA,IAAAE,EAAA,uBAA4E,CAAA,EAAA,qEAAAF,EAAAA,IAAAE,EAAA,yBAAuE,CAAA,EAAA,yDAAAF,EAAAA,IAAAE,EAAA,yBAA2D,CAAA,EAAA,SAAA,gBAE1O,SAAA,CAAA,mCAAAF,EAAAA,IAAAE,EAAA,uBAAmC,CAAA,EAAA,uDAAAF,EAAAA,IAAAE,EAAA,uBAAuD,CAAA,EAAA,oEAAAC,OAAAF,EAAA,KAAA,4FAAoE,CAAA,EAAA,gEAAAE,OAAAF,EAAA,KAAA,4FAAiE,CAAA,EAAA;AAAA,yFAAAE,OAAAF,EAAA,KAAA,4FACrI,CAAA,EAAA;AAAA,kGAAAD,EAAAA,IAAAE,EAAA,uBACS,CAAA,EAAA,2DAAAC,OAAAF,EAAA,KAAA,4FAA2D,CAAA,EAAA,uDAAAD,MAAAC,EAAA,GAAA,CAAsD,SAAA,qBAAoB,CAAA,EAAA,QAAAD,EAAAA,IAAAE,EAAA,uBAAQ,CAAA,EAAA,MAAAC,OAAAF,EAAA,KAAA,6JAE7O,SAAA,OAAO,CAAA,EAAA,+BAAAD,EAAAA,IAAAE,EAAA,uBAA+B,CAAA,EAAA,MAAAC,OAAAF,EAAA,KAAA,4FAAM,CAAA,EAAA,eAAAE,OAAAF,EAAA,KAAA,kGAAsB,CAAA,EAAA,0CAAAD,EAAAA,IAAAE,EAAA,uBAA2C,CAAA,EAAA,MAAAF,EAAAA,IAAAE,EAAA,uBAAM,CAAA,EAAA,+BAAAF,EAAAA,IAAAE,EAAA,2BAAmC,CAAA,EAAA,OAAAF,EAAAA,IAAAE,EAAA,2BAAW,CAAA,EAAA,MAAAF,EAAAA,IAAAE,EAAA,2BAAU,CAAA,EAAA,OAAAC,OAAAF,EAAA,KAAA,mHAE9K,SAAA;AAAA;oGAGK,CAAA,EAAA,eAAAD,EAAAA,IAAAE,EAAA,uBAAe,CAAA,EAAA,eAAA;gHACH,CAAA,EAAA,eAAAF,EAAAA,IAAAE,EAAA,yBAAiB,CAAA,EAAA,UAAAC,OAAAF,EAAA,KAAA,iGAAU,CAAA,EAAA,sBAAA;iHAC1B,CAAA,EAAA,eAAAD,EAAAA,IAAAE,EAAA,yBAAiB,CAAA,EAAA,UAAAC,OAAAF,EAAA,KAAA,iGAAU,CAAA,EAAA,uBAAA;gIACZ,CAAA,EAAA,4BAAAD,EAAAA,IAAAE,EAAA,6BAAkC,CAAA,EAAA,QAAAF,EAAAA,IAAAE,EAAA,uBAAQ,CAAA,EAAA,MAAAC,OAAAF,EAAA,KAAA;mHACvD,CAAA,EAAA,qCAAAD,EAAAA,IAAAE,EAAA,uBAAqC,CAAA,EAAA,MAAAC,OAAAF,EAAA,KAAA;qHACnC,CAAA,EAAA,2CAAAE,OAAAF,EAAA,KAAA,iGAA2C,CAAA,EAAA,gBAAAD,EAAAA,IAAAE,EAAA,uBAAsB,CAAA,EAAA,SAAA;gBAEvF,SAAA;uHAEwB,CAAA,EAAA,yCAAAC,OAAAF,EAAA,KAAA;wHACC,CAAA,EAAA,0CAAAE,OAAAF,EAAA,KAAA;mIACW,CAAA,EAAA,8BAAAE,OAAAF,EAAA,KAAA,iGAA8B,CAAA,EAAA,cAAAE,OAAAF,EAAA,KAAA;oIAC7B,CAAA,EAAA,+BAAAE,OAAAF,EAAA,KAAA,iGAA+B,CAAA,EAAA,cAAAE,OAAAF,EAAA,KAAA;gEAEjE,SAAA,aAAa,CAAA,EAAA,gGAAA,iEAEb,SAAA,eAAe,CAAA,EAAA,gGAAAD,MAAAC,EAAA,OAAA,CAA+F,SAAA,gBAAgB,CAAA,EAAA,kFAAA,eAGjHG,aAAAA,GACCC,cAAAA,GACJC,UAAAA,UACFgB,UAAW,GAAOC,MAAO,GAAOC,aAAc,IAC3C1C,WAAAA,oCAGZ,SAAA,uJAIA,SAAA,CAAA,kEAAAkB,MAAAC,EAAA,OAAA,CAAiE,SAAA,+BAA+B,CAAA,EAAA;AAAA;AAAA,2GAAA;cAI9F,SAAA;cACA,SAAA;gBAEF,SAAA;AAAA;AAAA,0nBCnDkB,OAAA,CAAA,EAAG,EAAG,CAAA,uCACN,OAAA,CAAA,EAAG,EAAG,CAAA,8bCJxB,SAAA;cAEC,SAAA;aAEH,SAAA;cAEA,SAAA,CAAA;AAAA,uCAAAD,MAAAC,EAAA,GAAA,CACsC,SAAA,yBAAwB,CAAA,EAAA;AAAA;AAAA;AAAA,wFAAA;cAK9D,SAAA,CAAA;AAAA,EAAAD,MAAAC,EAAA,OAAA,CACE,SAAA;cAEC,SAAA;cAEH,SAAA,CAAA,iHAAAD,MAAAC,EAAA,GAAA,CAA+G,SAAA,UAAS,CAAA,EAAA,+XAAA;cAExH,SAAA,CAAA,wCAAAD,MAAAC,EAAA,OAAA,CAAuC,SAAA,SAAS,CAAA,EAAA,4CAAAD,MAAAC,EAAA,OAAA,CAA2C,SAAA,oBAAoB,CAAA,EAAA;AAAA;AAAA,0EAAAD,MAAAC,EAAA,GAAA,CAEtC,SAAA,SAAQ,CAAA,EAAA,GAAA;cAEjF,SAAA,CAAA,gDAAAD,MAAAC,EAAA,OAAA,CAA+C,SAAA,qCAAqC,CAAA,EAAA;AAAA;AAAA,kFAAA,0HClB7E,MAAMwB,GAAW,CACtB,MAAO,0BACP,YAAa,6DACf,EAEA,SAAwBC,IAAM,CAC5B,cACGC,EAAA,CAAO,gBAAgB,GAAG,YAAY,0BAA0B,SAAU,KACzE,SAAA,CAAA1C,EAAAA,IAAC2C,GAAA,EAAO,QACPC,GAAA,CAAA,CAAU,CAAA,EACb,CAEJ"}