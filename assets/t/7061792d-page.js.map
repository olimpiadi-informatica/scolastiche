{"version":3,"file":"7061792d-page.js","sources":["../../../../src/fibonacci-secondarie/2024-seconda-fase/contest/s-4-percorso-incrementale/visualizer.jsx","../../../../src/fibonacci-secondarie/2024-seconda-fase/contest/s-4-percorso-incrementale/question.mdx","../../../../src/fibonacci-secondarie/2024-seconda-fase/contest/contest.mdx","../../../../src/fibonacci-secondarie/2024-seconda-fase/header.md","../../../../src/fibonacci-secondarie/2024-seconda-fase/page.tsx"],"sourcesContent":["\"use client\";\n\nimport clsx from \"clsx\";\nimport { range } from \"lodash-es\";\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\nimport bunny from \"./asy/bunny.asy?w=66\";\n\nclass Random {\n  constructor(seed) {\n    this._seed = seed % 2147483647;\n    if (this._seed <= 0) this._seed += 2147483646;\n  }\n  next() {\n    this._seed = (this._seed * 16807) % 2147483647;\n    return this._seed;\n  }\n}\n\nexport default function Visualizer({ variables, state }) {\n  const cellSide = 20;\n  const cellPadding = 1;\n  const scale = 10;\n  const fontHeight = 4;\n\n  const random = new Random(state.N);\n  const colors = [\"orange\", \"lightgreen\", \"blue\", \"aquamarine\", \"yellow\", \"red\"];\n  const cellColor = range(state.N).map(() => colors[random.next() % colors.length]);\n  return (\n    <>\n      <Canvas gravity=\"bottom\" scale={scale}>\n        {range(state.N).map((i) => (\n          <Rectangle\n            color=\"transparent\"\n            width={cellSide}\n            height={cellSide}\n            key={`rect${i}`}\n            x={cellSide * i}\n            y={2}>\n            <Rectangle\n              color={{ W: \"white\", B: cellColor[i] }[state.cols[i]]}\n              width={cellSide - 2 * cellPadding}\n              height={cellSide - 2 * cellPadding}\n              x={cellPadding}\n              y={cellPadding}\n              className=\"flex items-center justify-center text-8xl\">\n              {i + 1}\n            </Rectangle>\n          </Rectangle>\n        ))}\n        <Sprite src={bunny} alt=\"Bunny\" x={cellSide * (state.pos + 0.25) - 3.5} y={0} follow />\n        <Rectangle\n          x={Math.max(cellSide * state.pos, 40)}\n          y={-fontHeight * state.M - 2}\n          height={fontHeight * state.M + 2}\n          width={30}\n          className=\"p-2 rounded-lg\">\n          {range(state.M).map((i) => (\n            <div\n              key={`instr-${i}`}\n              className={clsx(\"border-0 text-4xl font-mono\", i === state.i && \"font-bold\")}>\n              <pre>\n                {`${(state.M > 9) && (i + 1 < 10) ? \" \" : \"\"}${i + 1}. ${{ S: \"SALTA\", A: \"AVANZA\" }[state.instr[i]]}`}\n              </pre>\n            </div>\n          ))}\n        </Rectangle>\n      </Canvas>\n      <Variables\n        variables={{\n          ...variables,\n          \"N (num. caselle)\": state.N,\n          \"M (num. istruzioni)\": state.M,\n        }}\n      />\n    </>\n  );\n}\n","import initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s4.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nAllie è stata incaricata da Carol di dipingere il muro della fattoria, formato da $N$ pareti quadrate numerate da $1$ a $N$.\nAlcune pareti sono già colorate, mentre altre sono bianche.\nCarol ha dato ad Allie un foglio con $M$ istruzioni di due tipi:\n- **AVANZA**: passa alla parete successiva.\n- **SALTA**: spostati in avanti (di almeno una casella) fino a che non trovi una parete bianca.\n\nIl modo di seguire queste istruzioni è però piuttosto complicato! Infatti, Allie deve seguire ripetutamente questi passi, per ogni $i$ da $1$ fino ad $M$:\n1. Partire (o ripartire) dalla prima parete.\n1. Seguire le prime $i$ istruzioni sul foglio.\n1. Dipingere la parete su cui si ferma.\n\nAiuta Allie a dipingere il muro della fattoria facendo in modo che il risultato finale sia quello desiderato da Carol! Hai a disposizione questi blocchi:\n\n- `N`: il numero di pareti.\n- `M`: il numero di istruzioni.\n- `l'istruzione attuale è salta/avanza`: vero se la prossima istruzione da eseguire è salta/avanza.\n- `la parete corrente è bianca/colorata`: vero se la parete davanti a Allie è bianca/colorata.\n- `colora la parete`: Allie colora la parete davanti a sé.\n- `avanza`: Allie passa alla parete successiva.\n- `prossima istruzione`: Allie passa all'istruzione successiva.\n- `torna all'inizio`: Allie torna davanti alla prima parete, e ricomincia a leggere le istruzioni dalla prima.\n- `termina`: Allie avvisa Carol che ha terminato il lavoro.\n\n**ATTENZIONE**: Allie non deve per forza eseguire tutto il complicato procedimento assegnatole da Carol: le basta fare in modo che il risultato finale sia lo stesso.\nIn particolare, per completare l'ultimo livello, Allie non deve mai tornare indietro (quindi non può usare l'azione `torna all'inizio`) ma deve comunque fare in modo che il muro sia dipinto come vuole Carol.\n\n<Blockly\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma che segue esattamente le istruzioni di Allie è il seguente:\n>\n> ![soluzione](partial.png)\n>\n> Per ogni $i$ da $1$ ad $M$, come prima cosa Carol esegue le prime $i$ istruzioni.\n> Questo viene fatto con un ciclo che per $i$ volte esegue la prossima istruzione:\n> avanza sempre di uno, e poi se l'istruzione è salta avanza ulteriormente finché\n> Carol si trova su di una parete colorata. Terminato il ciclo, Carol colora la parete\n> a cui è arrivata e poi riparte dall'inizio.\n>\n> Il procedimento indicato da Allie, tuttavia, non è molto efficiente! Carol può ottenere\n> lo stesso risultato precedente senza mai tornare indietro, con questo programma:\n>\n> ![soluzione](code.png)\n>\n> L'idea in questo programma è dopo aver seguito le prime $i$ istruzioni e colorato l'ultima\n> casella, se ripeto di nuovo le prime $i$ istruzioni, arrivo esattamente nello stesso punto\n> in cui già mi trovo! L'unica differenza è se l'ultima istruzione era **SALTA**, perché in quel\n> caso devo saltare anche la casella che ho appena colorato. Dopo aver fatto quello, posso\n> semplicemente passare alla prossima istruzione senza ripartire dall'inizio.\n>\n> ![secondarie](secondarie.asy)\n","<Contest>\n\n## Sezione 1: procedimenti procedurali\n\n<Section>\n  <Problem points={[5, 1, 0]}><P1SaltoOstacoli /></Problem>\n  <Problem points={[5, 1, 0]}><P2Spiedino /></Problem>\n</Section>\n\n## Sezione 2: programmazione\n\n<Section>\n  <Problem points={[5, 0, 0]}><S1Pranzo /></Problem>\n  <Problem points={[5, 0, 0]}><S3Corridoio /></Problem>\n  <Problem points={[5, 0, 0]}><S4PercorsoIncrementale /></Problem>\n</Section>\n\n</Contest>\n","# Giochi di Fibonacci 2024/2025\n\n## Fase II - Scuole secondarie\n\nQuesta prova contiene _5 problemi_ da risolvere in _120 minuti_, ed è divisa in due parti:\n- due problemi di interpretazione di **procedimenti procedurali** come programmi a blocchi, e\n- tre problemi di **programmazione** tramite blocchi.\n\nIn entrambe le parti i problemi sono ordinati per difficoltà crescente.\n**Attento che la difficoltà è soggettiva!** Se stai passando tanto tempo cercando di risolvere un problema, prova a passare ad altri problemi e altre categorie!\n\n## Punteggio\n\n### Procedimenti procedurali\n\nQuesti problemi comprendono _due domande_, valutate separatamente.\nLa prima domanda è **sempre più semplice**, e può aiutare a rispondere alla seconda domanda.\nLe domande sono tutte a **scelta multipla** con 5 opzioni, di cui **solo una** è corretta. Il punteggio che puoi ottenere è:\n\n- 5 punti per una risposta _corretta_;\n- 1 punto per una risposta _non data_;\n- 0 punti per una risposta _sbagliata_.\n\n### Programmazione a blocchi\n\nQuesti problemi richiedono di scrivere un **singolo** programma a blocchi, che viene valutato **contemporaneamente** su quattro diversi livelli.\nQuindi attenzione che non puoi scrivere programmi diversi per i diversi livelli, ma uno solo!\nPer ciascun problema e per ciascun livello, Il punteggio che puoi ottenere è:\n\n- 5 punti se il programma produce la risposta _corretta_;\n- 0 punti se il programma produce una risposta _sbagliata_.\n\nQuindi ogni domanda a blocchi può valere fino a 20 punti in totale.\n","import { NoAuth } from \"@olinfo/quizms/student\";\n\nimport Statement from \"./contest/contest.mdx\";\nimport Header from \"./header.md\";\n\nexport const metadata = {\n  title: \"Giochi di Fibonacci\",\n  description: \"Seconda fase dei Giochi di Fibonacci 2024/2025 per le scuole secondarie\",\n};\n\nexport default function App() {\n  return (\n    <NoAuth contestLongName=\"\" contestName=\"Giochi di Fibonacci\" duration={120}>\n      <Header />\n      <Statement />\n    </NoAuth>\n  );\n}\n"],"names":["Random","seed","Visualizer","variables","state","random","colors","cellColor","range","jsxs","Fragment","Canvas","i","jsx","Rectangle","Sprite","bunny","clsx","Variables","_jsx","Equation","_jsxs","_components","Code","customBlocks","initialBlocks","testcases","metadata","App","NoAuth","Header","Statement"],"mappings":"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"}