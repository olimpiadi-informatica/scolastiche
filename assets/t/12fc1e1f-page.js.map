{"version":3,"file":"12fc1e1f-page.js","sources":["../../../../src/fibonacci-corso/4-blocchi-matematici-e-variabili/contest/s-1-mele-singolo/toolbox.ts","../../../../src/fibonacci-corso/4-blocchi-matematici-e-variabili/contest/s-1-mele-singolo/visualizer.jsx","../../../../src/fibonacci-corso/4-blocchi-matematici-e-variabili/contest/s-1-mele-singolo/question.mdx","../../../../src/fibonacci-corso/4-blocchi-matematici-e-variabili/contest/s-3-mele-for/toolbox.ts","../../../../src/fibonacci-corso/4-blocchi-matematici-e-variabili/contest/s-3-mele-for/visualizer.jsx","../../../../src/fibonacci-corso/4-blocchi-matematici-e-variabili/contest/s-3-mele-for/question.mdx","../../../../src/fibonacci-corso/4-blocchi-matematici-e-variabili/contest/s-4-mele-finale/toolbox.ts","../../../../src/fibonacci-corso/4-blocchi-matematici-e-variabili/contest/s-4-mele-finale/visualizer.jsx","../../../../src/fibonacci-corso/4-blocchi-matematici-e-variabili/contest/s-4-mele-finale/question.mdx","../../../../src/fibonacci-corso/4-blocchi-matematici-e-variabili/contest/s-2-mele-multiplo/toolbox.ts","../../../../src/fibonacci-corso/4-blocchi-matematici-e-variabili/contest/s-2-mele-multiplo/visualizer.jsx","../../../../src/fibonacci-corso/4-blocchi-matematici-e-variabili/contest/s-2-mele-multiplo/question.mdx","../../../../src/fibonacci-corso/4-blocchi-matematici-e-variabili/contest/contest.mdx","../../../../src/fibonacci-corso/4-blocchi-matematici-e-variabili/header.md","../../../../src/fibonacci-corso/4-blocchi-matematici-e-variabili/page.tsx"],"sourcesContent":["import type { ToolboxInfo } from \"blockly/core/utils/toolbox\";\n\nexport const toolbox: ToolboxInfo = {\n  kind: \"categoryToolbox\",\n  contents: [\n    {\n      kind: \"category\",\n      name: \"Matematica\",\n      categorystyle: \"math_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"math_number\",\n          fields: { NUM: 123 },\n        },\n        {\n          kind: \"block\",\n          type: \"math_arithmetic\",\n          fields: {\n            OP: \"ADD\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Logica\",\n      categorystyle: \"logic_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"logic_compare\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_operation\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_negate\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n          extraState: {\n            hasElse: \"true\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Cicli\",\n      categorystyle: \"loop_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_repeat_ext\",\n          inputs: {\n            TIMES: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n          },\n        },\n        {\n          kind: \"block\",\n          type: \"controls_whileUntil\",\n        },\n      ],\n    },\n  ],\n};\n","\"use client\";\n\nimport { Fragment } from \"react\";\n\nimport clsx from \"clsx\";\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport tiptapRight from \"./asy/tiptap-right.asy?w=66\";\nimport tree from \"./asy/tree.asy?w=250\";\nimport apple from \"./asy/apple.asy?w=20\";\nimport bucket from \"./asy/bucket.asy?w=50\";\n\nexport default function Visualizer({ variables, state }) {\n\n  var count = 0;\n  let offs = Math.floor(state.res/state.M)*25+7;\n\n  return (\n    <>\n      <Canvas gravity=\"bottom\" scale={10}>\n        {range(state.N).flatMap((i) => {\n          return (\n            <Sprite\n              key={`albero${i}`}\n              src={tree}\n              alt=\"Albero\"\n              x={i*25 + 10}\n              y={0}\n              className=\"origin-bottom\"\n            />\n          );\n        })}\n        <Sprite\n          key=\"tiptap\"\n          src={tiptapRight}\n          alt=\"Tip-Tap\"\n          x={offs}\n          y={4}\n          follow\n        />\n        {range(state.N).flatMap((i) => {\n          return range(state.M).map((k) => {\n            count += 1;\n            return (\n              <Sprite\n                key={`mela${i}-${k}`}\n                src={apple}\n                alt=\"Mela\"\n                x={count <= state.res ? 3.4+((count-1)%3) + offs : i*25 + 12 + 22*k/state.M}\n                y={count <= state.res ? 2.3+Math.floor((count-1)/3)*1.5 : 17 + ((5*k+i) % 7)}\n                className=\"origin-bottom\"\n              />\n            );\n          });\n        })}\n        <Sprite\n          key=\"cestino\"\n          src={bucket}\n          alt=\"Cestino\"\n          x={offs+3}\n          y={state.C*0.3-0.7}\n          scaleY={(state.C+1)*0.1}\n        />\n      </Canvas>\n      <Variables\n        variables={{\n          ...variables,\n          \"N (num. alberi)\": state.N,\n          \"M (mele per albero)\": state.M,\n          \"C (max. cestino)\": state.C,\n          \"Mele raccolte\": state.res,\n        }}\n      />\n    </>\n  );\n}\n","import { toolbox } from \"./toolbox.ts\";\nimport initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s1.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\nimport { Hint } from \"~/utils/hint\";\n\nTip-Tap ha alcuni alberi di mele nel suo giardino, ciascuno con lo stesso numero di mele.\nTip-Tap vuole raccogliere più mele possibile, ma ha soltanto un cestino grande abbastanza per alcune mele:\nse ne raccogliesse più di quante ce ne stanno nel cestino, finirebbero per cadere dappertutto!\nHai a disposizione questi blocchi:\n\n- `N`: il numero di alberi di mele.\n- `M`: il numero di mele in ciascun albero.\n- `C`: il numero massimo di mele che può contenere il cestino.\n- `raccogli` $x$ `mele`: raccogli $x$ mele dagli alberi, mettendole nel cestino.\n- `termina`: riporta il cestino a casa.\n\nAiuta Tip-Tap a raccogliere più mele possibile, senza sfondare il suo cestino!\n\nPer risolvere questo problema, dovrai usare una nuova categoria di blocchi _\"Matematica\"_,\nche consentono di fare semplici operazioni aritmetiche su blocchi valore numerici (stondati).\nInoltre, ti servirà anche un nuovo blocco verità (esagonale) che trovi all'inizio della\ncategoria _\"Logica\"_, che serve a confrontare due blocchi valore numerici.\n\n<Hint label=\"suggerimento 1\">\n  Ci sono due casi che devi considerare, quali sono?\n</Hint>\n\n<Hint label=\"suggerimento 2\">\n  Come puoi contare il numero di mele con una formula matematica?\n  Ricorda che con i blocchi _\"Matematica\"_ puoi mettere formule nei tuoi programmi.\n</Hint>\n\n<Hint label=\"suggerimento 3\">\n  Pensa a come usare i blocchi logici per imporre le condizioni che desideri!\n</Hint>\n\n<Blockly\n  toolbox={toolbox}\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Ci sono due casi: il cestino non è abbastanza grande per contenere tutte le mele, oppure lo è.\n> Nel primo caso, raccogliamo mele fino a riempire il cestino.\n> Nel secondo caso, raccogliamo tutte le mele dagli alberi.\n\nPrima di passare alla prossima domanda, assicurati di aver risolto **tutti i livelli** di questa!","import type { ToolboxInfo } from \"blockly/core/utils/toolbox\";\n\nexport const toolbox: ToolboxInfo = {\n  kind: \"categoryToolbox\",\n  contents: [\n    {\n      kind: \"category\",\n      name: \"Variabili\",\n      categorystyle: \"variable_category\",\n      custom: \"VARIABLE\",\n    },\n    {\n      kind: \"category\",\n      name: \"Matematica\",\n      categorystyle: \"math_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"math_number\",\n          fields: { NUM: 123 },\n        },\n        {\n          kind: \"block\",\n          type: \"math_arithmetic\",\n          fields: {\n            OP: \"ADD\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Logica\",\n      categorystyle: \"logic_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"logic_compare\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_operation\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_negate\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n          extraState: {\n            hasElse: \"true\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Cicli\",\n      categorystyle: \"loop_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_for\",\n          fields: {\n            VAR: \"i\",\n          },\n          inputs: {\n            FROM: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 1 },\n              },\n            },\n            TO: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n            BY: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 1 },\n              },\n            },\n          },\n        },\n      ],\n    },\n  ],\n};\n","\"use client\";\n\nimport { Fragment } from \"react\";\n\nimport clsx from \"clsx\";\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport tiptapRight from \"./asy/tiptap-right.asy?w=66\";\nimport tree from \"./asy/tree.asy?w=250\";\nimport apple from \"./asy/apple.asy?w=20\";\nimport bucket from \"./asy/bucket.asy?w=50\";\n\nexport default function Visualizer({ variables, state }) {\n\n  var count = 0;\n  let offs = state.pos*25+7;\n\n  return (\n    <>\n      <Canvas gravity=\"bottom\" scale={10}>\n        {range(state.N).flatMap((i) => {\n          return (\n            <Sprite\n              key={`albero${i}`}\n              src={tree}\n              alt=\"Albero\"\n              x={i*25 + 10}\n              y={0}\n              className=\"origin-bottom\"\n            />\n          );\n        })}\n        <Sprite\n          key=\"tiptap\"\n          src={tiptapRight}\n          alt=\"Tip-Tap\"\n          x={offs}\n          y={4}\n          follow\n        />\n        {range(state.N).flatMap((i) => {\n          return range(state.M[i]).map((k) => {\n            count += 1;\n            return (\n              <Sprite\n                key={`mela${i}-${k}`}\n                src={apple}\n                alt=\"Mela\"\n                x={count <= state.res ? 3.4+((count-1)%3) + offs : i*25 + 12 + 22*k/state.M[i]}\n                y={count <= state.res ? 2.3+Math.floor((count-1)/3)*1.5 : 17 + ((5*k+i) % 7)}\n                className=\"origin-bottom\"\n              />\n            );\n          });\n        })}\n        <Sprite\n          key=\"cestino\"\n          src={bucket}\n          alt=\"Cestino\"\n          x={offs+3}\n          y={state.C*0.3-0.7}\n          scaleY={(state.C+1)*0.1}\n        />\n      </Canvas>\n      <Variables\n        variables={{\n          ...variables,\n          \"N (num. alberi)\": state.N,\n          \"C (max. cestino)\": state.C,\n          \"Mele raccolte\": state.res,\n        }}\n      />\n    </>\n  );\n}\n","import { toolbox } from \"./toolbox.ts\";\nimport initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s3.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\nimport { Hint } from \"~/utils/hint\";\n\nTip-Tap è alle prese con ancora un altro raccolto di mele!\nAnche stavolta ogni albero ha un numero diverso di mele.\nTuttavia, ora Tip-Tap indossa delle lenti a contatto e riesce\na contare le mele anche negli alberi più lontani senza spostarsi.\nHai a disposizione questi blocchi:\n\n- `N`: il numero di alberi di mele.\n- `mele albero` $x$: il numero di mele nell'albero $x$-esimo **(nuovo!)**.\n- `C`: il numero massimo di mele che può contenere il cestino.\n- `raccogli` $x$ `mele`: raccogli $x$ mele dagli alberi, mettendole nel cestino.\n- `termina`: riporta il cestino a casa.\n\nAiuta di nuovo Tip-Tap a raccogliere più mele possibile, senza sfondare il suo cestino!\n\nPer risolvere questo problema dovrai usare un nuovo blocco, detto **ciclo contatore**,\nche si trova nella categoria _\"Cicli\"_. Quando aggiungi questo ciclo al tuo programma,\nuna nuova variabile si crea automaticamente, usando il nome convenzionale $i$ (e se\naggiungi altri cicli contatore, i nomi seguenti $j$, $k$, ecc). Il ciclo ti chiede poi\ndi specificare:\n\n- un intervallo numerico di valori \"da/a\";\n- e una dimensione di incremento \"per\".\n\nQuando il ciclo verrà eseguito, tutte le istruzioni contenute saranno ripetute più volte,\nogni volta aggiornando il valore della variabile contatore del ciclo, partendo dal valore\n\"da\" e aumentandolo del valore \"per\" fino a raggiungere il valore \"a\". Per esempio, se fai\nun ciclo \"conta con $i$ da 3 a 8 per 2\", l'istruzione nel ciclo verrà eseguita:\n\n- una prima volta, dopo aver assegnato il valore iniziale $3$ alla variabile $i$;\n- una seconda volta, dopo aver aumentato il valore di $i$ di 2, che quindi arriva a contenere il valore $5$;\n- una terza volta dopo aver assegnato il valore $7$ a $i$;\n- il ciclo poi termina perché il valore successivo sarebbe $9$ che però è maggiore del limite $8$ specificato.\n\n<Hint>\n  Puoi riutilizzare la stessa struttura della scorsa domanda.\n  Basta sostituire il ciclo ripeti N con un ciclo contatore!\n</Hint>\n\n<Blockly\n  toolbox={toolbox}\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Come nella domanda precedente, innanzitutto Tip-Tap conta il numero totale di mele.\n> Tuttavia, questa volta lo fa con un ciclo contatore, iterando su tutti gli alberi dal\n> primo all'$N$-esimo, e ogni volta aggiungendo il numero di mele dell'albero alla somma.\n> Infine, decide se raccogliere tutte le mele o $C$ mele, a seconda di quale sia più piccolo.\n\nPrima di passare alla prossima domanda, assicurati di aver risolto **tutti i livelli** di questa!","import type { ToolboxInfo } from \"blockly/core/utils/toolbox\";\n\nexport const toolbox: ToolboxInfo = {\n  kind: \"categoryToolbox\",\n  contents: [\n    {\n      kind: \"category\",\n      name: \"Variabili\",\n      categorystyle: \"variable_category\",\n      custom: \"VARIABLE\",\n    },\n    {\n      kind: \"category\",\n      name: \"Matematica\",\n      categorystyle: \"math_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"math_number\",\n          fields: { NUM: 123 },\n        },\n        {\n          kind: \"block\",\n          type: \"math_arithmetic\",\n          fields: {\n            OP: \"ADD\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Logica\",\n      categorystyle: \"logic_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"logic_compare\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_operation\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_negate\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n          extraState: {\n            hasElse: \"true\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Cicli\",\n      categorystyle: \"loop_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_repeat_ext\",\n          inputs: {\n            TIMES: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n          },\n        },\n        {\n          kind: \"block\",\n          type: \"controls_whileUntil\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_for\",\n          fields: {\n            VAR: \"i\",\n          },\n          inputs: {\n            FROM: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 1 },\n              },\n            },\n            TO: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n            BY: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 1 },\n              },\n            },\n          },\n        },\n      ],\n    },\n  ],\n};\n","\"use client\";\n\nimport { Fragment } from \"react\";\n\nimport clsx from \"clsx\";\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport tiptapRight from \"./asy/tiptap-right.asy?w=66\";\nimport tree from \"./asy/tree.asy?w=250\";\nimport apple from \"./asy/apple.asy?w=20\";\nimport bucket from \"./asy/bucket.asy?w=50\";\n\nexport default function Visualizer({ variables, state }) {\n\n  var bcount = 0;\n  var bcurr = 0;\n  var count = 0;\n  let offs = state.pos*25+7;\n\n  function getBucketX(i) {\n    if (i == state.basket) {\n      return offs+3;\n    } else if (i < state.basket) {\n      return 8 + 6 * i;\n    } else {\n      return 6 - 4.5 * (i - state.basket);\n    }\n  }\n  function getBucketY(i) {\n    let base = state.C[i]*0.3-0.7;\n    if (i == state.basket) {\n      return base;\n    } else if (i < state.basket) {\n      return base - 4;\n    } else {\n      return base + 4;\n    }\n  }\n\n  return (\n    <>\n      <Canvas gravity=\"bottom\" scale={10}>\n        {range(state.N).flatMap((i) => {\n          return (\n            <Sprite\n              key={`albero${i}`}\n              src={tree}\n              alt=\"Albero\"\n              x={i*25 + 10}\n              y={0}\n              className=\"origin-bottom\"\n            />\n          );\n        })}\n        <Sprite\n          key=\"tiptap\"\n          src={tiptapRight}\n          alt=\"Tip-Tap\"\n          x={offs}\n          y={4}\n          follow\n        />\n        {range(state.N).flatMap((i) => {\n          return range(state.M[i]).map((k) => {\n            count += 1;\n            if (count > bcount + state.apples[bcurr]) {\n              bcount += state.apples[bcurr];\n              bcurr += 1;\n            }\n            return (\n              <Sprite\n                key={`mela${i}-${k}`}\n                src={apple}\n                alt=\"Mela\"\n                x={count <= state.res ? getBucketX(bcurr) + ((count-bcount-1)%3) + 0.4 : i*25 + 12 + 22*k/state.M[i]}\n                y={count <= state.res ? 2.3+Math.floor((count-bcount-1)/3)*1.5 - (bcurr < state.basket ? 4 : 0) : 17 + ((5*k+i) % 7)}\n                className=\"origin-bottom\"\n              />\n            );\n          });\n        })}\n        {range(state.K).flatMap((i) => {\n          return (\n            <Sprite\n              key={`cestino-${i}`}\n              src={bucket}\n              alt=\"Cestino\"\n              x={getBucketX(i)}\n              y={getBucketY(i)}\n              scaleY={(state.C[i]+1)*0.1}\n            />\n          );\n        })}\n      </Canvas>\n      <Variables\n        variables={{\n          ...variables,\n          \"N (num. alberi)\": state.N,\n          \"K (num. cestini)\": state.K,\n          \"Mele raccolte\": state.res,\n        }}\n      />\n    </>\n  );\n}\n","import { toolbox } from \"./toolbox.ts\";\nimport initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s4.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\nimport { Hint } from \"~/utils/hint\";\n\nÈ l'ora di un ultimo raccolto di mele per Tip-Tap!\nOgni albero ha di nuovo un numero diverso di mele, e Tip-Tap riesce ancora a contare le mele da lontano.\nStavolta, tuttavia, Tip-Tap ha diversi cestini, ognuno con una sua capienza massima.\nHai a disposizione questi blocchi:\n\n- `N`: il numero di alberi di mele.\n- `mele albero` $x$: il numero di mele nell'albero $x$-esimo.\n- `K`: il numero di cestini che ha Tip-Tap **(nuovo!)**.\n- `capienza cestino`: il numero massimo di mele che può contenere il cestino corrente **(nuovo!)**.\n- `prossimo cestino`: passa al prossimo cestino **(nuovo!)**.\n- `raccogli` $x$ `mele`: raccogli $x$ mele dagli alberi, mettendole nel cestino corrente.\n- `termina`: termina la raccolta.\n\nAiuta di nuovo Tip-Tap a raccogliere più mele possibile senza sfondare nessun cestino.\nQuesta volta non ci sono nuovi blocchi che ti serve usare: basta padroneggiare quelli che già hai visto\nnelle domande precedenti!\n\n<Hint label=\"suggerimento 1\">\n  Cerca di riutilizzare la soluzione della domanda precedente.\n  Dove serve modificare il programma per considerare $K$ cestini invece che uno solo?\n</Hint>\n\n<Hint label=\"suggerimento 2\">\n  Ogni volta che consideri un cestino, devi decidere quante mele raccogliere in quel cestino.\n  In che modo bisogna modificare il totale di mele rimanenti sugli alberi, dopo aver fatto la raccolta?\n</Hint>\n\n<Hint label=\"suggerimento 3\">\n  Ricorda che puoi modificare il valore delle variabili anche all'interno di un ciclo,\n  usando anche formule matematiche o blocchi condizionali del tipo _\"se... fai... altrimenti\"_,\n  a seconda di cosa ti serve!\n</Hint>\n\n<Blockly\n  toolbox={toolbox}\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Come nella domanda precedente, innanzitutto Tip-Tap conta il numero totale di mele\n> con un ciclo contatore. Poi itera su tutti e $K$ i cestini, ogni volta considerando\n> se il numero di mele rimaste sugli alberi (nella variabile _somma_) sia più piccolo\n> o meno della capienza del cestino corrente. Come nelle domande precedenti, raccoglie\n> quindi mele pari al minore dei due numeri. Inoltre, questa volta aggiorna anche la\n> variabile _somma_ togliendoci il numero di mele che sono state raccolte, prima di\n> passare al cestino successivo.","import type { ToolboxInfo } from \"blockly/core/utils/toolbox\";\n\nexport const toolbox: ToolboxInfo = {\n  kind: \"categoryToolbox\",\n  contents: [\n    {\n      kind: \"category\",\n      name: \"Variabili\",\n      categorystyle: \"variable_category\",\n      custom: \"VARIABLE\",\n    },\n    {\n      kind: \"category\",\n      name: \"Matematica\",\n      categorystyle: \"math_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"math_number\",\n          fields: { NUM: 123 },\n        },\n        {\n          kind: \"block\",\n          type: \"math_arithmetic\",\n          fields: {\n            OP: \"ADD\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Logica\",\n      categorystyle: \"logic_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"logic_compare\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_operation\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_negate\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n          extraState: {\n            hasElse: \"true\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Cicli\",\n      categorystyle: \"loop_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_repeat_ext\",\n          inputs: {\n            TIMES: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n          },\n        },\n        {\n          kind: \"block\",\n          type: \"controls_whileUntil\",\n        },\n      ],\n    },\n  ],\n};\n","\"use client\";\n\nimport { Fragment } from \"react\";\n\nimport clsx from \"clsx\";\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport tiptapRight from \"./asy/tiptap-right.asy?w=66\";\nimport tree from \"./asy/tree.asy?w=250\";\nimport apple from \"./asy/apple.asy?w=20\";\nimport bucket from \"./asy/bucket.asy?w=50\";\n\nexport default function Visualizer({ variables, state }) {\n\n  var count = 0;\n  let offs = state.pos*25+7;\n\n  return (\n    <>\n      <Canvas gravity=\"bottom\" scale={10}>\n        {range(state.N).flatMap((i) => {\n          return (\n            <Sprite\n              key={`albero${i}`}\n              src={tree}\n              alt=\"Albero\"\n              x={i*25 + 10}\n              y={0}\n              className=\"origin-bottom\"\n            />\n          );\n        })}\n        <Sprite\n          key=\"tiptap\"\n          src={tiptapRight}\n          alt=\"Tip-Tap\"\n          x={offs}\n          y={4}\n          follow\n        />\n        {range(state.N).flatMap((i) => {\n          return range(state.M[i]).map((k) => {\n            count += 1;\n            return (\n              <Sprite\n                key={`mela${i}-${k}`}\n                src={apple}\n                alt=\"Mela\"\n                x={count <= state.res ? 3.4+((count-1)%3) + offs : i*25 + 12 + 22*k/state.M[i]}\n                y={count <= state.res ? 2.3+Math.floor((count-1)/3)*1.5 : 17 + ((5*k+i) % 7)}\n                className=\"origin-bottom\"\n              />\n            );\n          });\n        })}\n        <Sprite\n          key=\"cestino\"\n          src={bucket}\n          alt=\"Cestino\"\n          x={offs+3}\n          y={state.C*0.3-0.7}\n          scaleY={(state.C+1)*0.1}\n        />\n      </Canvas>\n      <Variables\n        variables={{\n          ...variables,\n          \"N (num. alberi)\": state.N,\n          \"C (max. cestino)\": state.C,\n          \"Mele raccolte\": state.res,\n        }}\n      />\n    </>\n  );\n}\n","import { toolbox } from \"./toolbox.ts\";\nimport initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s2.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\nimport { Hint } from \"~/utils/hint\";\n\nDopo l'ultimo raccolto, alcune altre mele sono maturate! Stavolta, però, ogni albero ha un numero diverso di mele.\nHai a disposizione questi blocchi:\n\n- `N`: il numero di alberi di mele.\n- `mele prossimo albero`: il numero di mele nell'albero di fronte a Tip-Tap **(nuovo!)**.\n- `avanza`: Tip-Tap avanza superando l'albero che ha ora di fronte **(nuovo!)**.\n- `C`: il numero massimo di mele che può contenere il cestino.\n- `raccogli` $x$ `mele`: raccogli $x$ mele dagli alberi, mettendole nel cestino.\n- `termina`: riporta il cestino a casa.\n\nAiuta Tip-Tap a raccogliere più mele possibile, senza sfondare il suo cestino!\n\nPer risolvere questo problema, dovrai usare una nuova categoria di blocchi: le _\"Variabili\"_.\nLe variabili sono dei contenitori in cui puoi memorizzare dei numeri, per poi riusarli e modificarli\nin seguito. Quando inizi a fare un nuovo programma, non ci sono variabili: devi aggiungerle\ntu quando ti servono, cliccando su _\"crea variabile\"_ nella sezione _\"Variabili\"_. Potrai quindi\nscegliere un nome da dare alla tua variabile: scegli pure quello che preferisci, ma è meglio\nse il nome che gli dai ti aiuta a ricordarti quale valore ci vuoi mettere dentro!\n\nUna volta creata una variabile, vedrai comparire alcuni blocchi nella sezione _\"Variabili\"_:\n- il blocco istruzione **imposta _variabile_ a _valore_**, con cui puoi memorizzare un valore nella variabile;\n- il blocco istruzione **cambia _variabile_ di _valore_**, con cui puoi sommare un valore al contenuto attuale della variabile;\n- un blocco numerico con il nome della variabile, per leggerne il suo contenuto.\n\nQuando crei una variabile, ricordati di darle un valore iniziale prima di usarla nel tuo programma!\nSe non sai che valore darle, considera che il numero zero è un buon valore iniziale se prevedi di\npoi modificarla con il blocco \"cambia _variabile_ di _valore_\".\n\nInoltre, quando imposti un nuovo valore ad una variabile, puoi anche usare il suo vecchio valore\nper decidere il nuovo valore da darle. In effetti, il blocco **cambia _variabile_ di _valore_**\nè equivalente ai blocchi:\n\n![cambia](cambia.png)\n\n<Hint label=\"suggerimento 1\">\n  Nella scorsa domanda il numero totale di mele era $N \\times M$.\n  Con una variabile e un ciclo, riesci a calcolare quante mele ci sono in totale ora,\n  per poi sfruttare la soluzione della domanda precedente?\n</Hint>\n\n<Hint label=\"suggerimento 2\">\n  Se inserisci un blocco _\"cambia variabile\"_ in un ciclo, la variabile verrà cambiata a ogni\n  ripetizione del ciclo, a partire dall'ultimo valore registrato. Come puoi sfruttare questa cosa?\n</Hint>\n\n<Blockly\n  toolbox={toolbox}\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Innanzitutto, Tip-Tap scorre tutti gli alberi, aggiungendo il numero di mele di ciascun albero alla\n> variabile somma, che inizialmente vale zero.\n>\n> Poi, decide quante mele raccogliere tra la somma e C, come nella domanda precedente.\n\nPrima di passare alla prossima domanda, assicurati di aver risolto **tutti i livelli** di questa!","<Contest>\n\n<Section>\n  <Problem points={[5, 0, 0]}><S1MeleSingolo /></Problem>\n  <Problem points={[5, 0, 0]}><S2MeleMultiplo /></Problem>\n  <Problem points={[5, 0, 0]}><S3MeleFor /></Problem>\n  <Problem points={[5, 0, 0]}><S4MeleFinale /></Problem>\n</Section>\n\n</Contest>\n","# Corso di Programmazione a Blocchi\n\n## Lezione 4 - Blocchi Matematici e Variabili\n\nBentornato nel corso di programmazione a blocchi per la preparazione ai Giochi di Fibonacci!\n\nQuesta è la quarta lezione, in cui ti faremo vedere:\n\n- i blocchi di tipo \"matematica\";\n- il blocco logico per confrontare valori numerici;\n- le variabili;\n- il ciclo contatore.\n\nSe non l'avessi ancora fatto, ti invitiamo a completare le lezioni precedenti prima di iniziare questa (anche se pensi di conoscere già quegli argomenti!).\n\n## Punteggio e struttura delle lezioni\n\nLe lezioni di questo corso contengono alcuni problemi di programmazione a blocchi, da risolvere in al massimo _4 giorni_. Appena avrai finito di lavorarci, potrai cliccare su \"Termina\" per vedere subito un riepilogo del punteggio che hai ottenuto, e le soluzioni spiegate di tutti i problemi! Se anche non lo farai, la lezione verrà terminata automaticamente dopo 4 giorni. Potrai comunque ricominciare la lezione quante volte vuoi, cliccando sul tasto \"Ricomincia\" (freccia curva che torna indietro).\n\nI problemi richiedono di scrivere un **singolo** programma a blocchi, che viene valutato **contemporaneamente** su più livelli.\nQuindi attenzione che non puoi scrivere programmi diversi per i diversi livelli, ma uno solo!\nPer ciascun livello correttamente risolto di ciascun problema, otterrai _5 punti_.\n","import { NoAuth } from \"@olinfo/quizms/student\";\n\nimport Statement from \"./contest/contest.mdx\";\nimport Header from \"./header.md\";\n\nexport const metadata = {\n  title: \"Corso di Programmazione\",\n  description: \"Corso di Programmazione a Blocchi per i Giochi di Fibonacci\",\n};\n\nexport default function App() {\n  return (\n    <NoAuth contestLongName=\"\" contestName=\"Corso di Programmazione\" duration={5760}>\n      <Header />\n      <Statement />\n    </NoAuth>\n  );\n}\n"],"names":["toolbox","Visualizer","variables","state","count","offs","jsxs","Fragment","Canvas","range","i","jsx","Sprite","tree","tiptapRight","k","apple","bucket","Variables","_jsx","Equation","Code","_components","customBlocks","initialBlocks","testcases","_jsxs","bcount","bcurr","getBucketX","getBucketY","base","metadata","App","NoAuth","Header","Statement"],"mappings":"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"}