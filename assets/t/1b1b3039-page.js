/*! For licenses information, see LICENSES.txt */
"use client";import{j as e,c as r0,r as l0}from"../_virtual_quizms-routes-255e69d2.js";import{P as A,I as o0}from"../u/79ffe88a-components.js";import{r as R,C as M,S as j,V as q,R as v}from"../i/f61e0119-visualizer.js";function W(){return{...A()}}const I={src:new URL("../2/22e05924-lorenzo.webp",import.meta.url).href,width:383,height:450},U={src:new URL("../f/f8990ed9-sol.webp",import.meta.url).href,width:706,height:630},c0=JSON.parse('{"blocks":{"languageVersion":0,"blocks":[{"type":"start","id":"y=zq)Uya2A/{vyOtN[i6","x":61,"y":81}]},"variables":[]}'),p0=JSON.parse(`[{"type":"start","message0":"inizia qui","inputsInline":true,"colour":20,"tooltip":"L'esecuzione inizia da qui","helpUrl":"","maxInstances":1,"js":"","nextStatement":null},{"type":"larghezza","message0":"larghezza","inputsInline":true,"colour":20,"tooltip":"larghezza della tavoletta rimasta","helpUrl":"","js":["state.N",1.2],"output":"Number"},{"type":"altezza","message0":"altezza","inputsInline":true,"colour":20,"tooltip":"altezza della tavoletta rimasta","helpUrl":"","js":["state.M",1.2],"output":"Number"},{"type":"compagni","message0":"compagni","inputsInline":true,"colour":20,"tooltip":"numero di compagni rimasti","helpUrl":"","js":["state.K",1.2],"output":"Number"},{"type":"spezza in orizzontale","message0":"spezza %1 quadratini in orizzontale","args0":[{"type":"input_value","check":"Number","min":["1",0],"max":["state.M",1.2],"integer":true,"name":"_ARG0"}],"inputsInline":true,"colour":20,"tooltip":"spezza x quadratini in orizzontale","helpUrl":"","js":"(function(i) {\\n  state.M -= i;\\n  state.K -= 1;\\n  state.cuts.push(i);\\n})(_ARG0);","nextStatement":null,"previousStatement":null},{"type":"spezza in verticale","message0":"spezza %1 quadratini in verticale","args0":[{"type":"input_value","check":"Number","min":["1",0],"max":["state.N",1.2],"integer":true,"name":"_ARG0"}],"inputsInline":true,"colour":20,"tooltip":"spezza x quadratini in verticale","helpUrl":"","js":"(function(i) {\\n  state.N -= i;\\n  state.K -= 1;\\n  state.cuts.push(-i);\\n})(_ARG0);","nextStatement":null,"previousStatement":null},{"type":"termina","message0":"termina","inputsInline":true,"colour":20,"tooltip":"termina il procedimento","helpUrl":"","js":"if (state.K > 0)\\n  exit(false, \\"ci sono ancora compagni che vogliono cioccolato\\");\\nif (state.N*state.M < state.sol)\\n  exit(false, \\"potevi tenerti più cioccolato\\");\\nexit(true, \\"hai distribuito bene il cioccolato, complimenti!\\");","previousStatement":null}]`),u0=JSON.parse('[{"N":2,"M":2,"K":2,"sol":1,"cuts":[],"initialK":2},{"N":6,"M":1,"K":2,"sol":4,"cuts":[],"initialK":2},{"N":12,"M":12,"K":4,"sol":100,"cuts":[],"initialK":4},{"N":9,"M":20,"K":3,"sol":153,"cuts":[],"initialK":3},{"N":19,"M":16,"K":3,"sol":256,"cuts":[],"initialK":3},{"N":12,"M":90,"K":28,"sol":744,"cuts":[],"initialK":28},{"N":929,"M":964,"K":1233,"sol":108900,"cuts":[],"initialK":1233},{"N":903,"M":903,"K":1150,"sol":107584,"cuts":[],"initialK":1150},{"N":925,"M":991,"K":1331,"sol":85556,"cuts":[],"initialK":1331},{"N":989,"M":969,"K":1956,"sol":1,"cuts":[],"initialK":1956}]'),d0={src:new URL("../3/304eb218-bunny.svg",import.meta.url).href,width:50,height:88.20224719101124},h0={src:new URL("../2/2231fde2-adulto.svg",import.meta.url).href,width:50,height:88.20224719101124},m0={src:new URL("../c/c7f3efce-bunnies2.svg",import.meta.url).href,width:50,height:88.20224719101124},g0={src:new URL("../e/e3d5cc76-bunnies3.svg",import.meta.url).href,width:50,height:88.20224719101124},x0={src:new URL("../9/98ab570a-bunny.svg",import.meta.url).href,width:66,height:116.42696629213484},j0={src:new URL("../7/7ef018cb-chocolate.svg",import.meta.url).href,width:25,height:25},O=Object.assign({"./asy/bunnies0.asy":d0,"./asy/bunnies1.asy":h0,"./asy/bunnies2.asy":m0,"./asy/bunnies3.asy":g0});function f0({variables:a,state:i}){let{N:s,M:t,K:n,cuts:r}=i;if(s>20||t>20)return e.jsx("div",{className:"text-slate-800 p-4",children:"La visualizzazione è disponibile solo per i primi 5 livelli."});const c=R(s).map(()=>[]),l=R(t).map(()=>[]);let p=1.5,u=2;const o=(h,g,_,z)=>{for(let x=h;x<g;++x){c[x]??=[],l[x]??=[];for(let f=_;f<z;++f)c[x][f]=p+x*.5,l[x][f]=u-f*.5}},d=.15;o(0,s,0,t);for(let h=r.length-1;h>=0;--h){const g=r[h];g>0?(u-=d,o(0,s,t,t+g),t+=g):(p+=d,o(s,s-g,0,t),s-=g)}const m=Object.keys(O).length;return e.jsxs(e.Fragment,{children:[e.jsxs(M,{scale:50,children:[e.jsx(j,{src:x0,alt:"Tip-Tap",follow:!0}),R(i.initialK).map(h=>e.jsx(j,{src:O[`./asy/bunnies${h%m}.asy`],alt:"Bunny",x:2+s*(.5+d)+11*h%19*.4,y:-5+3*h/(n+r.length-1),className:r0(h<i.initialK-n&&"invisible")},h)),c.flatMap((h,g)=>h.map((_,z)=>e.jsx(j,{src:j0,alt:"cioccolata",x:_,y:l[g][z]},`${g}-${z}`)))]}),e.jsx(q,{variables:{larghezza:s,altezza:t,compagni:n,...a}})]})}function H(a){const i={li:"li",p:"p",ul:"ul",...W(),...a.components},{Blockly:s,Code:t,Equation:n,Explanation:r,Image:c,SubProblem:l}=i;return s||N("Blockly"),t||N("Code"),n||N("Equation"),r||N("Explanation"),c||N("Image"),l||N("SubProblem"),e.jsxs(l,{children:[e.jsxs(i.p,{children:["Tip-Tap adora il cioccolato, e allora si è comprato una tavoletta di cioccolato fatta di ",e.jsx(n,{children:String.raw`N \times M`}),` quadratini.
Anche i `,e.jsx(n,{children:String.raw`K`}),` suoi compagni di fattoria vorrebbero mangiare il cioccolato, e Tip-Tap è troppo buono per non dargliene!
Quindi per `,e.jsx(n,{children:String.raw`K`})," volte spezza la tavoletta in due parti rettangolari, non necessariamente uguali, e dà una delle due ad uno dei suoi ",e.jsx(n,{children:String.raw`K`})," compagni tenendo infine l’ultimo pezzo per sè."]}),e.jsx(i.p,{children:e.jsx(c,{alt:'"La tavoletta di Tip-Tap"',src:typeof I=="function"?I(_variant):I,title:"Il cioccolato non è mai troppo!"})}),e.jsxs(i.p,{children:[`La tavoletta può essere spezzata solo lungo i bordi dei quadratini, in orizzontale o verticale, in modo tale da non dividere nessun quadratino in due.
Inoltre una volta spezzata una parte, quella viene subito presa e mangiata da un amico senza dargli la possibilità di spezzarla ulteriormente.
Tip-Tap vorrebbe sapere come spezzare la tavoletta `,e.jsx(n,{children:String.raw`K`})," volte in modo che gli rimangano il maggior numero possibile di quadratini. Puoi aiutarlo?"]}),e.jsx(i.p,{children:"Puoi usare questi blocchi:"}),e.jsxs(i.ul,{children:[`
`,e.jsxs(i.li,{children:[e.jsx(t,{code:String.raw`larghezza`,inline:!0,lang:"text",className:"p-0 text-base"}),": la larghezza attuale della tavoletta."]}),`
`,e.jsxs(i.li,{children:[e.jsx(t,{code:String.raw`altezza`,inline:!0,lang:"text",className:"p-0 text-base"}),": l’altezza attuale della tavoletta."]}),`
`,e.jsxs(i.li,{children:[e.jsx(t,{code:String.raw`compagni`,inline:!0,lang:"text",className:"p-0 text-base"}),": il numero di compagni che ancora chiedono del cioccolato."]}),`
`,e.jsxs(i.li,{children:[e.jsx(t,{code:String.raw`spezza x quadratini in orizzontale`,inline:!0,lang:"text",className:"p-0 text-base"}),": spezza la tavoletta in orizzontale, lasciando ",e.jsx(n,{children:String.raw`x`})," file ad un compagno."]}),`
`,e.jsxs(i.li,{children:[e.jsx(t,{code:String.raw`spezza x quadratini in verticale`,inline:!0,lang:"text",className:"p-0 text-base"}),": spezza la tavoletta in verticale, lasciando ",e.jsx(n,{children:String.raw`x`})," colonne ad un compagno."]}),`
`,e.jsxs(i.li,{children:[e.jsx(t,{code:String.raw`termina`,inline:!0,lang:"text",className:"p-0 text-base"}),": mangia il cioccolato rimasto."]}),`
`]}),e.jsxs(i.p,{children:["Aiuta Tip-Tap a spezzare la tavoletta ",e.jsx(n,{children:String.raw`K`})," volte, in modo gli rimanga il maggior numero possibile di quadratini!"]}),e.jsx(s,{customBlocks:p0,initialBlocks:c0,testcases:u0,debug:{logBlocks:!1,logJs:!1,logVariables:!1},visualizer:f0}),e.jsxs(r,{children:[e.jsx(i.p,{children:"Un possibile programma corretto è il seguente:"}),e.jsx(i.p,{children:e.jsx(c,{alt:"soluzione",src:typeof U=="function"?U(_variant):U})}),e.jsx(i.p,{children:`Secondo questo programma, per ognuno dei compagni di Tip-Tap, il protagonista
controlla se la tavoletta è più larga o più alta, e gli passa una singola fila
o colonna a seconda di quale delle due è più piccola. In questo modo, si
assicura che alla fine gli rimanga più cioccolato possibile.`})]})]})}function b0(a={}){const{wrapper:i}={...W(),...a.components};return i?e.jsx(i,{...a,children:e.jsx(H,{...a})}):H(a)}function N(a,i){throw new Error("Expected component `"+a+"` to be defined: you likely forgot to import, pass, or provide it.")}function Y(){return{...A()}}const C={src:new URL("../c/caa0dc6e-sol1.webp",import.meta.url).href,width:1544,height:706},L={src:new URL("../a/a51cbec8-sol2.webp",import.meta.url).href,width:977,height:924},w0=JSON.parse('{"blocks":{"languageVersion":0,"blocks":[{"type":"start","id":"y=zq)Uya2A/{vyOtN[i6","x":61,"y":81}]},"variables":[]}'),v0=JSON.parse(`[{"type":"start","message0":"inizia qui","inputsInline":true,"colour":20,"tooltip":"L'esecuzione inizia da qui","helpUrl":"","maxInstances":1,"js":"","nextStatement":null},{"type":"N","message0":"N","inputsInline":true,"colour":20,"tooltip":"numero di colonnine lungo il percorso","helpUrl":"","js":["state.N",1.2],"output":"Number"},{"type":"energia","message0":"energia","inputsInline":true,"colour":20,"tooltip":"energia rimasta","helpUrl":"","js":["state.energy",1.2],"output":"Number"},{"type":"altitudine della colonnina","message0":"altitudine della colonnina %1","args0":[{"type":"input_value","check":"Number","min":["1",0],"max":["state.N",1.2],"integer":true,"name":"_ARG0"}],"inputsInline":true,"colour":20,"tooltip":"altitudine della colonnina i-esima","helpUrl":"","js":["state.H[(_ARG0) - 1]",1.2],"output":"Number"},{"type":"avanza","message0":"avanza","inputsInline":true,"colour":20,"tooltip":"avanza fino alla prossima colonnina","helpUrl":"","js":"state.charging = false;\\nif (state.posx === state.N-1)\\n  exit(false, \\"sei già arrivato alla fine\\");\\ndelta = state.H[state.posx+1] - state.H[state.posx];\\nstate.rot = Math.atan2(state.scale * delta, 1);\\npause();\\nif (state.energy >= delta) {\\n  state.posx += 1;\\n  state.energy -= delta;\\n} else {\\n  state.posx += state.energy / delta;\\n  state.energy = 0;\\n  exit(false, \\"hai finito l'energia prima di arrivare\\");\\n}\\npause();\\nif (state.posx < state.N-1) {\\n  state.rot = (\\n    Math.atan2(state.scale * (state.H[state.posx+1] - state.H[state.posx]), 1) +\\n    Math.atan2(state.scale * (state.H[state.posx] - state.H[state.posx-1]), 1)\\n  ) / 2;\\n} else {\\n  state.rot = 0;\\n}","nextStatement":null,"previousStatement":null},{"type":"ricarica","message0":"ricarica per %1 minuti","args0":[{"type":"input_value","check":"Number","min":["0",0],"max":["1000000",0],"integer":true,"name":"_ARG0"}],"inputsInline":true,"colour":20,"tooltip":"ricarica per x minuti","helpUrl":"","js":"(function(i) {\\n  state.time += i;\\n  state.energy += i;\\n  state.charging = true;\\n})(_ARG0);","nextStatement":null,"previousStatement":null},{"type":"termina","message0":"termina","inputsInline":true,"colour":20,"tooltip":"termina il procedimento","helpUrl":"","js":"state.charging = false;\\nif (state.posx < state.N-1)\\n  exit(false, \\"non sei arrivato alla fine\\");\\nif (state.time > state.sol)\\n  exit(false, \\"potevi aspettare meno alle colonnine\\");\\nexit(true, \\"sei arrivato in fretta, complimenti!\\");","previousStatement":null}]`),_0=JSON.parse('[{"N":5,"H":[0,3,1,5,6],"scale":1.6666666666666667,"rot":0,"posx":0,"posy":0,"time":0,"energy":0,"sol":6,"charging":false},{"N":7,"H":[0,4,2,9,10,4,7],"i":6,"scale":1,"rot":0,"posx":0,"posy":0,"time":0,"energy":0,"sol":10,"charging":false},{"N":10,"H":[0,7,6,19,20,4,9,4,3,19],"i":9,"scale":0.5,"rot":0,"posx":0,"posy":0,"time":0,"energy":0,"sol":20,"charging":false},{"N":20,"H":[0,6,5,15,16,3,2,10,15,17,3,11,13,10,19,20,6,17,15,14],"i":19,"scale":0.5,"rot":0,"posx":0,"posy":0,"time":0,"energy":0,"sol":20,"charging":false},{"N":30,"H":[0,15,13,16,17,25,29,17,29,0,2,23,26,12,22,26,25,21,20,0,19,15,26,27,10,7,23,10,22,27],"i":29,"scale":0.3448275862068966,"rot":0,"posx":0,"posy":0,"time":0,"energy":0,"sol":29,"charging":false},{"N":100,"H":[0,517,516,9650,9651,3632,3909,2334,8896,7339,1494,1318,5243,8322,8016,1786,4938,9031,4769,2044,8969,5451,8852,3329,9882,8965,9627,4712,7290,1501,9769,6306,5194,9431,3966,4756,3012,3102,3059,540,4260,7807,1131,1471,2133,2450,633,1314,8857,6410,8594,4515,8549,3858,3525,9663,6871,9497,4509,7382,8071,5855,1349,5313,1889,7969,9618,5493,3119,3981,265,4440,1919,3612,6095,2793,5448,6981,1018,1648,2397,3584,741,9402,8752,9865,1212,437,2038,3088,9934,9436,1961,6409,1499,6064,1901,596,9920,354],"i":99,"scale":0.0010066438494060802,"rot":0,"posx":0,"posy":0,"time":0,"energy":0,"sol":9934,"charging":false},{"N":1000,"H":[25,28,30,38,42,43,54,55,64,71,81,83,88,90,94,96,107,112,118,125,128,129,138,146,147,157,159,166,170,175,181,189,199,202,213,217,218,229,232,235,241,250,255,257,267,275,286,289,290,298,309,316,326,335,340,351,357,364,375,380,383,392,393,401,403,409,410,419,424,427,431,439,445,455,460,471,477,487,498,508,511,516,523,530,541,543,544,554,558,564,567,571,575,586,594,601,612,622,629,630,637,647,654,665,666,669,677,679,684,687,695,704,712,721,731,732,733,741,747,752,760,761,768,772,781,792,794,797,798,805,816,823,829,830,834,835,836,847,856,866,868,872,874,884,895,899,904,909,912,914,922,929,940,942,943,948,956,958,963,966,977,986,997,1008,1014,1016,1019,1024,1025,1026,1027,1031,1042,1047,1056,1062,1068,1078,1079,1089,1100,1108,1119,1127,1138,1145,1151,1160,1163,1167,1174,1184,1189,1190,1193,1196,1201,1207,1213,1219,1221,1227,1237,1238,1239,1244,1247,1250,1260,1265,1271,1278,1287,1290,1295,1297,1305,1309,1310,1315,1318,1327,1329,1334,1341,1347,1352,1359,1361,1363,1372,1380,1388,1394,1400,1402,1410,1412,1420,1427,1428,1433,1439,1450,1453,1456,1467,1477,1484,1495,1497,1499,1501,1505,1509,1510,1517,1518,1520,1527,1536,1545,1550,1558,1566,1576,1587,1591,1598,1600,1606,1610,1615,1625,1628,1635,1639,1645,1647,1649,1650,1659,1667,1678,1682,1684,1692,1699,1704,1708,1719,1720,1724,1734,1737,1739,1743,1751,1758,1764,1773,1776,1778,1788,1796,1799,1809,1816,1827,1838,1845,1854,1862,1873,1879,1887,1895,1906,1917,1921,1930,1940,1944,1945,1951,1957,1963,1964,1973,1976,1981,1991,1994,2001,2011,2016,2024,2026,2028,2037,2038,2040,2044,2047,2048,2053,2054,2062,2068,2071,2074,2085,2093,2099,2108,2115,2124,2133,2134,2144,2146,2157,2166,2176,2178,2185,2189,2194,2203,2213,2220,2228,2235,2245,2255,2259,2260,2271,2272,2275,2280,2289,2299,2304,2310,2312,2320,2325,2330,2337,2344,2351,2352,2355,2366,2369,2373,2378,2384,2385,2386,2394,2401,2404,2412,2422,2424,2435,2438,2444,2451,2452,2462,2470,2477,2485,2486,2488,2496,2499,2500,2501,2511,2521,2524,2535,2541,2543,2552,2563,2569,2573,2580,2588,2590,2591,2601,2609,2619,2630,2636,2647,2649,2660,2670,2675,2678,2685,2690,2701,2703,2712,2716,2717,2724,2732,2738,2742,2750,2756,2767,2769,2770,2771,2779,2784,2785,2794,2805,2815,2825,2829,2833,2835,2846,2855,2864,2871,2880,2885,2887,2890,2897,2907,2914,2916,2918,2925,2927,2929,2936,2939,2940,2948,2955,2966,2973,2974,2982,2988,2993,2995,3001,3003,3005,3011,3012,3018,3024,3027,3028,3032,3038,3040,3050,3053,3057,3058,3062,3073,3084,3086,3087,3092,3098,3099,3109,3113,3116,3119,3127,3129,3137,3143,3148,3151,3152,3156,3162,3168,3176,3181,3186,3195,3206,3212,3215,3225,3227,3229,3238,3248,3253,3256,3263,3266,3269,3273,3279,3288,3292,3296,3299,3304,3310,3317,3328,3329,3332,3342,3343,3350,3352,3354,3357,3364,3369,3378,3385,3388,3398,3405,3410,3421,3427,3429,3433,3441,3452,3458,3469,3478,3479,3486,3493,3494,3501,3507,3515,3519,3525,3530,3538,3540,3543,3545,3550,3552,3561,3571,3574,3582,3589,3592,3599,3606,3609,3613,3621,3627,3636,3639,3645,3653,3664,3675,3677,3685,3689,3694,3695,3703,3713,3721,3722,3726,3731,3733,3744,3749,3758,3768,3771,3778,3786,3788,3799,3807,3811,3820,3827,3832,3843,3844,3846,3851,3862,3863,3864,3869,3876,3885,3895,3902,3910,3912,3917,3923,3928,3939,3943,3953,3955,3956,3958,3963,3968,3977,3983,3985,3994,3998,4001,4003,4010,4015,4020,4029,4032,4042,4051,4062,4066,4075,4077,4084,4095,4104,4111,4116,4121,4129,4135,4145,4156,4159,4162,4164,4166,4173,4180,4190,4198,4201,4210,4221,4226,4232,4243,4251,4258,4262,4270,4278,4287,4293,4301,4312,4313,4321,4326,4329,4337,4338,4348,4352,4353,4359,4367,4374,4375,4384,4386,4397,4399,4410,4421,4428,4429,4435,4436,4438,4448,4449,4454,4465,4470,4474,4477,4487,4492,4496,4498,4505,4513,4519,4526,4529,4535,4542,4553,4564,4571,4574,4582,4585,4594,4600,4603,4607,4610,4618,4624,4631,4638,4646,4653,4657,4661,4669,4673,4683,4684,4691,4692,4696,4707,4709,4712,4718,4719,4730,4741,4744,4748,4758,4763,4773,4775,4784,4789,4795,4802,4810,4811,4822,4831,4842,4853,4862,4869,4879,4887,4895,4900,4908,4912,4918,4923,4924,4925,4926,4929,4935,4936,4941,4952,4953,4956,4958,4965,4976,4980,4990,4997,5006,5010,5018,5022,5028,5038,5040,5050,5052,5058,5064,5073,5081,5087,5092,5093,5102,5103,5107,5113,5115,5119,5128,5134,5138,5142,5147,5158,5163,5168,5177,5184,5189,5197,5203,5207,5208,5213,5222,5224,5225,5233,5241,5249,5250,5257,5265,5273,5281,5283,5285,5287,5291,5293,5296,5303,5307,5315,5325,5327,5334,5343,5350,5351,5354,5358,5366,5370,5373,5378,5384,5390,5397,5399,5408,5413,5423,5432,5436,5441,5449,5458,5468,5476,5485,5496,5501,5506,5510,5511,5513,5523,5525,5528,5535,5539,5543,5548,5559,5560,5569,5578,5585,5586,5588,5595,5606,5611,5613,5623,5629,5633,5644,5653,5664,5669,5673,5677,5679,5688,5693,5704,5710,5714,5720,5731,5739,5744,5754,5757,5760,5761,5770,5779,5785,5791,5801,5812,5813,5816,5823,5826,5829,5838,5840,5843,5847,5855,5865,5869,5873,5876,5880,5887,5893],"i":999,"scale":0.0016969285593076533,"rot":0,"posx":0,"posy":25,"time":0,"energy":0,"sol":5868,"charging":false},{"N":1000,"H":[0,4986,4985,9084,9085,1769,426,8625,9766,5875,8015,7464,5057,207,3605,9101,2671,8105,7879,8946,5143,1290,4246,2251,9900,6583,3130,5184,4779,6292,969,3418,627,5163,4089,5622,7228,3701,4261,5638,2659,4995,278,5838,9397,8839,953,2477,5790,360,8046,1004,402,3956,736,203,3699,5352,1090,1022,5651,6924,2225,3547,7355,7130,2327,5866,5111,2898,5387,6695,6269,157,6705,4321,8744,8705,7580,687,9252,2008,6699,6394,2806,50,8201,2264,8420,2427,1304,5407,3889,2888,4043,360,2766,9198,2757,1285,6998,9795,1698,7495,2458,9862,656,4136,5574,6168,446,595,8132,1468,5871,4796,2470,7505,3869,8313,5829,2658,6630,5531,4421,8066,6432,242,5091,8689,4722,9018,7682,572,8712,9347,9045,4299,627,7469,6472,1966,6615,5678,8126,838,338,4473,561,4160,9535,4747,3393,8671,8458,5575,6325,4106,3423,1900,9273,5397,3975,9603,8729,5789,2663,2507,5417,148,9583,839,9254,2558,5645,5950,4770,4807,5292,8107,6613,9841,7061,2785,16,2306,9315,714,7239,2061,5592,152,7871,4220,3074,1150,8992,6944,4566,2848,8675,2782,1036,2578,9497,1803,8256,8903,9913,6302,7121,4354,5101,4668,223,7023,4594,4230,8812,8638,9085,5208,5607,3112,7072,2321,97,8377,2544,9228,6293,5913,7604,595,9201,6744,3740,257,5934,8668,2597,3186,5807,8142,313,4082,9364,3966,4496,3033,6880,1276,9390,7342,3878,7367,8337,1645,3084,2694,7217,1068,6991,6467,4454,4140,7163,5835,9989,5370,1484,5030,493,8069,179,4105,3322,6519,6334,7137,6377,629,9546,7623,5809,9319,2077,9247,4560,5375,398,6522,7761,8547,2217,681,1335,9272,5692,5914,73,1136,3125,1815,8857,7718,706,5153,415,5157,6433,2052,4506,6658,2328,9759,2416,6622,5015,8380,980,2669,2054,2194,7878,765,8513,712,9092,6344,2952,5647,9599,1356,1322,9171,2857,4351,3303,4275,5372,4159,4247,8477,7478,2542,7353,9055,2503,632,9592,2899,8392,553,5178,1173,3160,7480,3911,7514,8556,2611,5466,2209,7806,9108,936,8903,1350,8481,5625,40,1310,1703,7007,9953,5772,9343,7398,5501,6194,8395,5931,1947,2230,5191,372,2991,2049,314,5535,9952,3167,723,6780,1016,5099,6381,855,9837,2755,5863,1268,6688,884,7220,5815,9898,4191,5074,9219,7432,6753,2960,502,7433,4327,3121,6351,1050,5859,1577,2021,429,5747,349,2901,6615,223,5288,7478,9077,8126,7807,1318,847,8775,6585,4296,455,8451,1568,1312,5465,5874,1613,7723,541,2527,8463,4703,602,11,6171,5532,2570,8983,2406,2630,2860,2604,3974,5378,390,7912,6522,723,3709,3936,4613,5383,2785,3902,5768,3703,2680,6893,7584,5952,9263,2260,6332,9255,220,2656,9562,92,6388,2817,2439,319,412,5297,8357,60,625,773,1833,9388,2419,2509,6223,433,6860,7147,9306,5454,4062,2258,5964,8359,3549,8738,6559,1196,2126,6680,9275,5744,1581,7070,7144,4024,7719,6254,3686,6469,3933,7883,6505,9525,1130,4134,4519,8627,6091,8885,355,9896,7775,3883,4526,660,5268,6402,1747,8756,798,2362,6429,439,6898,6440,7093,1717,7547,9898,7569,2644,2778,5578,7771,6735,2605,9669,4648,8250,1843,6033,5659,2337,5859,7744,8498,883,3206,4221,2898,9563,5319,4850,6227,679,4769,9034,7064,571,6726,4408,6146,3410,5683,2198,2165,1807,5848,2715,511,7054,9448,6527,7594,1247,1275,6970,8927,9075,2265,2772,2506,3399,2694,3739,486,8606,2220,8078,5848,4719,5491,1941,6698,4288,2593,5611,8217,5436,8734,2368,6162,9100,5001,3842,6202,5677,6394,7721,8381,5016,6719,6656,1600,2523,2419,80,9559,9756,8472,1750,3357,9761,9881,8412,1821,4369,2762,6158,1398,590,171,1890,5933,7875,5215,1771,7415,6047,9572,4159,7971,3747,2605,9201,9037,1276,8322,2752,422,2733,8472,6699,9965,3409,7179,6635,4327,346,9624,2199,6360,2807,7224,9256,879,6144,1422,9637,6638,5480,3819,8303,7463,640,7863,1667,4402,8314,8032,9024,6456,7744,4346,2965,3764,8863,5969,2613,4955,9975,2353,7486,1127,1122,7833,6442,9275,6717,9111,1511,4350,7901,3762,1816,4861,2311,5889,1542,2271,929,2241,9609,9154,3252,115,541,6624,9146,9858,8033,1753,7749,9167,5689,5620,1597,84,3959,3713,8154,5103,4496,3680,146,8120,5814,8339,5584,1501,1269,4993,9398,6918,3706,6021,6244,2383,3795,4716,3265,7882,5884,4635,6297,2119,1957,6573,5817,8196,7716,3746,6126,5877,7076,4545,5885,6567,4638,1725,7859,4773,1976,7307,2527,5636,3990,3062,5539,8180,3746,1801,6289,6368,7615,8413,7565,9271,3615,6541,8228,5098,7973,3811,5153,8485,26,1505,7729,5196,6459,3725,7067,796,9427,662,6660,1531,4316,3281,5354,2925,1853,2962,5966,463,3829,715,132,6269,8758,73,2124,1908,9906,9926,3266,1336,7636,3239,24,8523,6802,1094,8797,2902,3838,3718,6806,6257,7777,6,7140,3442,6246,674,4412,467,9548,5686,6020,5526,7436,2201,9763,8471,1508,4124,1691,1695,4470,395,2324,2226,6208,3392,9390,5235,3303,6900,8323,8198,1971,9168,1729,7776,2040,8339,7334,7697,2927,7453,8974,5567,2111,6819,4168,6180,1286,9256,8281,5498,3826,7435,4070,5751,7873,6722,391,7323,98,9051,6633,7308,3669,7036,3949,4148,7818,7783,2310,3739,7223,4645,5897,7965,9821,2438,8558,1434,3073,4913,8483,2011,966,2541,5616,601,5479,2627,7677,6394,3074,6741,8128,3146,2744,6404,772,5553,8534,3074,5374,3001,8506,8892,9740,9546,7111,2492,8084,9350,3495,9798,7231,539,3980,7991,9895,5204,9106,3217,8,713,1020,2198,3978,7261,9993,3669,1786,8449],"i":999,"scale":0.0010007004903432402,"rot":0,"posx":0,"posy":0,"time":0,"energy":0,"sol":9993,"charging":false},{"N":1000,"H":[9954,82,9981,36,9987,43,9963,87,9924,20,9947,71,9945,91,9956,50,9956,84,9940,59,9908,18,9928,96,9914,96,9919,50,9959,90,9969,26,9947,90,9905,2,9951,26,9911,52,9974,72,9952,69,9926,81,9900,85,9917,67,9982,62,9939,48,9969,68,9908,10,9977,93,9963,96,9901,26,9953,78,9996,46,9939,10,9995,2,9998,30,9978,3,9975,65,9947,19,9959,33,9914,75,9957,35,9928,48,9949,95,9964,43,9929,75,9933,11,9905,19,9940,80,9974,72,9962,8,9967,61,9955,40,9949,93,9903,14,9955,77,9985,17,9997,18,9903,15,9990,55,9931,4,9980,34,9933,49,9914,44,9937,47,9978,81,9924,95,9969,69,9907,43,9965,70,9901,20,9963,2,9981,33,9942,17,9944,12,9978,71,9953,97,9908,32,9973,13,9966,9,9975,16,9962,4,9966,100,9928,44,9912,71,9990,27,9922,88,9984,29,9951,25,9977,89,9995,56,9944,20,9934,92,9944,70,9925,27,9959,40,9916,35,9971,85,9999,98,9900,10,9984,41,9939,90,10000,41,9904,10,9978,1,9937,14,9921,91,9935,25,9965,70,9944,57,9911,53,9964,68,9952,15,9910,75,9959,41,9922,37,9930,80,9955,86,9989,36,9904,2,9901,81,9934,9,9984,40,9940,70,9983,36,9906,100,9990,31,9988,66,9917,33,9976,7,10000,49,9953,35,9974,28,9932,40,9968,62,9957,90,9915,54,9947,21,9966,6,9929,90,9961,49,9903,30,9910,39,9912,23,9916,56,9901,96,9946,67,9952,15,9967,31,9963,36,9934,51,9955,60,9989,7,9921,90,9967,45,9925,31,9919,28,9938,100,9918,23,9970,32,9969,3,9923,29,9992,53,9990,20,9931,97,9971,16,9974,87,9921,95,9931,67,9999,38,9990,94,9902,92,9958,25,9907,52,9921,48,9964,49,9927,49,9968,67,9963,13,9916,11,9968,1,9910,1,9995,31,9995,50,9957,86,9935,52,9944,84,9950,33,9992,9,9997,20,9975,31,9994,26,9905,97,9906,65,9908,88,9957,31,9957,90,9999,97,9984,17,9976,80,9965,37,9901,76,9918,44,9985,45,9946,38,9964,82,9988,32,9917,2,9961,93,9925,77,9950,43,9960,38,9956,17,9960,37,9989,42,9944,81,9977,48,9950,74,9951,89,9964,38,9986,96,9972,30,9924,55,9927,33,9965,21,9965,17,9976,66,9996,68,9999,64,9982,60,9943,33,9955,38,9958,83,9967,6,9993,24,9932,58,9988,8,9902,25,9976,13,9932,0,9927,23,9979,22,9984,46,9978,34,9901,86,9984,2,9902,77,9921,39,9930,50,9963,94,9946,45,9911,74,9955,100,9914,89,9903,98,9922,1,9976,68,9934,45,9994,26,9949,25,9940,23,9922,63,9984,19,9978,75,9964,52,9975,80,9929,0,9906,55,9977,4,9982,82,9982,17,9964,10,9953,39,9942,81,9980,79,9924,91,9907,43,9917,40,9984,95,9935,62,9961,77,9942,34,9982,9,9958,96,9920,13,9965,33,9971,91,9951,77,9957,53,9985,20,9977,53,9998,16,9987,84,9999,100,9914,74,9998,14,9923,95,9961,37,9987,93,9912,87,9997,54,9933,35,10000,14,9981,45,9965,68,9909,1,9905,77,9901,99,9917,15,9952,49,10000,61,9903,40,9980,17,9910,89,9950,82,9974,95,9928,6,9926,52,9903,6,9976,100,9951,16,9971,93,9990,38,9952,51,9969,7,9995,57,9969,18,9971,16,9982,26,9975,21,9911,73,9960,36,9934,32,9927,51,9987,1,9981,6,9967,99,9999,8,9901,81,9936,19,9998,18,9997,64,9917,14,9942,0,9994,41,9918,42,9974,96,9908,11,9947,26,9932,57,9942,87,9962,60,9968,67,9910,10,9940,56,9949,99,9951,69,9961,70,9954,66,9909,28,9918,82,9951,65,9940,18,9909,18,9919,4,9949,82,9972,14,9985,8,9967,34,9972,38,9945,85,9993,61,9951,75,9940,95,9985,79,9959,65,9944,29,9999,64,9904,92,9949,100,9946,43,9965,0,9931,73,9909,60,9914,47,9955,98,9979,31,9969,3,9966,64,9914,5,9972,45,9905,46,9923,43,9934,62,9961,96,9953,0,9982,98,9930,83,9983,61,9995,92,9944,87,10000,92,9920,5,9997,94,9961,67,9984,21,9949,89,9936,87,9974,61,9927,3,9990,58,9979,76,9985,22,9978,56,9940,74,9941,55,9972,98,9980,18,9965,54,9950,30,9947,48,9937,30,9927,32,9930,68,9975,47,9958,30,9976,43,9979,81,9918,41,9931,18,9997,32,9970,22,9968,90,9990,76,9914,57,9961,26,9988,23,9976,45,9977,31,9990,11,9969,63,9926,37,9949,34,9965,25,9945,52,9940,93,9902,5,9924,25,9977,20,9971,58,9910,32,9964,36,9988,62,9953,40,9986,95,9989,89,9949,6,9914,7,9942,20,9997,34,9978,92,9971,56,9939,70,9953,61,9947,28,9986,11,9992,10,9980,11,9964,2,9984,74,9965,42,9993,76,9912,72,9930,2,9905,100,9912,93,9939,11,9975,50,9990,16,9998,73,9978,67,9925,35,9937,20,9923,75,9928,17,9916,29,9933,63,10000,38,9918,94,9978,34,9926,10,9917,84,9952,23,9925,75,9902,44,9968,84,9961,86,9916,96,9994,34],"i":999,"scale":0.001,"rot":0,"posx":0,"posy":9954,"time":0,"energy":0,"sol":46,"charging":false},{"N":1000,"H":[0,670,668,9909,9910,3613,66,2349,3393,9461,55,6851,2083,2383,7945,8823,672,8246,5222,3604,2857,7481,5187,7251,3791,4511,3092,1644,5731,8030,4459,5777,8825,9644,4632,3569,4681,9050,6430,1072,2870,6153,1864,9666,1559,8469,2268,7550,2362,6923,4286,8784,3196,2910,1121,4342,7217,5358,6163,8386,839,5641,6390,6290,9004,2062,8865,9326,2489,569,5003,7269,8458,9428,6813,3442,7679,3333,6413,1437,1598,8770,6588,1992,8302,7644,2751,528,3301,3817,3943,1558,9805,6192,6659,1141,8977,3483,8612,3255,3579,8057,1488,3136,1632,8408,2133,9892,3199,9015,9450,8516,7071,9842,6470,4294,7722,9877,473,5747,5658,3373,567,3237,7217,3526,8486,3474,114,2348,3876,7434,7730,1497,9900,4523,4751,6425,5391,4873,1452,2039,8132,6071,1447,3769,2229,6706,3933,292,7944,4635,2358,8473,6064,2385,1896,8321,5266,5246,1238,5889,3139,3280,4836,8543,6944,6207,6467,581,2338,7223,1263,4715,2540,8629,3080,9869,8016,5733,2545,9591,2434,9381,7035,4339,3466,1913,2585,2282,7232,8785,6943,2940,627,4896,7703,9386,1397,6007,1614,1654,8098,4024,8526,700,493,9655,1413,7629,4260,9598,4208,9215,6166,2661,3892,1998,9521,8483,2619,8137,3984,215,3710,2351,9847,2363,2528,9699,2905,1112,1730,4578,1564,4416,7664,9456,4226,9475,6878,679,1224,2316,7397,960,5685,5453,4160,6681,6397,363,4857,3962,3478,1460,9708,2359,4060,8567,3489,7421,5237,175,4103,6894,9473,8507,8973,2116,5437,9330,8737,6360,3283,4886,1555,7293,4418,3881,4289,5018,1387,6028,2374,7371,430,6329,7328,851,4675,8362,6944,7671,9321,8479,3189,2626,123,4371,1752,6306,4212,3241,7942,7714,4337,8444,6621,2174,9972,8149,4393,2817,254,3403,5552,4287,1790,511,7144,5081,5285,3154,5413,6722,2089,2030,4095,5857,7739,7232,2846,5800,7007,7149,6719,5974,9569,1729,1438,9136,7419,2146,1573,254,8599,6328,7864,3890,6443,1583,6911,938,4855,9843,2792,4937,4563,8631,2038,9140,5527,2,2366,24,1526,5559,5533,7411,3250,3977,6135,9363,7556,4284,8943,2805,7368,6558,243,1691,77,1755,5400,3403,5119,8925,1884,8208,4935,1515,1677,8925,4729,998,4027,1822,2695,7283,2712,2715,7622,4224,2749,7206,9354,446,9186,6201,267,2010,1645,5075,1357,6249,3418,4202,6288,3760,7587,9741,8268,9170,6029,3056,6970,137,9650,6896,9870,3829,4641,5682,8406,5141,7748,7660,4149,5645,4469,2683,3055,3641,7573,5301,380,6099,7770,4691,4050,344,1669,7524,8479,2985,3239,6368,9857,5435,9039,2177,539,8053,6782,7651,7223,6025,195,3234,9291,3342,1116,8033,2154,1437,8503,9075,6634,4570,3405,1289,7013,373,8921,7818,5615,47,3238,4835,6862,7354,8418,4645,1051,637,1410,5671,6208,6758,6241,3804,4639,7941,6562,9073,10,7125,4727,7948,2523,6538,7070,6469,9604,9841,4947,7695,8972,6056,4981,6860,9597,2784,5679,610,6954,7195,7223,5084,1078,3715,5429,3785,6172,393,5551,2555,2999,8144,1132,1631,2902,9895,524,3749,2932,162,8522,7164,7069,2941,4742,6502,7215,5103,8705,620,2611,7845,2586,1746,1912,7759,4633,5001,4944,6409,529,9600,4377,5436,7558,1111,980,4812,3600,7451,5068,8981,3372,6186,1114,6945,662,698,1498,6043,115,4826,5059,950,19,542,706,2553,9731,2772,7696,1331,9592,2281,331,9186,2211,1665,1258,1070,9953,1897,3305,1640,7982,7091,1315,1886,7759,7302,8215,2753,8845,1669,2264,6103,6916,8379,2129,1322,8299,574,9061,4065,1544,6195,6090,8661,5310,9202,9369,8955,6428,5025,3967,9273,1499,2498,9911,6637,5969,4646,5781,8280,6121,343,130,20,2344,4223,3432,2242,3050,1897,8020,7928,2061,4514,4272,2274,668,2821,5755,5300,3278,1557,8219,8109,2369,4117,5257,3105,1896,3980,5777,6543,1689,4502,6354,9131,5847,524,5439,3794,6456,552,6899,8799,4426,2609,4291,764,4385,1303,5487,6824,127,4369,3714,2936,4151,6050,8581,1858,2800,8149,3264,9288,9997,9720,1211,6684,4672,698,4227,85,492,9941,2599,5396,2817,6627,3837,9552,8988,3242,517,8898,3104,7436,8957,7366,9718,5484,5679,5983,1917,273,6861,5958,3048,7862,3736,6308,9828,242,3083,8099,6772,6427,2650,2520,7026,6246,7286,3517,4140,1034,2593,9314,36,4928,3024,1617,2526,4100,2889,6519,4204,8546,6900,5249,8822,6952,8036,7603,1965,4109,9916,5162,4210,4136,4667,6150,9960,8418,381,8191,8417,8226,3325,6912,4460,6662,593,353,6791,9102,1403,4558,416,480,8074,6390,8741,5729,8999,7729,8583,7289,9107,7780,9472,3031,9619,409,9947,5828,3444,5044,7052,1092,3591,1595,2708,9934,7424,2108,8144,5171,7212,2531,8007,4134,8048,5589,8600,3671,735,5910,8367,4322,6452,8767,9751,1576,5025,2125,8256,2288,2382,1046,5569,3187,725,442,8022,7714,1277,9398,8577,828,2282,7642,9226,2218,9226,4231,1326,4955,5844,2139,7666,6072,700,5404,1691,1649,1803,5020,5051,9504,5984,2957,116,7783,6634,6628,3505,1496,6844,4371,7967,7076,8074,6173,2382,7032,3369,6948,3146,4384,1174,2242,7618,5273,5945,4773,7370,5629,4031,2658,7555,2089,5568,3589,8146,2528,1587,8793,9605,9904,7286,5210,2853,1433,5179,2673,4461,5836,1910,1842,6206,5276,5369,5073,5460,24,3100,4954,3056,2781,9138,2605,7786,3944,1300,8579,4253,1732,835,6207,1462,6407,7599,7940,2307,2304,945,1852,2477,1961,6620,9953,1538,4609,1340,9448,9512,1632,3553,4950,6602,2819,8700,7415,4371,5533,2860,6613,4274,2903,2651,1403,3463,8521,5858,7468,1487,5439,8459,6952],"i":999,"scale":0.0010003000900270082,"rot":0,"posx":0,"posy":0,"time":0,"energy":0,"sol":9997,"charging":false}]');function y(a){return function(){return a}}const G=Math.PI,P=2*G,w=1e-6,z0=P-w;function e0(a){this._+=a[0];for(let i=1,s=a.length;i<s;++i)this._+=arguments[i]+a[i]}function N0(a){let i=Math.floor(a);if(!(i>=0))throw new Error(`invalid digits: ${a}`);if(i>15)return e0;const s=10**i;return function(t){this._+=t[0];for(let n=1,r=t.length;n<r;++n)this._+=Math.round(arguments[n]*s)/s+t[n]}}class y0{constructor(i){this._x0=this._y0=this._x1=this._y1=null,this._="",this._append=i==null?e0:N0(i)}moveTo(i,s){this._append`M${this._x0=this._x1=+i},${this._y0=this._y1=+s}`}closePath(){this._x1!==null&&(this._x1=this._x0,this._y1=this._y0,this._append`Z`)}lineTo(i,s){this._append`L${this._x1=+i},${this._y1=+s}`}quadraticCurveTo(i,s,t,n){this._append`Q${+i},${+s},${this._x1=+t},${this._y1=+n}`}bezierCurveTo(i,s,t,n,r,c){this._append`C${+i},${+s},${+t},${+n},${this._x1=+r},${this._y1=+c}`}arcTo(i,s,t,n,r){if(i=+i,s=+s,t=+t,n=+n,r=+r,r<0)throw new Error(`negative radius: ${r}`);let c=this._x1,l=this._y1,p=t-i,u=n-s,o=c-i,d=l-s,m=o*o+d*d;if(this._x1===null)this._append`M${this._x1=i},${this._y1=s}`;else if(m>w)if(!(Math.abs(d*p-u*o)>w)||!r)this._append`L${this._x1=i},${this._y1=s}`;else{let h=t-c,g=n-l,_=p*p+u*u,z=h*h+g*g,x=Math.sqrt(_),f=Math.sqrt(m),K=r*Math.tan((G-Math.acos((_+m-z)/(2*x*f)))/2),B=K/f,T=K/x;Math.abs(B-1)>w&&this._append`L${i+B*o},${s+B*d}`,this._append`A${r},${r},0,0,${+(d*h>o*g)},${this._x1=i+T*p},${this._y1=s+T*u}`}}arc(i,s,t,n,r,c){if(i=+i,s=+s,t=+t,c=!!c,t<0)throw new Error(`negative radius: ${t}`);let l=t*Math.cos(n),p=t*Math.sin(n),u=i+l,o=s+p,d=1^c,m=c?n-r:r-n;this._x1===null?this._append`M${u},${o}`:(Math.abs(this._x1-u)>w||Math.abs(this._y1-o)>w)&&this._append`L${u},${o}`,t&&(m<0&&(m=m%P+P),m>z0?this._append`A${t},${t},0,1,${d},${i-l},${s-p}A${t},${t},0,1,${d},${this._x1=u},${this._y1=o}`:m>w&&this._append`A${t},${t},0,${+(m>=G)},${d},${this._x1=i+t*Math.cos(r)},${this._y1=s+t*Math.sin(r)}`)}rect(i,s,t,n){this._append`M${this._x0=this._x1=+i},${this._y0=this._y1=+s}h${t=+t}v${+n}h${-t}Z`}toString(){return this._}}function S0(a){let i=3;return a.digits=function(s){if(!arguments.length)return i;if(s==null)i=null;else{const t=Math.floor(s);if(!(t>=0))throw new RangeError(`invalid digits: ${s}`);i=t}return a},()=>new y0(i)}function k0(a){return typeof a=="object"&&"length"in a?a:Array.from(a)}function i0(a){this._context=a}i0.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||this._line!==0&&this._point===1)&&this._context.closePath(),this._line=1-this._line},point:function(a,i){switch(a=+a,i=+i,this._point){case 0:this._point=1,this._line?this._context.lineTo(a,i):this._context.moveTo(a,i);break;case 1:this._point=2;default:this._context.lineTo(a,i);break}}};function $0(a){return new i0(a)}function A0(a){return a[0]}function M0(a){return a[1]}function q0(a,i){var s=y(!0),t=null,n=$0,r=null,c=S0(l);a=typeof a=="function"?a:a===void 0?A0:y(a),i=typeof i=="function"?i:i===void 0?M0:y(i);function l(p){var u,o=(p=k0(p)).length,d,m=!1,h;for(t==null&&(r=n(h=c())),u=0;u<=o;++u)!(u<o&&s(d=p[u],u,p))===m&&((m=!m)?r.lineStart():r.lineEnd()),m&&r.point(+a(d,u,p),+i(d,u,p));if(h)return r=null,h+""||null}return l.x=function(p){return arguments.length?(a=typeof p=="function"?p:y(+p),l):a},l.y=function(p){return arguments.length?(i=typeof p=="function"?p:y(+p),l):i},l.defined=function(p){return arguments.length?(s=typeof p=="function"?p:y(!!p),l):s},l.curve=function(p){return arguments.length?(n=p,t!=null&&(r=n(t)),l):n},l.context=function(p){return arguments.length?(p==null?t=r=null:r=n(t=p),l):t},l}class B0{constructor(i,s){this._context=i,this._x=s}areaStart(){this._line=0}areaEnd(){this._line=NaN}lineStart(){this._point=0}lineEnd(){(this._line||this._line!==0&&this._point===1)&&this._context.closePath(),this._line=1-this._line}point(i,s){switch(i=+i,s=+s,this._point){case 0:{this._point=1,this._line?this._context.lineTo(i,s):this._context.moveTo(i,s);break}case 1:this._point=2;default:{this._x?this._context.bezierCurveTo(this._x0=(this._x0+i)/2,this._y0,this._x0,s,i,s):this._context.bezierCurveTo(this._x0,this._y0=(this._y0+s)/2,i,this._y0,i,s);break}}this._x0=i,this._y0=s}}function R0(a){return new B0(a,!0)}const I0={src:new URL("../4/4340c456-bunny.svg",import.meta.url).href,width:50,height:59.42857142857143},U0={src:new URL("../5/5e99ae09-offcharge.svg",import.meta.url).href,width:20,height:54.48275862068965},C0={src:new URL("../3/32b09bb9-oncharge.svg",import.meta.url).href,width:20,height:54.48275862068965};function L0({variables:a,state:i}){const{H:s,N:t,posx:n,rot:r}=i;if(t>40)return e.jsx("div",{className:"text-slate-800 p-4",children:"La visualizzazione è disponibile solo per i primi 5 livelli."});const c=Math.max(...s),l=o=>8*o/c,u=q0().x((o,d)=>d).y(o=>l(o)).curve(R0)([-c/8,...i.H,-c/8]);return e.jsxs(e.Fragment,{children:[e.jsxs(M,{scale:40,children:[e.jsx(v,{width:t+.65,height:.2,x:.25,y:l(c)+2.1,className:"bg-gradient-to-b from-amber-800/80 to-white !border-0"}),e.jsx(v,{width:t+1,height:l(c)+1,x:0,y:1.1,className:"!border-0",children:e.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:`0 -0.9 ${t+1} ${l(c)+1}`,className:"-scale-y-100",children:[e.jsx("title",{children:"I conigli attraversano la montagna"}),e.jsx("path",{d:u,className:"fill-amber-800/80"}),s.map((o,d)=>{if(!(o<s[d-1]||o<s[d+1]))return e.jsxs(l0.Fragment,{children:[e.jsx("ellipse",{cx:d+.7,cy:l(o),rx:".6",ry:"0.6",fill:"white"}),e.jsx("ellipse",{cx:d+1,cy:l(o)-.1,rx:".4",ry:"0.4",fill:"white"})]},d)}),e.jsx("path",{d:u,fillOpacity:0,strokeWidth:.06,className:"stroke-amber-900"})]})}),e.jsx(j,{src:I0,x:n+.8,y:l(c-s[n]),alt:"Tip-Tap",rotation:-.5*r/Math.PI,follow:!0}),s.map((o,d)=>e.jsx(j,{src:d===n&&i.charging?C0:U0,x:d+.6,y:l(c-o)+.1,alt:"Stazione di ricarica"},d))]}),e.jsx(q,{variables:{N:i.N,energia:i.energy,tempo:i.time,...a}})]})}function D(a){const i={li:"li",p:"p",span:"span",strong:"strong",ul:"ul",...Y(),...a.components},{Blockly:s,Code:t,Equation:n,Explanation:r,Image:c,SubProblem:l}=i;return s||S("Blockly"),t||S("Code"),n||S("Equation"),r||S("Explanation"),c||S("Image"),l||S("SubProblem"),e.jsxs(l,{children:[e.jsx(i.p,{children:"I conigli della fattoria Fibonacci hanno appena comprato una nuova efficentissima macchina elettrica!"}),e.jsxs(i.p,{children:[`Non vedono l’ora di provarla, quindi organizzano un viaggio di prova sulle montagne vicine. Il tragitto che vogliono fare è fatto da tratti in salita e tratti in discesa.
Lungo il percorso ci sono `,e.jsx(n,{children:String.raw`N`})," colonnine di ricarica dove potersi fermare, a diverse altezze. La macchina ",e.jsx(i.strong,{children:"usa"})," un’unità di energia ",e.jsx(i.strong,{children:"salendo"})," di ",e.jsx(n,{children:String.raw`1`}),` metro di altitudine,
mentre `,e.jsx(i.strong,{children:"guadagna"})," un’unità di energia ",e.jsx(i.strong,{children:"scendendo"})," di ",e.jsx(n,{children:String.raw`1`}),` metro di altitudine, e non le serve energia per avanzare nei tratti in piano.
Purtroppo la macchina parte senza energia, e per ricaricarsi può attendere `,e.jsx(i.strong,{children:"un minuto"})," ad una delle colonnine per ogni unità di energia che vuole ottenere in quel momento."]}),e.jsx(i.p,{children:"Puoi usare questi blocchi:"}),e.jsxs(i.ul,{children:[`
`,e.jsxs(i.li,{children:[e.jsx(t,{code:String.raw`N`,inline:!0,lang:"text",className:"p-0 text-base"}),": la lunghezza ",e.jsx(n,{children:String.raw`N`})," del percorso."]}),`
`,e.jsxs(i.li,{children:[e.jsx(t,{code:String.raw`energia`,inline:!0,lang:"text",className:"p-0 text-base"}),": la quantità corrente di energia."]}),`
`,e.jsxs(i.li,{children:[e.jsx(t,{code:String.raw`altitudine della colonnina i`,inline:!0,lang:"text",className:"p-0 text-base"}),": l’altitudine della colonnina di ricarica ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`i`}),"-esima"]})," nel percorso."]}),`
`,e.jsxs(i.li,{children:[e.jsx(t,{code:String.raw`avanza`,inline:!0,lang:"text",className:"p-0 text-base"}),": prosegui il viaggio fino alla prossima colonnina, se hai abbastanza energia."]}),`
`,e.jsxs(i.li,{children:[e.jsx(t,{code:String.raw`ricarica per x minuti`,inline:!0,lang:"text",className:"p-0 text-base"}),": attendi ",e.jsx(n,{children:String.raw`x`})," minuti ad una colonnina per ricaricare ",e.jsx(n,{children:String.raw`x`})," unità di energia."]}),`
`,e.jsxs(i.li,{children:[e.jsx(t,{code:String.raw`termina`,inline:!0,lang:"text",className:"p-0 text-base"}),": spegni la macchina."]}),`
`]}),e.jsxs(i.p,{children:["I conigli partono dalla colonnina 1, e devono arrivare alla colonnina ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`N`}),"."]}),`
Organizza il viaggio sulle montagne, evitando che la macchina si fermi prima di arrivare!`]}),e.jsx(s,{customBlocks:v0,initialBlocks:w0,testcases:_0,debug:{logBlocks:!1,logJs:!1,logVariables:!1},visualizer:L0}),e.jsxs(r,{children:[e.jsx(i.p,{children:"Un possibile programma corretto è il seguente:"}),e.jsx(i.p,{children:e.jsx(c,{alt:"soluzione",src:typeof C=="function"?C(_variant):C})}),e.jsxs(i.p,{children:[`Secondo questo programma, per ognuna delle colonnine a partire dalla seconda, si controlla
se c’è abbastanza energia rimasta per coprire la differenza di altezza tra la prossima
colonnina `,e.jsx(n,{children:String.raw`i`})," e quella corrente ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`i-1`}),"."]}),` Se non è sufficiente, ci si ricarica
alla colonnina per la quantità di minuti minima indispensabile. Poi in ogni
caso si procede alla colonnina successiva.`]}),e.jsx(i.p,{children:"Un altro possibile approccio è il seguente:"}),e.jsx(i.p,{children:e.jsx(c,{alt:"soluzione",src:typeof L=="function"?L(_variant):L})}),e.jsx(i.p,{children:`Secondo questo programma, prima si calcola la massima altezza di una qualunque colonnina
lungo il percorso. A questo punto, ci si ricarica una singola volta della quantità di energia
necessaria per salire dall’altezza iniziale fino all’altezza massima. A questo punto c’è
abbastanza energia per procedere fino alla fine senza fermarsi.`})]})]})}function V0(a={}){const{wrapper:i}={...Y(),...a.components};return i?e.jsx(i,{...a,children:e.jsx(D,{...a})}):D(a)}function S(a,i){throw new Error("Expected component `"+a+"` to be defined: you likely forgot to import, pass, or provide it.")}function n0(){return{...A()}}const V={src:new URL("../d/d011f1fc-sol.webp",import.meta.url).href,width:841,height:898},E0=JSON.parse('{"blocks":{"languageVersion":0,"blocks":[{"type":"start","id":"y=zq)Uya2A/{vyOtN[i6","x":61,"y":81}]},"variables":[]}'),G0=JSON.parse(`[{"type":"start","message0":"inizia qui","inputsInline":true,"colour":20,"tooltip":"L'esecuzione inizia da qui","helpUrl":"","maxInstances":1,"js":"","nextStatement":null},{"type":"N","message0":"N","inputsInline":true,"colour":20,"tooltip":"il numero da raggiungere","helpUrl":"","js":["state.N",1.2],"output":"Number"},{"type":"termina","message0":"termina in %1 operazioni","args0":[{"type":"input_value","check":"Number","min":["0",0],"integer":true,"name":"_ARG0"}],"inputsInline":true,"colour":20,"tooltip":"termina in x operazioni","helpUrl":"","js":"(function(i) {\\n  if (i > state.sol) exit(false, \\"potevi fare meno di \\" + i + \\" operazioni\\");\\n  if (i < state.sol) exit(false, \\"non si può ottenere \\" + state.N + \\" con \\" + i + \\" operazioni\\");\\n  exit(true, i + \\" è il numero minimo di operazioni, complimenti!\\");\\n})(_ARG0);","previousStatement":null}]`),P0=JSON.parse('[{"N":5,"sol":5},{"N":8,"sol":3},{"N":3,"sol":3},{"N":632,"sol":13},{"N":9994,"sol":22},{"N":999761,"sol":32},{"N":531760889,"sol":42},{"N":492888992260,"sol":61},{"N":999999626401695,"sol":71},{"N":999999957413342,"sol":70}]'),K0={src:new URL("../d/d5b24aa0-bunny.svg",import.meta.url).href,width:100,height:176.40449438202248},T0={src:new URL("../2/2a9e5ce8-calcolatrice.svg",import.meta.url).href,width:200,height:200};function O0({variables:a,state:i}){return i.N>1e4?e.jsx("div",{className:"text-slate-800 p-4",children:"La visualizzazione è disponibile solo per i primi 5 livelli."}):e.jsxs(e.Fragment,{children:[e.jsx("link",{href:"https://fonts.googleapis.com/css?family=Orbitron",rel:"stylesheet",type:"text/css"}),e.jsxs(M,{scale:50,children:[e.jsx(j,{src:K0,alt:"Bunny",x:1,y:0}),e.jsx(j,{src:T0,alt:"Calcolatrice",x:3,y:1}),e.jsx(v,{color:"transparent",borderColor:"transparent",height:.4,width:2.2,x:4.3,y:1.4,rotation:.025,className:"font-[Orbitron] text-black",children:i.N})]}),e.jsx(q,{variables:{...a}})]})}function X(a){const i={em:"em",li:"li",p:"p",span:"span",strong:"strong",ul:"ul",...n0(),...a.components},{Blockly:s,Code:t,Equation:n,Explanation:r,Image:c,SubProblem:l}=i;return s||k("Blockly"),t||k("Code"),n||k("Equation"),r||k("Explanation"),c||k("Image"),l||k("SubProblem"),e.jsxs(l,{children:[e.jsxs(i.p,{children:[`Carol ha fatto cadere la sua calcolatrice, e ora non funziona più come dovrebbe!
Gli unici tasti funzionanti sono il `,e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`-`}),","]})," il ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`\times`}),","]})," l’",e.jsx(n,{children:String.raw`1`})," e il ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`2`}),"."]}),`
Per utilizzare la calcolatrice è costretta a partire dal numero `,e.jsx(n,{children:String.raw`1`})," o dal numero ",e.jsx(n,{children:String.raw`2`})," (premendo il tasto corrispondente) e applicare zero o più volte una delle ",e.jsx(n,{children:String.raw`4`})," possibili operazioni funzionanti:"]}),e.jsxs(i.ul,{children:[`
`,e.jsxs(i.li,{children:["sottrarre ",e.jsx(n,{children:String.raw`1`})]}),`
`,e.jsxs(i.li,{children:["sottrarre ",e.jsx(n,{children:String.raw`2`})]}),`
`,e.jsxs(i.li,{children:["moltiplicare per ",e.jsx(n,{children:String.raw`1`})]}),`
`,e.jsxs(i.li,{children:["moltiplicare per ",e.jsx(n,{children:String.raw`2`})]}),`
`]}),e.jsxs(i.p,{children:["Per fare uno scherzo ai suoi amici, vorrebbe raggiungere sulla calcolatrice il numero ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`N`}),"."]})," Quante operazioni deve fare al minimo per farlo?"]}),e.jsx(i.p,{children:e.jsxs(i.em,{children:[e.jsx(i.strong,{children:"Nota:"})," premere il tasto ",e.jsx(n,{children:String.raw`1`})," o ",e.jsx(n,{children:String.raw`2`})," all’inizio conta come un’operazione, inoltre la calcolatrice è danneggiata quindi Carol è costretta a partire sempre da ",e.jsx(n,{children:String.raw`1`})," o ",e.jsx(n,{children:String.raw`2`})," (",e.jsx(i.strong,{children:"non"})," può ad esempio premere ",e.jsx(n,{children:String.raw`2`})," e poi ",e.jsx(n,{children:String.raw`1`})," per partire dal numero ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`21`}),")"]})," e le uniche operazioni ammesse sono quelle precedentemente elencate (",e.jsx(i.strong,{children:"non"})," può per esempio moltiplicare o sottrarre ",e.jsx(n,{children:String.raw`12`})," o ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`21`}),")."]})]})}),e.jsx(i.p,{children:"Puoi usare questi blocchi:"}),e.jsxs(i.ul,{children:[`
`,e.jsxs(i.li,{children:[e.jsx(t,{code:String.raw`N`,inline:!0,lang:"text",className:"p-0 text-base"}),": il numero ",e.jsx(n,{children:String.raw`N`})," che vuole raggiungere."]}),`
`,e.jsxs(i.li,{children:[e.jsx(t,{code:String.raw`termina in x operazioni`,inline:!0,lang:"text",className:"p-0 text-base"}),": riporta che è possibile raggiungere il numero ",e.jsx(n,{children:String.raw`N`})," in ",e.jsx(n,{children:String.raw`x`})," operazioni."]}),`
`]}),e.jsx(i.p,{children:e.jsxs(i.em,{children:[e.jsx(i.strong,{children:"Attenzione:"})," non ti viene richiesto di ricostruire le operazioni da fare, basta che calcoli il numero di operazioni necessario!"]})}),e.jsx(s,{customBlocks:G0,initialBlocks:E0,testcases:P0,debug:{logBlocks:!1,logJs:!1,logVariables:!1},visualizer:O0}),e.jsxs(r,{children:[e.jsx(i.p,{children:"Un possibile programma corretto è il seguente:"}),e.jsx(i.p,{children:e.jsx(c,{alt:"soluzione",src:typeof V=="function"?V(_variant):V})}),e.jsxs(i.p,{children:[`L’idea di questa soluzione è di ragionare al contrario, partendo dal numero
che si vuole raggiungere e tornando indietro con le operazioni inverse. Per
esempio, se vogliamo raggiungere il numero 5, ci chiediamo quale numero potrebbe
essere l’ultimo che raggiungiamo prima di arrivare al 5. Visto che 5 è dispari,
non può essere che l’ultima operazione sia un raddoppio, e moltiplicare per 1
non è mai utile. Quindi il numero prima potrebbe essere o il 6 (da cui sottraendo
1 si arriva al 5), oppure il 7 (da cui sottraendo 2 si arriva al 5). Il 7 però
non sembra conveniente, perché essendo dispari ci si può arrivare solo da un’altro
numero ancora più grande (8 o 9), il che ci allontana dal nostro obiettivo.
Si può quindi mostrare che quando dobbiamo raggiungere un valore `,e.jsx(n,{children:String.raw`n`}),` dispari,
la cosa migliore è raggiungere prima `,e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`n+1`}),"."]}),` Similmente, quando dobbiamo raggiungere
un valore `,e.jsx(n,{children:String.raw`n`})," pari, la cosa migliore è raggiungere prima ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`n/2`}),"."]}),` Ripetiamo quindi
questo procedimento a ritroso a partire dal nostro obiettivo `,e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`N`}),","]}),` fino a che
non raggiungiamo 1 o 2, che sono numeri che possiamo direttamente scrivere
sulla nostra calcolatrice. Nel frattempo contiamo quante operazioni stiamo
facendo nella variabile risposta, risolvendo il quesito!`]})]})]})}function H0(a={}){const{wrapper:i}={...n0(),...a.components};return i?e.jsx(i,{...a,children:e.jsx(X,{...a})}):X(a)}function k(a,i){throw new Error("Expected component `"+a+"` to be defined: you likely forgot to import, pass, or provide it.")}function a0(){return{...A()}}const E={src:new URL("../d/df7e0f0d-sol.webp",import.meta.url).href,width:1645,height:1846},D0=JSON.parse('{"blocks":{"languageVersion":0,"blocks":[{"type":"start","id":"y=zq)Uya2A/{vyOtN[i6","x":61,"y":81}]},"variables":[]}'),X0=JSON.parse(`[{"type":"start","message0":"inizia qui","inputsInline":true,"colour":20,"tooltip":"L'esecuzione inizia da qui","helpUrl":"","maxInstances":1,"js":"","nextStatement":null},{"type":"N","message0":"N","inputsInline":true,"colour":20,"tooltip":"il numero di ostacoli","helpUrl":"","js":["state.N",1.2],"output":"Number"},{"type":"pedana","message0":"pedana %1 %2","args0":[{"type":"field_dropdown","options":[["alta","A"],["bassa","B"]],"name":"_ARG0"},{"type":"input_value","check":"Number","min":["1",0],"max":["state.N",1.2],"integer":true,"name":"_ARG1"}],"inputsInline":true,"colour":20,"tooltip":"l'altezza dell'ostacolo dato","helpUrl":"","js":["state._ARG0[(_ARG1) - 1]",1.2],"output":"Number"},{"type":"differenza assoluta","message0":"differenza assoluta tra %1 e %2","args0":[{"type":"input_value","check":"Number","name":"_ARG0"},{"type":"input_value","check":"Number","name":"_ARG1"}],"inputsInline":true,"colour":20,"tooltip":"la differenza assoluta tra x e y","helpUrl":"","js":["Math.abs((_ARG0) - (_ARG1))",2],"output":"Number"},{"type":"minimo","message0":"minimo tra %1 e %2","args0":[{"type":"input_value","check":"Number","name":"_ARG0"},{"type":"input_value","check":"Number","name":"_ARG1"}],"inputsInline":true,"colour":20,"tooltip":"il valore minimo tra x e y","helpUrl":"","js":["Math.min(_ARG0, _ARG1)",2],"output":"Number"},{"type":"termina","message0":"termina in %1 tempo","args0":[{"type":"input_value","check":"Number","min":["0",0],"integer":true,"name":"_ARG0"}],"inputsInline":true,"colour":20,"tooltip":"termina in x tempo","helpUrl":"","js":"(function(i) {\\n  if (i > state.sol) exit(false, \\"potevi metterci meno di \\" + i + \\" tempo\\");\\n  if (i < state.sol) exit(false, \\"non si può finire il livello in \\" + i + \\" tempo\\");\\n  exit(true, i + \\" è il tempo minimo per finire il livello, complimenti!\\");\\n})(_ARG0);","previousStatement":null},{"type":"valore pedana","message0":"valore pedana %1 %2","args0":[{"type":"field_dropdown","options":[["alta","VA"],["bassa","VB"]],"name":"_ARG0"},{"type":"input_value","check":"Number","min":["1",0],"max":["state.N",1.2],"integer":true,"name":"_ARG1"}],"inputsInline":true,"colour":20,"tooltip":"valore salvato dell'ostacolo dato","helpUrl":"","js":["state._ARG0[(_ARG1) - 1]",1.2],"output":"Number"},{"type":"imposta valore pedana","message0":"imposta valore pedana %1 %2 a %3","args0":[{"type":"field_dropdown","options":[["alta","VA"],["bassa","VB"]],"name":"_ARG0"},{"type":"input_value","check":"Number","min":["1",0],"max":["state.N",1.2],"integer":true,"name":"_ARG1"},{"type":"input_value","check":"Number","name":"_ARG2"}],"inputsInline":true,"colour":20,"tooltip":"salva un valore dell'ostacolo dato","helpUrl":"","js":"state._ARG0[(_ARG1) - 1] = _ARG2;","nextStatement":null,"previousStatement":null}]`),J0=JSON.parse('[{"N":2,"A":[14,13],"B":[7,7],"i":1,"VA":[0,0],"VB":[0,0],"sol":7},{"N":5,"A":[2,17,13,27,16],"B":[2,16,13,10,12],"i":4,"VA":[0,0,0,0,0],"VB":[0,0,0,0,0],"sol":24},{"N":10,"A":[19,17,10,25,20,18,10,24,22,16],"B":[7,5,3,4,9,5,2,3,11,4],"i":9,"VA":[0,0,0,0,0,0,0,0,0,0],"VB":[0,0,0,0,0,0,0,0,0,0],"sol":38},{"N":25,"A":[10,11,11,10,7,7,7,9,9,8,8,11,7,9,7,11,7,11,11,10,11,9,9,8,7],"B":[2,1,2,2,1,2,2,1,1,1,1,2,1,2,2,2,2,1,2,1,2,1,1,1,2],"goal":9,"i":24,"VA":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"VB":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"sol":16},{"N":50,"A":[16,3,5,2,18,17,17,7,19,19,15,12,11,4,19,7,1,4,12,11,2,5,2,1,7,19,13,12,2,7,4,7,2,18,20,9,8,10,14,2,2,13,9,16,7,2,6,17,4,6],"B":[3,3,2,1,13,9,8,6,14,9,8,2,10,4,11,2,1,2,3,7,1,2,1,1,5,4,2,2,1,2,4,6,1,14,4,2,2,6,3,2,1,4,6,6,7,1,3,9,4,1],"i":49,"VA":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"VB":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"sol":146},{"N":100,"A":[96,97,95,95,97,96,95,97,94,96,97,95,97,95,96,93,94,94,94,96,96,96,96,94,93,94,97,97,93,96,95,93,94,93,93,96,93,93,97,93,93,94,95,93,96,93,96,95,97,93,95,93,94,97,95,93,96,96,97,94,97,93,94,95,95,95,93,95,94,95,96,94,93,94,95,97,95,95,96,93,96,95,93,93,96,95,94,97,93,93,94,96,93,97,95,96,94,93,94,97],"B":[19,10,13,5,1,3,2,9,8,12,10,19,5,13,3,20,11,8,15,19,2,19,2,15,9,15,16,20,2,11,15,14,18,5,13,11,7,1,20,7,20,10,6,16,3,9,4,5,12,5,1,2,9,11,19,20,15,12,6,13,10,5,9,11,3,20,2,6,19,12,18,10,16,2,6,3,13,10,4,18,16,11,16,16,2,11,6,13,3,7,2,1,13,17,15,19,14,12,9,6],"goal":95,"i":99,"VA":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"VB":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"sol":263},{"N":200,"A":[221,184,33,270,104,255,132,22,75,102,194,280,54,250,289,217,254,166,256,278,5,163,19,76,80,299,241,44,21,116,21,8,170,77,191,196,258,294,266,219,106,275,247,199,120,11,1,155,292,171,253,135,209,197,84,66,147,29,247,73,42,181,19,198,25,242,78,17,166,282,100,252,31,240,173,64,66,151,266,20,228,98,183,39,21,131,267,118,258,260,59,219,217,54,33,213,80,229,214,255,167,41,37,184,16,179,6,188,74,2,64,151,13,120,73,233,245,133,15,186,243,152,168,42,274,81,76,115,261,122,95,191,24,11,40,68,154,214,73,153,44,228,190,271,193,5,165,105,151,47,56,58,79,205,216,90,233,268,182,45,105,1,237,112,59,155,80,242,255,119,208,12,139,1,204,298,228,130,146,44,37,157,175,272,84,213,145,69,108,54,279,143,227,291,81,62,206,240,287,182],"B":[50,30,2,232,16,102,54,7,14,59,93,78,39,38,208,134,174,128,104,113,3,83,17,33,49,151,17,34,3,17,10,8,42,59,130,136,18,47,40,194,38,214,217,156,109,11,1,130,131,17,221,78,99,16,83,31,86,2,107,63,10,106,15,118,4,200,3,5,27,178,50,29,20,158,167,38,50,32,97,13,96,59,162,3,16,7,111,12,216,157,10,145,22,27,7,199,4,111,8,236,65,23,8,178,12,46,2,19,27,1,1,95,10,110,24,29,89,34,4,86,75,142,48,7,158,49,17,41,125,97,38,108,5,7,5,54,141,190,55,91,16,162,164,30,105,4,113,48,121,12,18,36,58,48,111,32,88,73,119,31,38,1,2,39,50,140,55,24,195,70,72,2,11,1,135,203,27,91,51,3,17,137,31,128,9,75,134,67,69,27,207,75,96,71,16,25,152,36,154,162],"i":199,"VA":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"VB":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"sol":10774},{"N":500,"A":[485,426,489,712,326,668,455,147,54,221,364,401,867,69,703,405,370,119,4,895,717,745,145,196,445,734,394,339,664,152,956,152,324,214,455,809,438,504,748,815,450,601,928,35,649,892,373,761,694,239,305,722,770,790,422,56,714,682,978,953,957,595,502,722,221,273,45,167,4,671,144,806,697,994,407,944,465,348,105,905,814,331,467,333,30,46,378,215,355,858,258,320,881,261,353,46,957,75,472,742,49,506,451,88,247,847,158,906,452,79,573,41,256,226,861,957,328,110,922,625,808,729,797,527,550,280,17,630,177,255,292,760,528,880,125,661,122,579,236,734,560,227,852,67,315,240,644,294,141,567,336,600,832,898,159,523,139,801,509,786,993,241,136,779,362,606,645,923,631,540,501,317,982,569,677,829,493,322,266,619,721,842,805,394,214,323,352,685,674,267,688,313,365,553,750,155,23,643,26,47,232,335,841,354,433,914,460,146,320,665,746,392,420,547,824,704,778,579,419,176,513,637,861,717,82,244,849,181,969,980,918,761,575,736,438,107,644,728,630,42,349,28,955,38,92,300,470,520,167,346,823,968,16,544,564,36,585,269,467,739,414,508,22,758,261,703,781,529,396,214,580,825,601,698,167,339,599,579,976,372,641,331,802,616,175,808,583,453,350,972,492,970,839,798,766,193,563,286,543,65,594,965,648,620,773,273,292,439,840,288,551,568,351,723,811,866,769,160,394,476,576,652,818,234,17,542,697,647,643,20,586,282,968,949,80,459,762,461,522,981,169,946,951,650,963,259,903,793,625,93,31,12,208,408,447,651,690,714,597,364,130,336,408,944,139,84,886,370,72,735,688,483,323,323,927,784,282,687,610,414,524,167,915,933,723,734,748,45,708,397,353,833,83,179,207,268,718,802,530,932,775,566,40,182,525,918,324,198,811,626,832,535,727,935,139,791,59,85,352,833,82,438,361,463,854,525,862,122,325,187,20,908,198,424,64,816,934,615,367,419,452,619,689,577,423,32,822,196,66,99,27,22,414,708,919,331,810,764,508,83,549,810,880,29,529,857,83,368,483,158,641,983,1,346,968,713,165,799,656,966,957,337,495,910,695,46,247,289,175,361,168,475,898,142,579,167,6,400,821,153],"B":[381,112,251,514,253,62,154,127,40,7,242,6,540,11,686,4,22,80,3,656,300,233,74,27,236,339,87,216,446,115,726,135,67,48,179,399,414,200,226,201,105,51,398,15,87,192,30,654,178,157,45,525,292,362,235,41,529,665,561,753,441,466,131,488,87,22,4,90,3,8,17,439,228,624,286,227,99,312,78,88,327,275,458,131,17,13,42,135,97,207,155,265,394,247,123,20,566,2,254,449,27,236,61,11,26,784,106,219,314,55,404,12,251,33,286,361,223,72,293,555,207,304,453,474,268,119,4,102,107,56,4,549,439,51,50,280,95,368,173,721,289,190,246,67,168,96,492,88,4,517,188,26,133,406,46,79,53,794,292,713,219,188,60,394,312,136,511,111,27,368,234,7,226,167,507,756,280,41,71,412,196,325,299,31,10,128,226,676,232,177,167,9,294,60,646,91,16,63,8,1,168,35,64,340,70,222,223,92,91,337,419,5,136,545,754,474,43,126,200,1,142,527,751,152,43,216,841,64,23,826,173,701,173,81,307,80,469,154,617,17,193,21,911,32,46,78,121,365,104,139,505,403,10,296,481,35,566,20,203,123,178,27,9,36,149,213,542,349,129,30,338,249,546,362,40,5,53,160,353,150,301,254,414,442,1,145,45,65,5,739,466,681,679,264,627,18,435,90,174,21,113,517,557,394,446,160,7,399,736,133,540,326,98,443,146,7,524,145,185,19,422,629,779,231,12,163,200,363,509,8,248,95,777,431,74,122,731,443,103,193,113,67,437,405,279,224,776,365,336,40,16,5,196,198,398,641,399,40,477,292,72,13,243,535,11,73,356,3,25,114,554,23,13,202,129,651,209,146,152,157,62,33,138,493,658,48,533,36,647,93,300,85,72,68,205,168,260,266,468,159,460,157,38,165,35,776,37,166,468,245,470,164,342,671,122,570,35,67,2,794,14,312,292,172,388,371,652,18,12,33,11,623,12,331,40,399,54,173,40,28,182,262,318,465,93,30,271,100,46,16,12,6,316,670,14,234,568,712,244,7,412,803,269,21,99,847,43,51,17,133,294,38,1,81,562,151,45,163,249,900,640,13,491,641,408,15,163,169,61,116,108,187,579,99,14,150,6,368,177,5],"i":499,"VA":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"VB":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"sol":94879},{"N":800,"A":[104,2090,157,459,2505,628,109,1787,2812,2914,565,2090,2185,300,1671,2698,396,1787,1930,922,984,1971,2382,1034,2157,2222,2475,971,166,1318,2565,2190,591,110,1725,1611,430,1887,1893,695,1943,652,1163,461,1415,2575,1937,2125,802,725,1330,1557,170,2259,143,1103,2982,1421,542,2512,679,1764,1632,312,1743,2975,567,627,674,122,556,1463,1180,2803,1675,1073,1403,2055,2184,1541,2276,961,1551,1599,2096,1680,401,631,21,2440,438,2652,2441,456,2821,691,350,43,1484,1969,443,1854,2394,2731,937,2301,320,689,2635,2119,2492,1795,2801,1082,2407,1591,1807,220,356,2410,1371,2076,161,2540,1101,2009,2642,1937,742,2216,654,2494,1872,281,1611,1680,378,1976,455,578,386,2697,2727,2403,814,136,2287,2926,439,2292,1406,2809,990,2039,1276,921,2031,2085,376,1249,1730,1506,596,1180,1971,1472,1575,530,1644,2050,937,2906,2590,1770,1472,2927,432,1194,1827,1410,766,2046,451,1573,1904,1892,2532,2768,2058,1994,1289,2802,377,1300,932,1767,2357,1666,1080,2972,732,741,1492,958,34,2190,532,2477,335,810,2131,274,960,1702,1945,2,861,169,1104,2388,2883,1382,2625,2441,378,423,424,99,582,1553,2348,826,2081,493,433,1945,2085,1925,1864,1392,1705,1546,2315,1375,1859,1438,1681,1831,25,1659,1828,1760,1038,1946,935,1162,2676,2456,2140,769,2121,242,1405,1370,657,1599,769,2033,687,194,2794,769,1344,2127,624,2717,874,1808,996,2474,2277,3,256,995,2762,918,2804,2113,2645,1174,2022,788,1527,1461,1601,2717,1920,601,465,639,1901,2215,1507,191,1664,359,2399,1686,863,17,2175,1265,2228,271,2478,63,1718,1475,343,980,115,2100,629,1059,2432,1141,1568,2076,936,2418,365,635,2568,2309,260,1781,1580,100,1779,2722,581,488,1761,131,1083,473,1195,2524,2219,1388,2262,662,90,1057,564,407,2299,278,2337,2133,2402,1988,2131,1423,2285,726,2718,1635,2494,1428,1103,2242,886,1286,1134,342,1344,2894,144,2506,1198,682,825,2272,1840,1699,2179,503,2432,1328,1215,2574,2760,129,34,313,1299,2677,199,1020,2836,574,2446,1592,1151,1039,2183,1839,504,1534,2133,947,1956,126,333,404,528,63,1484,1696,2160,2048,1100,1768,2857,673,1464,1021,907,1233,764,1026,743,2957,2889,997,2294,2382,1016,1227,2958,819,1688,1561,1589,1577,2156,423,353,48,44,1622,2762,1690,2711,1058,647,994,860,220,275,1020,2909,551,1185,2451,1439,1467,1218,2629,548,1964,818,1626,1940,1804,1948,1213,1430,2471,1622,1644,2055,2764,964,1767,1087,686,575,2178,2653,1400,1776,1869,2665,214,2989,1053,2832,75,2447,1051,888,2532,2709,2497,37,85,686,968,2048,1453,2385,473,102,706,2433,1117,855,807,756,2033,620,2072,2404,12,1787,129,2059,1718,1359,2566,775,252,566,2692,1991,2495,1105,1879,654,2099,2290,2491,1726,652,1717,518,2395,762,1206,2805,1075,454,1457,2196,34,2490,568,1672,1972,111,2589,349,2638,923,858,114,2454,543,1666,2238,1826,2222,2297,2639,2411,366,1924,1098,867,2805,2607,2145,43,1166,577,552,1361,1325,1353,257,1528,1040,1360,1928,2157,332,1798,1652,1967,1745,304,589,2095,607,587,142,2641,475,279,1097,1443,2978,1648,1308,1912,1415,2057,2971,1500,2099,1024,1947,1508,2536,2236,2125,458,2335,163,737,1103,1979,1717,2654,2681,1956,2971,2800,179,2155,1579,1179,873,2897,2553,2748,2505,1292,1343,2327,2099,1604,1510,1210,866,991,2405,1866,2455,2556,1320,590,2255,2198,1831,839,744,1467,1021,364,2035,862,1597,2097,1450,1292,178,807,670,1878,1028,1179,1720,1287,224,472,241,655,2519,1795,2245,1974,903,368,2573,2074,2704,2102,2444,2309,83,392,1279,2409,2908,2359,811,1211,753,926,533,1057,1244,2524,838,559,746,2412,1440,2698,2778,1110,2951,2532,2455,17,849,2366,1713,596,2206,2062,902,715,1297,948,2611,2766,412,2008,1445,2412,893,2263,269,1539,2417,2118,2932,591,1072,728,1086,1340,2097,1411,2958,2252,2908,2332,2688,1251,2115,861,834,360,2193,499,2759,2677,133,955,390,1549,286,871,814,2015,785,2103,2474,2254,2618,1768,1618,1074,2622,2470,1437,844,2640,810,882,2794,29,970,1933,2476],"B":[42,16,13,294,605,389,54,1164,1364,1016,373,888,1640,67,1160,1437,221,504,782,405,661,814,283,565,1523,89,1944,283,157,801,437,200,402,99,1498,887,366,1238,331,349,842,605,1032,189,293,1465,1291,221,264,598,607,1300,75,1767,106,769,853,275,113,1463,32,1182,950,40,1116,2269,174,213,234,68,505,1277,687,486,1584,325,1287,1360,593,1516,1251,902,710,966,1255,833,350,152,19,2119,357,840,2104,137,2517,385,19,8,1480,652,347,756,1040,1993,163,2260,261,27,684,1675,853,1451,1659,44,550,351,1158,97,330,1660,478,1866,123,417,1040,1129,1615,544,236,1493,310,589,141,245,1160,1139,136,471,152,369,71,233,561,2289,8,104,2009,2828,243,1423,200,22,233,1718,563,10,727,1397,40,1175,464,781,238,409,1352,580,1255,123,728,1930,672,1532,1470,569,821,1160,246,248,316,499,347,469,349,797,1052,1159,904,1636,1275,477,1061,7,242,808,841,100,166,192,411,1339,116,716,58,45,25,19,120,817,239,2,1701,91,233,783,1654,2,391,158,59,1422,1506,930,551,2118,129,366,140,89,140,425,1309,432,2050,287,355,256,1834,366,1122,264,522,161,2071,479,509,985,49,1482,18,1566,459,494,978,289,452,738,1992,610,359,308,503,40,76,1274,480,1389,422,394,401,87,2134,742,376,1778,506,2338,613,68,500,1302,805,1,69,454,2499,677,447,1743,2598,693,1404,168,1142,898,899,1301,138,226,385,404,1450,861,1443,6,425,212,2334,1108,649,5,2006,779,2201,41,2019,14,1264,640,12,629,76,1506,477,226,1832,450,787,1392,844,1081,23,324,2393,1987,246,655,1494,15,1244,548,32,362,508,70,788,177,766,777,245,1056,58,508,82,680,353,315,1711,129,427,308,526,71,916,199,889,711,943,413,1799,324,714,823,477,264,1,339,632,1325,22,58,235,282,526,1419,183,1030,1676,42,1897,357,494,1790,1175,6,18,161,1122,1178,182,870,2117,266,230,858,462,641,2005,1451,217,348,211,724,786,31,158,94,449,58,1077,256,1010,1154,828,965,240,537,415,155,819,298,565,56,239,1710,643,777,528,689,537,44,1888,64,344,1036,436,1093,2021,65,273,6,16,923,1130,708,1624,157,601,759,47,131,229,462,2710,522,28,606,1366,752,1028,1039,24,1653,624,696,618,286,1677,680,1307,1560,1186,1425,1221,2314,194,444,1054,522,530,2074,1950,531,618,1857,2158,203,796,940,282,26,423,3,190,712,1477,1097,2,78,318,403,1488,180,1770,359,99,15,2178,723,394,327,184,1348,606,1670,929,1,1238,35,350,636,1297,2536,732,87,324,1124,986,1355,160,1647,111,1061,1658,1835,1375,623,1570,116,457,494,205,1744,566,326,1043,307,3,61,126,789,1815,41,576,201,2373,50,423,7,1636,305,829,225,1799,596,521,850,690,296,590,518,413,37,212,288,41,317,520,118,14,298,1185,45,425,924,994,1098,346,162,786,1111,1130,1063,113,410,1284,73,160,99,2316,341,269,620,1364,1954,1212,1275,1050,476,154,1573,701,29,158,228,892,999,100,2080,21,1470,94,350,996,1549,3,968,2681,1522,1411,659,123,676,1425,991,28,1861,2457,711,1810,1185,881,591,1760,486,781,493,262,550,1524,488,1384,600,499,263,709,470,983,709,615,1240,727,277,1853,301,560,828,833,43,50,619,571,166,1028,997,1667,790,222,457,86,273,2289,633,1700,768,693,42,374,72,2387,1356,393,963,6,374,188,1604,526,2176,285,326,605,141,234,1016,298,1112,81,417,204,71,1102,1966,517,168,2865,1144,904,5,759,14,261,497,169,1306,686,468,907,665,1128,774,180,558,1104,1159,293,1608,90,234,390,568,1888,433,400,71,903,771,210,799,1573,516,2217,623,143,909,1704,480,401,50,1648,260,1912,688,52,247,307,833,281,539,224,187,103,534,800,2130,2544,1231,1313,966,2582,119,708,719,142,452,531,869,5,465,188,1131],"i":799,"VA":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"VB":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"sol":447431},{"N":1000,"A":[4752,5392,1453,2040,8133,1448,2230,3934,293,4636,8474,2386,8322,5247,5890,3281,8544,6208,582,7224,4716,8630,9870,5734,9592,9382,4340,1914,2283,8786,2941,4897,9387,6008,1615,8099,8527,494,9656,7630,4261,9216,2662,1999,9522,2620,3985,3711,9848,2529,2906,1731,1565,7665,4227,680,2317,961,5454,6682,364,3963,1461,2360,8568,7422,176,6895,8508,5438,8738,3284,1556,4419,4290,1388,2375,431,7329,4676,6945,9322,3190,124,1753,6307,4213,7943,7715,8445,2175,4394,255,5553,1791,512,5082,3155,6723,2090,4096,7740,2847,5801,7150,5975,1730,9137,2147,255,8600,7865,6444,1584,939,4856,4938,8632,9141,3,25,5560,7412,3251,6136,9364,4285,7369,244,78,5401,5120,1885,4936,1678,4730,4028,1823,2696,2713,7623,2750,9355,9187,268,1646,1358,6250,4203,3761,9742,9171,3057,138,9871,4642,8407,7749,7661,4150,4470,3056,7574,381,7771,4692,345,7525,8480,3240,9858,9040,540,6783,7224,196,9292,1117,2155,8504,4571,1290,374,7819,5616,3239,4836,7355,8419,1052,1411,6209,6759,3805,7942,9074,7126,4728,2524,7071,9605,7696,6057,6861,9598,5680,6955,7224,1079,5430,6173,5552,3000,1133,2903,525,2933,8523,7070,4743,7216,8706,2612,2587,1913,4634,4945,530,5437,1112,4813,7452,5069,3373,1115,663,1499,116,5060,20,707,9732,7697,1332,2282,9187,1666,1071,3306,7983,1316,7760,7303,2754,1670,6104,6917,2130,8300,9062,1545,6196,8662,9203,6429,3968,1500,9912,5970,5782,6122,131,2345,3433,2243,1898,8021,7929,2062,4273,669,5756,3279,1558,8110,4118,3106,1897,3981,6544,1690,6355,5848,5440,6457,6900,4427,4292,4386,5488,6825,4370,2937,6051,1859,8150,9289,6685,699,86,9942,5397,6628,9553,3243,8899,7437,8958,9719,5680,1918,274,5959,7863,3737,6309,9829,3084,8100,6428,2521,6247,3518,1035,9315,4929,1618,4101,6520,8547,5250,6953,7604,4110,4211,4668,9961,382,8418,3326,4461,594,6792,1404,417,8075,6391,5730,7730,7290,7781,3032,410,5829,5045,1093,1596,9935,2109,5172,2532,4135,5590,3672,736,8368,6453,9752,5026,8257,2383,5570,726,8023,1278,8578,2283,9227,9227,1327,5845,7667,6073,5405,1650,1804,5052,5985,117,7784,6629,3506,6845,7968,8075,6174,7033,3370,6949,3147,1175,7619,5946,7371,4032,7556,5569,8147,1588,9606,5211,1434,5180,4462,1911,6207,5370,5461,3101,4955,2782,2606,3945,8580,1733,6208,1463,7600,2308,946,1853,1962,6621,1539,1341,9513,3554,4951,2820,7416,4372,2861,6614,2904,1404,8522,7469,1488,8460,4953,922,5721,8184,3788,2059,7115,5911,1984,2196,3881,8966,8136,5628,7884,8263,4850,2953,3207,8986,5109,2851,796,8687,9200,6157,5202,5536,5421,2373,427,7895,2291,1378,307,1793,5262,3176,1028,3765,2906,6273,8687,6861,6425,650,3654,121,7307,177,2515,1039,5185,4831,5608,6773,5402,8461,7270,8753,6576,5495,4593,3508,7651,4896,7022,2127,7821,2799,3162,4435,8295,9622,7946,7886,4066,3010,892,627,1548,2251,9224,5884,1637,6172,2059,9396,3329,3667,9785,7275,4702,2300,1566,3089,2135,4354,5320,7301,5506,1640,1481,189,3091,7131,5422,9654,5378,7893,8081,4015,968,5433,1472,4524,102,2617,9140,7442,1108,4453,4641,6627,7466,1824,4925,4880,8016,7286,9979,2544,437,2923,2567,6901,8388,8753,6884,5564,9202,9681,1351,3970,3314,3138,6164,4331,9666,7257,629,7304,3651,7763,8549,5521,9220,4811,2901,3272,5776,2529,4189,6648,1273,6396,1284,9330,8777,3538,7418,9958,2778,9923,9967,7175,4263,8793,8088,276,9736,2808,3265,4767,9305,2464,8936,5479,5076,3706,4978,9404,5801,5386,5669,4922,2443,629,9781,139,3825,7056,7619,70,9387,8814,225,717,2087,6286,2872,8979,489,670,6642,2805,431,5224,6881,3294,5838,4032,529,8069,782,5543,3016,3231,585,1953,5301,4994,2958,6801,906,1811,9321,2660,3637,6344,9177,5942,8599,3537,6547,3675,1282,1820,2707,462,1865,8656,8954,4202,6004,729,3542,7287,4425,983,4083,4363,5526,1721,4393,6081,953,1766,4665,5580,3952,3265,6201,8765,2768,6401,8743,8760,1795,3294,4926,1714,6918,9058,2941,1998,4829,7964,4825,8831,1273,3158,6988,5370,2302,5755,2125,7552,7900,9990,7932,4644,6729,1087,9724,1117,6454,4783,6969,9560,8867,9274,6624,6757,6026,4021,1776,8771,4849,7953,4034,2443,5598,357,2455,8412,9936,1675,9207,7824,8086,5492,1485,678,6619,8393,3601,5576,1088,2086,1587,4605,4166,294,5265,3974,5782,5873,3299,6453,9520,5050,9878,8931,5149,7112,1520,832,9115,3228,5923,9261,3654,7094,4697,1065,4507,3504,7421,2587,2732,814,6059,3678,3706,4184,9271,8789,8146,8288,3995,3489,1610,1730,9839,1500,7106,7372,231,8587,8555,2077,9076,6585,8548,7505,9288,6434,9121,1983,5145,4190,7410,1692,5097,1250,5586,1777,5392,1728,3218,83,297,7580,8468,8187,3876,8433,4328,6577,7322,5027,245,9441,1749,1494,6308,4297,4561,3000,7444,4245,1540,2826,856,4113,5447,935,5591,4666,727,8263,5231,5241,5719,7354,2848,4827,8047,7300,3998,3823,781,7294,6208,9809,5316,208,4097,2885,1683,6558,914,1716,957,4221,8595,1118,7891,5546,5479,775,8519,7246,293,5222,8591,1871,3996,8829,2453,9373,8859,7103,7319,2818,5910,4842,4492,6408,972,1643,9808,9238,318,8746,9493,1287,2476,3059,6373,6050,5641,262,9637,6023,5610,9416,5985,6709,5913,4134,3487,8592,9836,8284,5222,9548,1574,2712,4185,4298,3030,6859,1596,2453,2939,7334,1326,6125,5765,6784,3273,9539,9742,9612,26,2237,7227,9300,856],"B":[3213,2437,1259,1693,3036,472,1677,3510,249,1180,6065,475,5267,620,1570,1210,6945,3234,147,632,1271,3081,8017,1273,2435,7036,1734,324,1809,6944,157,3852,1398,5304,207,2013,701,441,1414,6730,2105,6167,974,1391,8484,2035,54,588,2364,2425,279,573,553,4729,3440,77,1850,356,2081,3199,152,870,1214,1016,3490,2619,65,4737,2117,4666,6361,1222,912,1941,2510,754,1843,198,426,4182,3836,8480,657,35,1720,5800,1621,7211,2169,6622,2038,1409,54,2144,1347,447,2643,1354,6385,508,2929,3617,2815,3504,3360,4785,180,7420,394,244,6329,1946,5219,864,692,1397,2282,2039,5528,1,3,2767,6938,995,5485,7557,1403,3280,27,14,1702,4463,1027,758,1116,500,3773,1401,1821,679,2113,1802,447,6202,63,635,1291,1710,3145,1897,8269,6030,1743,108,3830,2842,5142,5152,7214,2823,1342,911,2651,191,5095,2026,53,5974,2986,1593,5436,2178,504,3826,3013,51,3343,1005,360,6635,1703,877,279,5878,24,2526,3432,5767,4646,80,709,5271,3121,1160,3282,11,5204,3975,1635,3235,4948,4487,2491,6701,2785,306,3598,2543,465,1893,197,1278,2037,204,2474,235,41,7165,1471,3252,2552,621,1962,437,970,2501,3205,274,3780,123,1801,5191,4491,1547,869,44,756,38,476,2,160,2773,5320,1200,83,2212,158,238,411,3546,236,5879,4108,2212,284,5980,4190,331,575,4066,1494,3046,5311,8956,2513,2319,313,6638,2324,4141,172,1,1056,2673,763,1697,6019,5462,1129,1138,177,2651,2592,1028,1185,2629,2601,1265,1445,6304,563,4566,263,1898,277,4400,1305,383,652,5313,64,1858,1038,4291,351,1633,1212,2337,265,4,2600,1409,1919,8989,130,3105,7175,7367,5485,2992,1580,215,1525,7123,2959,6261,243,2518,3387,1326,1757,3644,1036,325,37,1513,316,1445,2103,6901,4412,4019,983,2582,2069,3076,8419,256,8227,1729,3332,23,4552,570,16,5561,4371,4500,4292,4554,4737,2405,311,1723,3527,449,339,7425,2037,3607,2002,4025,4301,3176,370,4323,4384,1577,1063,2289,262,1594,28,3858,1175,829,1911,2219,4232,620,1070,7478,351,846,1279,628,4753,1479,85,3318,5185,375,2186,3539,7266,1192,6634,3121,5146,1097,281,2637,2387,2815,665,1045,1795,1265,1100,7287,1427,1354,1337,2919,231,2639,2537,13,2697,1529,2285,1947,326,4254,105,6097,801,3971,577,944,310,1710,4977,577,1182,1633,3496,3302,2176,5757,2767,2650,2138,663,433,5859,7120,680,6953,3758,144,1437,1853,267,1803,816,1841,661,817,2527,5153,7049,4832,7385,4423,150,1113,2050,1805,3603,450,467,8659,8955,3440,4983,1858,4050,2129,379,6604,6,1151,71,113,2555,3138,99,2999,1474,5321,6032,1719,5896,611,2331,114,6045,107,824,265,2299,3707,4290,4024,2181,4987,6483,5441,5494,3307,117,3444,6167,3303,6057,733,1560,2559,320,4118,2684,3031,995,7675,1778,477,529,93,1211,603,3439,3000,197,4001,1375,8557,2488,3128,9341,4941,782,1714,1535,2938,729,2258,1386,5821,4475,1546,812,16,1407,2034,3502,2031,537,4981,2433,1572,354,1385,1148,3754,102,579,5534,6920,798,3836,239,195,6645,270,2700,1275,6558,57,5319,1697,153,2366,321,6201,7420,2272,6729,1084,5892,2762,191,461,1960,114,2702,2909,4140,4254,320,3552,3589,122,6481,1757,5717,1334,1152,487,3097,1237,1374,227,381,3373,158,4096,1105,1328,4571,1608,654,9640,793,6359,1752,998,601,25,3082,2018,2134,4710,1436,1527,14,5371,4478,2379,100,6761,581,2294,823,4621,1443,15,6562,111,3363,4672,2408,23,7444,1107,172,94,1612,4897,901,1762,444,404,2319,1558,344,5162,4250,2105,4882,2776,426,4202,205,3750,2327,870,205,602,2703,1179,2361,2259,392,1550,8155,1557,1680,1055,7251,377,3731,2102,3984,2342,1107,314,1243,164,269,2945,6818,109,1129,528,2930,5465,3415,770,2414,1583,5458,1423,4032,2408,272,736,1596,1906,3403,771,997,4120,1419,221,717,7107,521,2094,704,1025,5523,5783,604,589,1426,7369,2025,3942,979,1468,2201,847,1899,4151,257,3286,2613,5105,1155,374,5653,950,2909,232,1895,879,5136,4839,511,804,6078,4291,1863,668,239,2383,2936,4185,1770,766,1486,172,422,5153,4062,1505,1703,4285,2347,5049,428,650,2122,5572,2410,2133,922,157,900,2743,3635,176,5228,3341,2966,3074,72,5149,8822,3281,361,1947,199,1175,257,673,4782,3088,1986,1358,2735,2601,170,944,3126,658,90,11,2343,95,445,3542,2034,2557,6137,5137,8089,819,533,951,288,86,9169,1209,3713,3240,189,5223,3453,1227,4816,4873,824,4675,4054,2162,5039,1682,4697,2189,3660,1203,2644,893,56,1723,4824,1142,2339,3,159,903,328,6069,1124,4938,1645,4944,3906,2712,195,4824,700,315,3739,2857,1815,2258,3822,3898,171,2265,795,2951,2949,394,1426,3901,554,4962,2213,616,163,6809,1471,2167,15,1293,1424,465,390,6489,5297,602,209,118,1739,1906,1425,4604,271,281,11,3467,4668,684,4788,2175,1896,758,3901,4288,196,350,3326,1150,124,5128,988,8069,8092,1473,2151,158,5534,2799,1877,45,879,279,5409,2704,22,2665,2539,286,2244,1669,154,2362,4617,122,164,3010,707,6078,531,1538,4712,1232,3425,3040,2211,1828,4767,9169,1263,1466,3834,3659,1618,2953,650,1063,1377,6314,767,2197,1217,1696,646,7533,6995,4002,12,127,3352,1552,398],"i":999,"VA":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"VB":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"sol":1842872}]'),F0={src:new URL("../2/27400aa0-bunny.svg",import.meta.url).href,width:50,height:88.20224719101124},J={src:new URL("../8/8d833b2a-platform.svg",import.meta.url).href,width:90,height:12.65625};function Q0({variables:a,state:i}){const{N:s,A:t,VA:n,B:r,VB:c}=i;if(s>50)return e.jsx("div",{className:"text-slate-800 p-4",children:"La visualizzazione è disponibile solo per i primi 5 livelli."});const l=Math.max(...t),p=u=>3*u/l;return e.jsxs(e.Fragment,{children:[e.jsxs(M,{scale:100,children:[t.map((u,o)=>e.jsx(v,{color:"#d1d5db",borderColor:"#6b7280",x:o+1.48,y:-p(u)-.1,height:p(u)+.3,width:.15,className:"rounded-md"},o)),t.map((u,o)=>e.jsx(j,{src:J,alt:"Pedana",x:o+1.1,y:-p(u)},o)),r.map((u,o)=>e.jsx(j,{src:J,alt:"Pedana",x:o+1.1,y:-p(u)},o)),n.map((u,o)=>e.jsx(v,{color:"transparent",borderColor:"transparent",height:1,width:2.2,x:o+1.1,y:-p(t[o])-.35,className:"text-3xl text-gray-400 [text-shadow:0_0_2px_#fff]",children:u},o)),c.map((u,o)=>e.jsx(v,{color:"transparent",borderColor:"transparent",height:1,width:2.2,x:o+1.1,y:-p(r[o])-.35,className:"text-3xl text-gray-400 [text-shadow:0_0_2px_#fff]",children:u},o)),e.jsx(v,{color:"brown",borderColor:"#D35A1E",height:.3,width:Math.min(s,50)+2}),e.jsx(j,{src:F0,alt:"Bunny",x:.2,y:-.8})]}),e.jsx(q,{variables:{...a}})]})}function F(a){const i={em:"em",li:"li",p:"p",span:"span",strong:"strong",ul:"ul",...a0(),...a.components},{Blockly:s,Code:t,Equation:n,Explanation:r,Image:c,SubProblem:l}=i;return s||$("Blockly"),t||$("Code"),n||$("Equation"),r||$("Explanation"),c||$("Image"),l||$("SubProblem"),e.jsxs(l,{children:[e.jsxs(i.p,{children:["Il nuovissimo videogioco ",e.jsx(i.em,{children:"SuperBunny"})," è finalmente in commercio! Bunny, il protagonista del videogioco, in ogni livello deve superare ",e.jsx(n,{children:String.raw`N`})," ostacoli numerati da ",e.jsx(n,{children:String.raw`1`})," ad ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`N`}),"."]}),`
Su ogni ostacolo ci sono `,e.jsx(n,{children:String.raw`2`})," pedane (ad altezze diverse) su cui Bunny può saltare: l’ostacolo numero ",e.jsx(n,{children:String.raw`i`})," è fatto da una pedana più in alto che si trova ad una altezza di ",e.jsx(n,{children:String.raw`A_i`})," metri, e da una pedana più in basso ad un’altezza di ",e.jsx(n,{children:String.raw`B_i`})," metri."]}),e.jsxs(i.p,{children:["Bunny parte da terra ad altezza ",e.jsx(n,{children:String.raw`0`})," e deve per prima cosa saltare sull’ostacolo numero ",e.jsx(n,{children:String.raw`1`})," scegliendo una delle due pedane. Una volta raggiunto l’ostacolo ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`1`}),","]})," sceglierà una delle due pedane dell’ostacolo successivo, il ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`2`}),","]}),` e ci salterà sopra.
L’obiettivo del gioco è superare in ordine tutti gli ostacoli fino all’ostacolo numero `,e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`N`}),"."]}),` Anche se Bunny può scegliere ogni volta su quale pedana di un ostacolo saltare, non tutti i salti sono uguali!
Infatti, più il salto è grande e più tempo ci vuole per farlo. Per saltare da pedana ad altezza `,e.jsx(n,{children:String.raw`h`})," fino ad una pedana sull’ostacolo successivo ad altezza ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`k`}),","]})," Bunny ci metterà una quantità di secondi pari alla ",e.jsx(i.em,{children:"differenza assoluta"})," tra ",e.jsx(n,{children:String.raw`h`})," e ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`k`}),"."]})]}),e.jsx(i.p,{children:e.jsxs(i.em,{children:[e.jsx(i.strong,{children:"Nota:"})," la differenza assoluta tra ",e.jsx(n,{children:String.raw`h`})," e ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`k`}),","]})," in formule ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`|h - k|`}),","]})," indica il valore della differenza tra ",e.jsx(n,{children:String.raw`h`})," e ",e.jsx(n,{children:String.raw`k`})," ignorando il segno: quindi ",e.jsx(n,{children:String.raw`h - k`})," se ",e.jsx(n,{children:String.raw`h > k`})," o ",e.jsx(n,{children:String.raw`k - h`})," se ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`k > h`}),"."]})]})}),e.jsx(i.p,{children:`Il tempo totale impiegato per completare un livello è la somma dei tempi impiegati in ogni salto. Quanti secondi servono a Bunny per completare il livello?
Puoi usare questi blocchi:`}),e.jsxs(i.ul,{children:[`
`,e.jsxs(i.li,{children:[e.jsx(t,{code:String.raw`N`,inline:!0,lang:"text",className:"p-0 text-base"}),": il numero ",e.jsx(n,{children:String.raw`N`})," di ostacoli."]}),`
`,e.jsxs(i.li,{children:[e.jsx(t,{code:String.raw`pedana alta i`,inline:!0,lang:"text",className:"p-0 text-base"}),": l’altezza ",e.jsx(n,{children:String.raw`A_i`})," della ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`i`}),"-esima"]})," pedana più in alto."]}),`
`,e.jsxs(i.li,{children:[e.jsx(t,{code:String.raw`pedana bassa i`,inline:!0,lang:"text",className:"p-0 text-base"}),": l’altezza ",e.jsx(n,{children:String.raw`B_i`})," della ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`i`}),"-esima"]})," pedana più in basso."]}),`
`,e.jsxs(i.li,{children:[e.jsx(t,{code:String.raw`differenza assoluta tra x e y`,inline:!0,lang:"text",className:"p-0 text-base"}),": la differenza assoluta ",e.jsx(n,{children:String.raw`|x - y|`})," tra ",e.jsx(n,{children:String.raw`x`})," e ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`y`}),"."]})]}),`
`,e.jsxs(i.li,{children:[e.jsx(t,{code:String.raw`minimo tra x e y`,inline:!0,lang:"text",className:"p-0 text-base"}),": il valore minimo tra due numeri ",e.jsx(n,{children:String.raw`x`})," e ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`y`}),"."]})]}),`
`,e.jsxs(i.li,{children:[e.jsx(t,{code:String.raw`termina in x tempo`,inline:!0,lang:"text",className:"p-0 text-base"}),": riporta che è possibile raggiungere l’",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`N`}),"-esimo"]})," ostacolo in ",e.jsx(n,{children:String.raw`x`})," tempo."]}),`
`]}),e.jsx(i.p,{children:"Inoltre, se ti serve, avrai la possibilità di annotarti un valore a tua scelta su ogni piattaforma, che verrà anche mostrato nella figura, con questi blocchi:"}),e.jsxs(i.ul,{children:[`
`,e.jsxs(i.li,{children:[e.jsx(t,{code:String.raw`valore pedana alta i`,inline:!0,lang:"text",className:"p-0 text-base"}),": il valore scritto sulla pedana alta ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`i`}),"-esima."]})]}),`
`,e.jsxs(i.li,{children:[e.jsx(t,{code:String.raw`valore pedana bassa i`,inline:!0,lang:"text",className:"p-0 text-base"}),": il valore scritto sulla pedana bassa ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`i`}),"-esima."]})]}),`
`,e.jsxs(i.li,{children:[e.jsx(t,{code:String.raw`imposta valore pedana alta i a x`,inline:!0,lang:"text",className:"p-0 text-base"}),": scrivi sulla pedana alta ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`i`}),"-esima"]})," il valore ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`x`}),"."]})]}),`
`,e.jsxs(i.li,{children:[e.jsx(t,{code:String.raw`imposta valore pedana bassa i a x`,inline:!0,lang:"text",className:"p-0 text-base"}),": scrivi sulla pedana bassa ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`i`}),"-esima"]})," il valore ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`x`}),"."]})]}),`
`]}),e.jsx(i.p,{children:e.jsxs(i.em,{children:[e.jsx(i.strong,{children:"Attenzione:"})," non ti viene richiesto di ricostruire i salti da fare, basta che calcoli il tempo necessario!"]})}),e.jsx(i.p,{children:e.jsxs(i.em,{children:[e.jsx(i.strong,{children:"Avvertimento:"})," incastrare un blocco grosso in un altro blocco può non essere semplice. Cerca di mettere la ",e.jsx(i.strong,{children:"punta sinistra"})," del blocco grosso nello spazio in cui vuoi inserirlo, per non avere difficoltà!"]})}),e.jsx(s,{customBlocks:X0,initialBlocks:D0,testcases:J0,debug:{logBlocks:!1,logJs:!1,logVariables:!1},visualizer:Q0}),e.jsxs(r,{children:[e.jsx(i.p,{children:"Un possibile programma corretto è il seguente:"}),e.jsx(i.p,{children:e.jsx(c,{alt:"soluzione",src:typeof E=="function"?E(_variant):E})}),e.jsxs(i.p,{children:["In questo programma, segnamo come valore su ciascuna pedana il ",e.jsx(i.strong,{children:"tempo minimo per raggiungerla"}),`.
Per le pedane sul primo ostacolo, il tempo per raggiungerle è pari alla loro altezza.
Per ogni pedana successiva (alta o bassa), il tempo minimo per raggiungerla è pari al minimo tra due cose:`]}),e.jsxs(i.ul,{children:[`
`,e.jsx(i.li,{children:"se decidiamo di arrivarci dalla pedana alta precedente, allora è pari al tempo minimo (valore) della pedana alta precedente, più la differenza assoluta tra la pedana che stiamo considerando e la pedana alta precedente;"}),`
`,e.jsx(i.li,{children:"se decidiamo di arrivarci dalla pedana bassa precedente, allora si può calcolare analogamente ma considerando il valore e la differenza assoluta con la pedana bassa precedente."}),`
`]}),e.jsx(i.p,{children:`Una volta scritti tutti questi valori, il migliore tempo per chiudere il livello sarà il minore
tra il tempo minimo (valore) per raggiungere l’ultima pedana alta, e il tempo minimo (valore)
per raggiungere l’ultima pedana bassa.`})]})]})}function Z0(a={}){const{wrapper:i}={...a0(),...a.components};return i?e.jsx(i,{...a,children:e.jsx(F,{...a})}):F(a)}function $(a,i){throw new Error("Expected component `"+a+"` to be defined: you likely forgot to import, pass, or provide it.")}function t0(){return{...A(),S1Cioccolato:b0,S2Montagna:V0,S3Calcolatrice:H0,S4Superbunny:Z0}}function Q(a){const{Contest:i,Problem:s,S1Cioccolato:t,S2Montagna:n,S3Calcolatrice:r,S4Superbunny:c,Section:l}={...t0(),...a.components};return i||b("Contest"),s||b("Problem"),t||b("S1Cioccolato"),n||b("S2Montagna"),r||b("S3Calcolatrice"),c||b("S4Superbunny"),l||b("Section"),e.jsx(i,{children:e.jsxs(l,{children:[e.jsx(s,{points:[5,0,0],id:1,children:e.jsx(t,{})}),e.jsx(s,{points:[5,0,0],id:2,children:e.jsx(n,{})}),e.jsx(s,{points:[5,0,0],id:3,children:e.jsx(r,{})}),e.jsx(s,{points:[5,0,0],id:4,children:e.jsx(c,{})})]})})}function W0(a={}){const{wrapper:i}={...t0(),...a.components};return i?e.jsx(i,{...a,children:e.jsx(Q,{...a})}):Q(a)}function b(a,i){throw new Error("Expected component `"+a+"` to be defined: you likely forgot to import, pass, or provide it.")}function s0(){return{...A()}}function Z(a){const i={em:"em",h1:"h1",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...s0(),...a.components};return e.jsxs(e.Fragment,{children:[e.jsx(i.h1,{children:"Giochi di Fibonacci 2023/2024"}),`
`,e.jsx(i.h2,{children:"Fase finale - Scuole secondarie"}),`
`,e.jsxs(i.p,{children:["Questa prova contiene ",e.jsx(i.em,{children:"4 domande"})," da risolvere in ",e.jsx(i.em,{children:"3 ore"}),`.
Tutte le domande sono di `,e.jsx(i.strong,{children:"programmazione"}),` tramite blocchi, e sono ordinate per difficoltà crescente.
`,e.jsx(i.strong,{children:"Attento che la difficoltà è soggettiva!"})," Se stai passando tanto tempo cercando di risolvere una domanda, prova a passare ad altre domande e altre categorie!"]}),`
`,e.jsx(i.h2,{children:"Punteggio"}),`
`,e.jsxs(i.p,{children:["Tutte le domande sono a ",e.jsx(i.em,{children:"blocchi"}),` e richiedono di scrivere un singolo programma a blocchi, che viene valutato su 10 diversi livelli.
Per ciascuna domanda e per ciascun livello, Il punteggio che puoi ottenere è:`]}),`
`,e.jsxs(i.ul,{children:[`
`,e.jsxs(i.li,{children:["5 punti se il programma produce la risposta ",e.jsx(i.em,{children:"corretta"}),";"]}),`
`,e.jsxs(i.li,{children:["0 punti se il programma produce una risposta ",e.jsx(i.em,{children:"sbagliata"}),"."]}),`
`]}),`
`,e.jsx(i.p,{children:"Quindi ogni domanda a blocchi può valere fino a 50 punti in totale."}),`
`,e.jsx(i.p,{children:"In ogni domanda a blocchi, i primi 5 livelli vengono anche visualizzati graficamente, mentre gli ultimi 5 livelli non vengono visualizzati."})]})}function Y0(a={}){const{wrapper:i}={...s0(),...a.components};return i?e.jsx(i,{...a,children:e.jsx(Z,{...a})}):Z(a)}const a1={title:"Giochi di Fibonacci",description:"Fase Finale dei Giochi di Fibonacci 2023/2024"};function t1(){return e.jsxs(o0,{contestLongName:"",contestName:"Giochi di Fibonacci",duration:180,children:[e.jsx(Y0,{}),e.jsx(W0,{})]})}export{t1 as default,a1 as metadata};
//# sourceMappingURL=1b1b3039-page.js.map
