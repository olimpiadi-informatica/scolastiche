{"version":3,"file":"d6478779-page.js","sources":["../../../../src/fibonacci-corso/3-composizione-di-cicli-e-condizioni/contest/s-1-corridoio-semplice/toolbox.ts","../../../../src/fibonacci-corso/3-composizione-di-cicli-e-condizioni/contest/s-1-corridoio-semplice/visualizer.jsx","../../../../src/fibonacci-corso/3-composizione-di-cicli-e-condizioni/contest/s-1-corridoio-semplice/question.mdx","../../../../src/fibonacci-corso/3-composizione-di-cicli-e-condizioni/contest/s-2-corridoio-difficile/toolbox.ts","../../../../src/fibonacci-corso/3-composizione-di-cicli-e-condizioni/contest/s-2-corridoio-difficile/visualizer.jsx","../../../../src/fibonacci-corso/3-composizione-di-cicli-e-condizioni/contest/s-2-corridoio-difficile/question.mdx","../../../../src/fibonacci-corso/3-composizione-di-cicli-e-condizioni/contest/contest.mdx","../../../../src/fibonacci-corso/3-composizione-di-cicli-e-condizioni/header.md","../../../../src/fibonacci-corso/3-composizione-di-cicli-e-condizioni/page.tsx"],"sourcesContent":["import type { ToolboxInfo } from \"blockly/core/utils/toolbox\";\n\nexport const toolbox: ToolboxInfo = {\n  kind: \"categoryToolbox\",\n  contents: [\n    {\n      kind: \"category\",\n      name: \"Logica\",\n      categorystyle: \"logic_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"logic_operation\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_negate\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n          extraState: {\n            hasElse: \"true\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Cicli\",\n      categorystyle: \"loop_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_repeat_ext\",\n          inputs: {\n            TIMES: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n          },\n        },\n        {\n          kind: \"block\",\n          type: \"controls_whileUntil\",\n        },\n      ],\n    },\n  ],\n};\n","\"use client\";\n\nimport { Fragment } from \"react\";\n\nimport clsx from \"clsx\";\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bulbOff from \"./asy/bulb-off.asy?w=30\";\nimport bulbOn from \"./asy/bulb-on.asy?w=30\";\nimport bunnyLittle from \"./asy/bunny-little.asy?w=50\";\nimport bunnyLeft from \"./asy/bunny-left.asy?w=66\";\nimport bunnyRight from \"./asy/bunny-right.asy?w=66\";\nimport closedDoor from \"./asy/closed-door.asy?w=55\";\nimport openedDoor from \"./asy/opened-door.asy?w=100\";\nimport switchOffOff from \"./asy/switch-off-off.asy?w=30\";\nimport switchOffOn from \"./asy/switch-off-on.asy?w=30\";\nimport switchOnOff from \"./asy/switch-on-off.asy?w=30\";\nimport switchOnOn from \"./asy/switch-on-on.asy?w=30\";\n\nexport default function Visualizer({ variables, state }) {\n\n  const height = 24;\n  const width = 18;\n\n  return (\n    <>\n      <Canvas gravity=\"bottom\" scale={10}>\n        {range(state.N).map((i) => (\n          <Rectangle\n            key={`rect${i}`}\n            color={state.light[i] ? \"#eee\" : \"#333\"}\n            height={height}\n            width={width}\n            x={width * (i + 1)}\n            y={6}>\n            {/* <div\n              className={clsx(\n                \"absolute mt-1 size-full origin-bottom text-center text-2xl underline\",\n                state.light[i] ? \"text-black\" : \"text-white\",\n              )}>\n              {i + 1}\n            </div> */}\n          </Rectangle>\n        ))}\n        {range(state.N).map((i) => (\n          <Sprite\n            key={`bulb${i}`}\n            src={state.light[i] ? bulbOn : bulbOff}\n            alt=\"\"\n            x={width * (i + 1.5) - 1.5}\n            y={20}\n          />\n        ))}\n        {range(state.N * 2).map((i) => (\n          <Sprite\n            key={`switch${i}`}\n            src={\n              i > 0 && state.light[Math.floor((i - 1) / 2)]\n                ? state.switch[i]\n                  ? switchOnOn\n                  : switchOnOff\n                : state.switch[i]\n                  ? switchOffOn\n                  : switchOffOff\n            }\n            alt=\"\"\n            x={width * (0.5 * i + 0.75) - 1.5}\n            y={10}\n          />\n        ))}\n        {range(state.N).map((i) => (\n          <Fragment key={`door${i}`}>\n            {state.door[i] ? (\n              <Sprite src={openedDoor} alt=\"Porta aperta\" x={width * (i + 1) - 1.5} y={3} />\n            ) : (\n              <Sprite src={closedDoor} alt=\"Porta chiusa\" x={width * (i + 1) - 4} y={0} />\n            )}\n          </Fragment>\n        ))}\n        {range(state.M).map((i) => (\n          <Sprite\n            key={`bunny-${i}`}\n            src={bunnyLittle}\n            alt=\"Little Bunny\"\n            x={width * ((state.hand == i ? (state.pos + state.dir*0.2 + 0.05) : state.rescue[i] - 0.1) + 0.5) - 3.5}\n            y={4}\n          />\n        ))}\n        <Sprite\n          key=\"bunny\"\n          src={state.dir === 1 ? bunnyRight : bunnyLeft}\n          alt=\"Bunny\"\n          x={width * (state.pos + 0.5) - 3.5}\n          y={4}\n          follow\n        />\n      </Canvas>\n      <Variables\n        variables={{\n          ...variables,\n          \"N (num. stanze)\": state.N,\n        }}\n      />\n    </>\n  );\n}\n","import { toolbox } from \"./toolbox.ts\";\nimport initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s1.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\nimport { Hint } from \"~/utils/hint\";\n\nAlla Fattoria Fibonacci è l'ora della ricreazione per i coniglietti più piccoli, in cui si gioca tutti insieme nel prato!\nTuttavia, uno di loro è rimasto nella fattoria, e Bunny è stato incaricato di andarlo a prendere.\nLa Fattoria Fibonacci è fatta da alcune stanze disposte in fila e separate da porte, come un lungo corridoio.\nAll'inizio Bunny è nel prato, che sta a sinistra delle stanze.\nHai a disposizione questi blocchi:\n\n- `N`: il numero di stanze nella fattoria.\n- `sono nel prato`: vero se è Bunny è nel prato.\n- `muovi a destra/sinistra`: spostati nella stanza (o prato) a destra/sinistra della stanza (o prato) corrente.\n- `coniglietto presente`: vero se è presente un coniglietto nella stanza corrente.\n- `prendi/lascia la mano`: prendi/lascia la mano del coniglietto nella stanza corrente.\n- `termina`: comincia la ricreazione.\n\nMentre che Bunny tiene il coniglietto per mano, il coniglietto seguirà tutti gli spostamenti di Bunny.\nAiuta Bunny a raccogliere il coniglietto mancante e portarlo nel prato prima di cominciare la ricreazione!\n\nTi basterà usare gli stessi tipi di blocchi visti nella lezione precedente:\n\n- **blocchi istruzione (rettangolari)**, usati per fare una qualche azione (inclusi cicli e condizionali);\n- **blocchi valore (stondati)**, usati per produrre un valore (numerico o di altro tipo);\n- **blocchi verità (esagonali)**, usati per produrre un valore di verità (vero o falso).\n\nAttenzione che alcuni blocchi _\"Esecuzione\"_ questa volta possono essere modificati come si fa con i blocchi \"e/o\" e \"ripeti mentre/fino a che\":\nhanno quindi delle parti (destra/sinistra, prendi/lascia) che possono essere modificate cliccando sul triangolino a lato della scritta.\n\n<Hint>\n  Come fare un primo ciclo per raggiungere il coniglietto? Come fare un secondo ciclo per uscire nel prato?\n</Hint>\n\n<Blockly\n  toolbox={toolbox}\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Come prima cosa, Bunny deve raggiungere il coniglietto nella fattoria.\n> Quindi continua ad andare verso destra, ripetendo fino a che il coniglietto non è presente nella stanza in cui si trova, per poi prendergli la mano.\n>\n> A questo punto, Bunny deve uscire dalla fattoria.\n> Continua quindi ad andare verso sinistra (portandosi dietro il coniglietto), ripetendo fino a che non arriva nel prato.\n> A questo punto può lasciare la mano del coniglietto e dare il via alla ricreazione!\n\nPrima di passare alla prossima domanda, assicurati di aver risolto **tutti i livelli** di questa!","import type { ToolboxInfo } from \"blockly/core/utils/toolbox\";\n\nexport const toolbox: ToolboxInfo = {\n  kind: \"categoryToolbox\",\n  contents: [\n    {\n      kind: \"category\",\n      name: \"Logica\",\n      categorystyle: \"logic_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"logic_operation\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_negate\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n          extraState: {\n            hasElse: \"true\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Cicli\",\n      categorystyle: \"loop_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_repeat_ext\",\n          inputs: {\n            TIMES: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n          },\n        },\n        {\n          kind: \"block\",\n          type: \"controls_whileUntil\",\n        },\n      ],\n    },\n  ],\n};\n","\"use client\";\n\nimport { Fragment } from \"react\";\n\nimport clsx from \"clsx\";\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bulbOff from \"./asy/bulb-off.asy?w=30\";\nimport bulbOn from \"./asy/bulb-on.asy?w=30\";\nimport bunnyLittle from \"./asy/bunny-little.asy?w=50\";\nimport bunnyLeft from \"./asy/bunny-left.asy?w=66\";\nimport bunnyRight from \"./asy/bunny-right.asy?w=66\";\nimport closedDoor from \"./asy/closed-door.asy?w=55\";\nimport openedDoor from \"./asy/opened-door.asy?w=100\";\nimport switchOffOff from \"./asy/switch-off-off.asy?w=30\";\nimport switchOffOn from \"./asy/switch-off-on.asy?w=30\";\nimport switchOnOff from \"./asy/switch-on-off.asy?w=30\";\nimport switchOnOn from \"./asy/switch-on-on.asy?w=30\";\n\nexport default function Visualizer({ variables, state }) {\n\n  const height = 24;\n  const width = 18;\n\n  return (\n    <>\n      <Canvas gravity=\"bottom\" scale={10}>\n        {range(state.N).map((i) => (\n          <Rectangle\n            key={`rect${i}`}\n            color={state.light[i] ? \"#eee\" : \"#333\"}\n            height={height}\n            width={width}\n            x={width * (i + 1)}\n            y={6}>\n            {/* <div\n              className={clsx(\n                \"absolute mt-1 size-full origin-bottom text-center text-2xl underline\",\n                state.light[i] ? \"text-black\" : \"text-white\",\n              )}>\n              {i + 1}\n            </div> */}\n          </Rectangle>\n        ))}\n        {range(state.N).map((i) => (\n          <Sprite\n            key={`bulb${i}`}\n            src={state.light[i] ? bulbOn : bulbOff}\n            alt=\"\"\n            x={width * (i + 1.5) - 1.5}\n            y={20}\n          />\n        ))}\n        {range(state.N * 2).map((i) => (\n          <Sprite\n            key={`switch${i}`}\n            src={\n              i > 0 && state.light[Math.floor((i - 1) / 2)]\n                ? state.switch[i]\n                  ? switchOnOn\n                  : switchOnOff\n                : state.switch[i]\n                  ? switchOffOn\n                  : switchOffOff\n            }\n            alt=\"\"\n            x={width * (0.5 * i + 0.75) - 1.5}\n            y={10}\n          />\n        ))}\n        {range(state.N).map((i) => (\n          <Fragment key={`door${i}`}>\n            {state.door[i] ? (\n              <Sprite src={openedDoor} alt=\"Porta aperta\" x={width * (i + 1) - 1.5} y={3} />\n            ) : (\n              <Sprite src={closedDoor} alt=\"Porta chiusa\" x={width * (i + 1) - 4} y={0} />\n            )}\n          </Fragment>\n        ))}\n        {range(state.M).map((i) => (\n          <Sprite\n            key={`bunny-${i}`}\n            src={bunnyLittle}\n            alt=\"Little Bunny\"\n            x={width * ((state.hand == i ? (state.pos + state.dir*0.2 + 0.05) : state.rescue[i] - 0.1) + 0.5) - 3.5}\n            y={4}\n          />\n        ))}\n        <Sprite\n          key=\"bunny\"\n          src={state.dir === 1 ? bunnyRight : bunnyLeft}\n          alt=\"Bunny\"\n          x={width * (state.pos + 0.5) - 3.5}\n          y={4}\n          follow\n        />\n      </Canvas>\n      <Variables\n        variables={{\n          ...variables,\n          \"N (num. stanze)\": state.N,\n        }}\n      />\n    </>\n  );\n}\n","import { toolbox } from \"./toolbox.ts\";\nimport initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s1.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\nimport { Hint } from \"~/utils/hint\";\n\nÈ di nuovo l'ora della ricreazione. Oggi, però, ci sono diversi coniglietti che sono rimasti nella fattoria!\nNon solo: alcune delle luci della fattoria potrebbero essere spente. Questo è un problema perché Bunny ha paura del buio,\nquindi non è disposto ad entrare in una stanza se prima non ne accende la luce. In ogni stanza ci sono due interruttori,\nche servono per accendere le lampadine delle stanze a destra e a sinistra. La luce della prima stanza si può comandare anche dall'esterno.\nQuando un interruttore viene premuto, accende la lampadina se è spenta e la spegne se è accesa.\n\nBunny parte di nuovo dal prato e deve andare a prendere tutti i coniglietti. Hai a disposizione questi blocchi:\n\n- `N`: il numero di stanze nella fattoria.\n- `M`: il numero di coniglietti da recuperare **(nuovo!)**.\n- `sono nel prato`: vero se è Bunny è nel prato.\n- `muovi a destra/sinistra`: spostati nella stanza (o prato) a destra/sinistra della stanza (o prato) corrente.\n- `coniglietto presente`: vero se è presente un coniglietto nella stanza corrente.\n- `prendi/lascia la mano`: prendi/lascia la mano del coniglietto nella stanza corrente.\n- `lampadina a destra/sinistra accesa`: vero se la lampadina nella stanza a destra/sinistra è accesa **(nuovo!)**.\n- `interruttore a destra/sinistra`: premi l'interruttore che comanda la stanza a destra/sinistra **(nuovo!)**.\n- `termina`: comincia la ricreazione.\n\nAiuta Bunny a raccogliere tutti i coniglietti (senza stare al buio) prima di cominciare la ricreazione!\n\n<Hint>\n  Prova a riutilizzare il programma che risolve la scorsa domanda. Come dovrai modificarlo?\n</Hint>\n\n<Blockly\n  toolbox={toolbox}\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Innanzitutto, si può notare che il programma è molto simile alla domanda precedente, con due modifiche:\n> - ci sono `M` coniglietti, e quindi l'intero programma va inserito dentro ad un ciclo \"ripeti M volte\";\n> - ci sono lampadine spente, che vanno accese.\n>\n> Visto che non ci viene chiesto di spegnere le lampadine, possiamo limitarci ad accenderle (dove necessario)\n> prima di andare verso destra. Questo si può fare controllando se la lampadina a destra non è accesa,\n> e in caso premendo l'interruttore corrispondente.\n\n{/* Prima di passare alla prossima domanda, assicurati di aver risolto **tutti i livelli** di questa! */}\n\n**Lezione in costruzione, continua...**","<Contest>\n\n<Section>\n  <Problem points={[5, 0, 0]}><S1CorridoioSemplice /></Problem>\n  <Problem points={[5, 0, 0]}><S2CorridoioDifficile /></Problem>\n</Section>\n\n</Contest>\n","# Corso di Programmazione a Blocchi\n\n## Lezione 3 - Composizione di Cicli e Condizioni\n\nBentornato nel corso di programmazione a blocchi per la preparazione ai Giochi di Fibonacci!\n\nQuesta è la terza lezione, nella quale non introdurremo blocchi nuovi. Invece, vedremo degli esempi di programmi più articolati che si possono fare con i blocchi che hai già imparato!\n\nSe non l'avessi ancora fatto, ti invitiamo a completare le prime due lezioni prima di iniziare questa (anche se pensi di conoscere già quegli argomenti!).\n\n## Punteggio e struttura delle lezioni\n\nLe lezioni di questo corso contengono alcuni problemi di programmazione a blocchi, da risolvere in al massimo _4 giorni_. Appena avrai finito di lavorarci, potrai cliccare su \"Termina\" per vedere subito un riepilogo del punteggio che hai ottenuto, e le soluzioni spiegate di tutti i problemi! Se anche non lo farai, la lezione verrà terminata automaticamente dopo 4 giorni. Potrai comunque ricominciare la lezione quante volte vuoi, cliccando sul tasto \"Ricomincia\" (freccia curva che torna indietro).\n\nI problemi richiedono di scrivere un **singolo** programma a blocchi, che viene valutato **contemporaneamente** su più livelli.\nQuindi attenzione che non puoi scrivere programmi diversi per i diversi livelli, ma uno solo!\nPer ciascun livello correttamente risolto di ciascun problema, otterrai _5 punti_.\n","import { NoAuth } from \"@olinfo/quizms/student\";\n\nimport Statement from \"./contest/contest.mdx\";\nimport Header from \"./header.md\";\n\nexport const metadata = {\n  title: \"Corso di Programmazione\",\n  description: \"Corso di Programmazione a Blocchi per i Giochi di Fibonacci\",\n};\n\nexport default function App() {\n  return (\n    <NoAuth contestLongName=\"\" contestName=\"Corso di Programmazione\" duration={5760}>\n      <Header />\n      <Statement />\n    </NoAuth>\n  );\n}\n"],"names":["toolbox","Visualizer","variables","state","jsxs","Fragment","Canvas","range","i","jsx","Rectangle","Sprite","bulbOn","bulbOff","switchOnOn","switchOnOff","switchOffOn","switchOffOff","openedDoor","closedDoor","bunnyLittle","bunnyRight","bunnyLeft","Variables","_jsx","_components","customBlocks","initialBlocks","testcases","Code","metadata","App","NoAuth","Header","Statement"],"mappings":"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"}