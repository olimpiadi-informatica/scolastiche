{"version":3,"file":"1d6f8e69-page.js","sources":["../../../../src/fibonacci-corso/5-algoritmi-greedy/contest/s-1-torre-fissa/toolbox.ts","../../../../src/fibonacci-corso/5-algoritmi-greedy/contest/s-1-torre-fissa/visualizer.jsx","../../../../src/fibonacci-corso/5-algoritmi-greedy/contest/s-1-torre-fissa/question.mdx","../../../../src/fibonacci-corso/5-algoritmi-greedy/contest/s-3-torre-rialza/toolbox.ts","../../../../src/fibonacci-corso/5-algoritmi-greedy/contest/s-3-torre-rialza/visualizer.jsx","../../../../src/fibonacci-corso/5-algoritmi-greedy/contest/s-3-torre-rialza/question.mdx","../../../../src/fibonacci-corso/5-algoritmi-greedy/contest/s-2-torre-allarga/toolbox.ts","../../../../src/fibonacci-corso/5-algoritmi-greedy/contest/s-2-torre-allarga/visualizer.jsx","../../../../src/fibonacci-corso/5-algoritmi-greedy/contest/s-2-torre-allarga/question.mdx","../../../../src/fibonacci-corso/5-algoritmi-greedy/contest/s-4-abbassa-uguale/toolbox.ts","../../../../src/fibonacci-corso/5-algoritmi-greedy/contest/s-4-abbassa-uguale/visualizer.jsx","../../../../src/fibonacci-corso/5-algoritmi-greedy/contest/s-4-abbassa-uguale/question.mdx","../../../../src/fibonacci-corso/5-algoritmi-greedy/contest/s-5-abbassa-alza/toolbox.ts","../../../../src/fibonacci-corso/5-algoritmi-greedy/contest/s-5-abbassa-alza/visualizer.jsx","../../../../src/fibonacci-corso/5-algoritmi-greedy/contest/s-5-abbassa-alza/question.mdx","../../../../src/fibonacci-corso/5-algoritmi-greedy/contest/s-6-abbassa-diverso/toolbox.ts","../../../../src/fibonacci-corso/5-algoritmi-greedy/contest/s-6-abbassa-diverso/visualizer.jsx","../../../../src/fibonacci-corso/5-algoritmi-greedy/contest/s-6-abbassa-diverso/question.mdx","../../../../src/fibonacci-corso/5-algoritmi-greedy/contest/contest.mdx","../../../../src/fibonacci-corso/5-algoritmi-greedy/header.md","../../../../src/fibonacci-corso/5-algoritmi-greedy/page.tsx"],"sourcesContent":["import type { ToolboxInfo } from \"blockly/core/utils/toolbox\";\n\nexport const toolbox: ToolboxInfo = {\n  kind: \"categoryToolbox\",\n  contents: [\n    {\n      kind: \"category\",\n      name: \"Variabili\",\n      categorystyle: \"variable_category\",\n      custom: \"VARIABLE\",\n    },\n    {\n      kind: \"category\",\n      name: \"Matematica\",\n      categorystyle: \"math_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"math_number\",\n          fields: { NUM: 123 },\n        },\n        {\n          kind: \"block\",\n          type: \"math_arithmetic\",\n          fields: {\n            OP: \"ADD\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Logica\",\n      categorystyle: \"logic_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"logic_compare\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_operation\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_negate\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n          extraState: {\n            hasElse: \"true\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Cicli\",\n      categorystyle: \"loop_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_repeat_ext\",\n          inputs: {\n            TIMES: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n          },\n        },\n        {\n          kind: \"block\",\n          type: \"controls_whileUntil\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_for\",\n          fields: {\n            VAR: \"i\",\n          },\n          inputs: {\n            FROM: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 1 },\n              },\n            },\n            TO: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n            BY: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 1 },\n              },\n            },\n          },\n        },\n      ],\n    },\n  ],\n};\n","\"use client\";\n\nimport { useEffect, useRef } from \"react\";\n\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=66\";\nimport stairs from \"./asy/stairs.asy?w=80\";\n\nexport default function Visualizer({ variables, state }) {\n  const colors = [\n    \"#4093b0\",\n    \"#bf4eb4\",\n    \"#44c966\",\n    \"#4473c9\",\n    \"#c2a948\",\n    \"#7468c5\",\n    \"#9c5ebd\",\n    \"#7cc258\",\n    \"#a3b651\",\n    \"#40af91\",\n    \"#4473c9\",\n    \"#c2a948\",\n    \"#7468c5\",\n    \"#9c5ebd\",\n    \"#7cc258\",\n    \"#a3b651\",\n  ];\n\n  const ref = useRef();\n  useEffect(() => {\n    const container = ref.current?.parentElement;\n    if (container) {\n      container.scrollTop = container.scrollHeight;\n    }\n  }, []);\n\n  const y = [0];\n  for (let i = 0; i < state.N; i++) {\n    y[i + 1] = y[i] + (state.rot[i] ? state.larghezze[i] : state.altezze[i]);\n  }\n\n  return (\n    <div ref={ref}>\n      <Canvas gravity=\"bottom\" scale={10}>\n        {range(state.N).map((i) => {\n          const px = 16 - state.larghezze[i] / 2;\n          const py = y[i] + (state.rot[i] && (state.larghezze[i] - state.altezze[i]) / 2);\n          const rotation = state.rot[i] ? 0.25 : 0;\n          return (\n            <Rectangle\n              key={i}\n              color={colors[i]}\n              height={state.altezze[i]}\n              width={state.larghezze[i]}\n              x={px}\n              y={py}\n              rotation={rotation}\n            />\n          );\n        })}\n        <Sprite src={stairs} alt=\"Scale\" x={0.6} y={0} />\n        <Sprite src={bunny} alt=\"Bunny\" x={1.5} y={y[state.pos]} follow />\n      </Canvas>\n      <Variables\n        variables={{\n          ...variables,\n          \"N (num. scatole)\": state.N,\n        }}\n      />\n    </div>\n  );\n}\n","import { toolbox } from \"./toolbox.ts\";\nimport initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s1.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\nimport { Hint } from \"~/utils/hint\";\n\nBunny e i suoi amici stanno cercando gli ovetti di pasqua nascosti in giro per la fattoria Fibonacci!\nBunny è convinto che ci siano ovetti nascosti anche sui tetti, quindi ha deciso di costruire una\ntorre che gli consenta di arrivare più in alto.\nPer farlo, ha impilato $N$ scatole rettangolari di varie dimensioni.\nHai a disposizione questi blocchi:\n\n- `N`: il numero di scatole impilate.\n- `altezza della scatola` $i$: l'altezza della $i$-esima scatola.\n- `larghezza della scatola` $i$: la larghezza della $i$-esima scatola.\n- `riporta altezza` $h$ `e larghezza` $w$: termina il programma riportando il numero $h$ come altezza totale della torre, e il numero $w$ come larghezza **minima** della torre.\n\nAiuta Bunny a capire le dimensioni della sua torre!\n**Attenzione** che Bunny vuole capire se la torre può reggere il suo peso, e quindi per la larghezza conta solo il punto **più stretto** della torre.\n\n<Hint label=\"suggerimento 1\">\n  In questo problema non ci sono scelte, quindi non servirà trovare una soluzione greedy.\n  Possiamo invece sfruttare le cose viste nella quarta lezione: quali possono tornarti utili per fare i calcoli richiesti?\n</Hint>\n\n<Hint label=\"suggerimento 2\">\n  Calcolare l'altezza è molto simile al problema 3 della quarta lezione.\n  Calcolare la larghezza è anche simile a calcolare la larghezza, ma bisogna aggiungere un controllo condizionale.\n</Hint>\n\n<Blockly\n  toolbox={toolbox}\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> In questo programma abbiamo creato una variabile che chiamiamo _\"somma\"_, che parte da zero\n> e aggiorneremo fino ad arrivare all'altezza totale della torre.\n> Abbiamo inoltre creato anche una variabile che chiamiamo _\"minimo\"_, che parte da un numero più grande\n> di tutte le dimensioni delle scatole (999), e aggiorneremo fino ad arrivare alla larghezza minima della torre.\n>\n> Per portare le due variabili al loro valore finale, iteriamo con un ciclo contatore su tutte le \n> scatole dalla prima all'ultima. Aggiorniamo la variabile _somma_ aggiungendoci l'altezza della\n> scatola corrente. Inoltre, se la larghezza della scatola corrente è minore della larghezza della\n> parte di torre finora esaminata (nella variabile _minimo_), aggiorniamo anche la variabile _minimo_\n> ponendola pari alla larghezza della scatola corrente.\n> Alla fine del ciclo, riportiamo il valore delle due variabili come altezza e larghezza della torre.\n\nPrima di passare alla prossima domanda, assicurati di aver risolto **tutti i livelli** di questa!","import type { ToolboxInfo } from \"blockly/core/utils/toolbox\";\n\nexport const toolbox: ToolboxInfo = {\n  kind: \"categoryToolbox\",\n  contents: [\n    {\n      kind: \"category\",\n      name: \"Variabili\",\n      categorystyle: \"variable_category\",\n      custom: \"VARIABLE\",\n    },\n    {\n      kind: \"category\",\n      name: \"Matematica\",\n      categorystyle: \"math_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"math_number\",\n          fields: { NUM: 123 },\n        },\n        {\n          kind: \"block\",\n          type: \"math_arithmetic\",\n          fields: {\n            OP: \"ADD\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Logica\",\n      categorystyle: \"logic_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"logic_compare\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_operation\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_negate\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n          extraState: {\n            hasElse: \"true\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Cicli\",\n      categorystyle: \"loop_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_repeat_ext\",\n          inputs: {\n            TIMES: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n          },\n        },\n        {\n          kind: \"block\",\n          type: \"controls_whileUntil\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_for\",\n          fields: {\n            VAR: \"i\",\n          },\n          inputs: {\n            FROM: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 1 },\n              },\n            },\n            TO: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n            BY: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 1 },\n              },\n            },\n          },\n        },\n      ],\n    },\n  ],\n};\n","\"use client\";\n\nimport { useEffect, useRef } from \"react\";\n\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=66\";\nimport stairs from \"./asy/stairs.asy?w=80\";\n\nexport default function Visualizer({ variables, state }) {\n  const colors = [\n    \"#4093b0\",\n    \"#bf4eb4\",\n    \"#44c966\",\n    \"#4473c9\",\n    \"#c2a948\",\n    \"#7468c5\",\n    \"#9c5ebd\",\n    \"#7cc258\",\n    \"#a3b651\",\n    \"#40af91\",\n    \"#4473c9\",\n    \"#c2a948\",\n    \"#7468c5\",\n    \"#9c5ebd\",\n    \"#7cc258\",\n    \"#a3b651\",\n  ];\n\n  const ref = useRef();\n  useEffect(() => {\n    const container = ref.current?.parentElement;\n    if (container) {\n      container.scrollTop = container.scrollHeight;\n    }\n  }, []);\n\n  const y = [0];\n  for (let i = 0; i < state.N; i++) {\n    y[i + 1] = y[i] + (state.rot[i] ? state.larghezze[i] : state.altezze[i]);\n  }\n\n  return (\n    <div ref={ref}>\n      <Canvas gravity=\"bottom\" scale={10}>\n        {range(state.N).map((i) => {\n          const px = 16 - state.larghezze[i] / 2;\n          const py = y[i] + (state.rot[i] && (state.larghezze[i] - state.altezze[i]) / 2);\n          const rotation = state.rot[i] ? 0.25 : 0;\n          return (\n            <Rectangle\n              key={i}\n              color={colors[i]}\n              height={state.altezze[i]}\n              width={state.larghezze[i]}\n              x={px}\n              y={py}\n              rotation={rotation}\n            />\n          );\n        })}\n        <Sprite src={stairs} alt=\"Scale\" x={0.6} y={0} />\n        <Sprite src={bunny} alt=\"Bunny\" x={1.5} y={y[state.pos]} follow />\n      </Canvas>\n      <Variables\n        variables={{\n          ...variables,\n          \"N (num. scatole)\": state.N,\n        }}\n      />\n    </div>\n  );\n}\n","import { toolbox } from \"./toolbox.ts\";\nimport initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s3.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\nimport { Hint } from \"~/utils/hint\";\n\nDopo aver allargato al massimo la sua torre e averla usata per raccogliere alcuni ovetti,\nBunny si è accorto che ora non è abbastanza alta per raggiungere gli ovetti sui tetti più alti.\nHa quindi deciso che, mantenendo comunque la larghezza massima, vuole anche rendere la torre più\nalta possibile. Hai a disposizione gli stessi blocchi di prima:\n\n- `N`: il numero di scatole impilate.\n- `altezza della scatola` $i$: l'altezza della $i$-esima scatola.\n- `larghezza della scatola` $i$: la larghezza della $i$-esima scatola.\n- `ruota la scatola i`: ruota di 90 gradi la scatola $i$-esima, scambiando quindi di conseguenza\n  la sua altezza con la sua larghezza.\n- `riporta altezza` $h$ `e larghezza` $w$: termina il programma riportando il numero $h$ come\n  altezza totale della torre, e il numero $w$ come larghezza minima della torre.\n\nAiuta Bunny a realizzare la torre **più alta tra quelle con larghezza massima**, riportando anche la nuova\naltezza e larghezza della torre dopo la rotazione delle scatole!\n\n<Hint label=\"suggerimento 1\">\n  Devi soddisfare due richieste: tenere la larghezza massima, e a parità l'altezza massima.\n  Conviene scrivere una soluzione in due passaggi: soddisfa prima una delle due richieste,\n  e poi pensa all'altra.\n</Hint>\n\n<Hint label=\"suggerimento 2\">\n  Prima pensa ad ottenere la larghezza massima, e per quello puoi usare la soluzione del problema precedente.\n  Poi pensa ad ottenere l'altezza massima: anche qui dovrai scegliere se ruotare o non ruotare ogni scatola\n  in modo greedy, ma sfruttando il fatto che ora già conosci la larghezza che vuoi ottenere.\n  Quando puoi permetterti di ruotare una scatola, migliorando l'**altezza totale** senza peggiorare la **larghezza minima**?\n</Hint>\n\n<Blockly\n  toolbox={toolbox}\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Questo programma è uguale al programma che risolve la domanda precedente, con l'aggiunta di un\n> singolo blocco condizionale come primo blocco all'interno del ciclo contatore.\n> Quindi, prima di considerare l'altezza e larghezza di una scatola, dobbiamo fare una scelta:\n> ruotarla o non ruotarla? Questa scelta possiamo farla in modo \"greedy\", e cioè senza preoccuparci\n> di come saranno le scatole successive.\n>\n> Quindi, ci basta controllare se per caso la sua larghezza fosse minore della sua altezza.\n> Se sì ci conviene ruotarla, per allargare la torre al massimo, e quindi la ruotiamo prima\n> di considerarla nel calcolo di altezza e larghezza totale.\n\nPrima di passare alla prossima domanda, assicurati di aver risolto **tutti i livelli** di questa!","import type { ToolboxInfo } from \"blockly/core/utils/toolbox\";\n\nexport const toolbox: ToolboxInfo = {\n  kind: \"categoryToolbox\",\n  contents: [\n    {\n      kind: \"category\",\n      name: \"Variabili\",\n      categorystyle: \"variable_category\",\n      custom: \"VARIABLE\",\n    },\n    {\n      kind: \"category\",\n      name: \"Matematica\",\n      categorystyle: \"math_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"math_number\",\n          fields: { NUM: 123 },\n        },\n        {\n          kind: \"block\",\n          type: \"math_arithmetic\",\n          fields: {\n            OP: \"ADD\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Logica\",\n      categorystyle: \"logic_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"logic_compare\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_operation\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_negate\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n          extraState: {\n            hasElse: \"true\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Cicli\",\n      categorystyle: \"loop_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_repeat_ext\",\n          inputs: {\n            TIMES: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n          },\n        },\n        {\n          kind: \"block\",\n          type: \"controls_whileUntil\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_for\",\n          fields: {\n            VAR: \"i\",\n          },\n          inputs: {\n            FROM: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 1 },\n              },\n            },\n            TO: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n            BY: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 1 },\n              },\n            },\n          },\n        },\n      ],\n    },\n  ],\n};\n","\"use client\";\n\nimport { useEffect, useRef } from \"react\";\n\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=66\";\nimport stairs from \"./asy/stairs.asy?w=80\";\n\nexport default function Visualizer({ variables, state }) {\n  const colors = [\n    \"#4093b0\",\n    \"#bf4eb4\",\n    \"#44c966\",\n    \"#4473c9\",\n    \"#c2a948\",\n    \"#7468c5\",\n    \"#9c5ebd\",\n    \"#7cc258\",\n    \"#a3b651\",\n    \"#40af91\",\n    \"#4473c9\",\n    \"#c2a948\",\n    \"#7468c5\",\n    \"#9c5ebd\",\n    \"#7cc258\",\n    \"#a3b651\",\n  ];\n\n  const ref = useRef();\n  useEffect(() => {\n    const container = ref.current?.parentElement;\n    if (container) {\n      container.scrollTop = container.scrollHeight;\n    }\n  }, []);\n\n  const y = [0];\n  for (let i = 0; i < state.N; i++) {\n    y[i + 1] = y[i] + (state.rot[i] ? state.larghezze[i] : state.altezze[i]);\n  }\n\n  return (\n    <div ref={ref}>\n      <Canvas gravity=\"bottom\" scale={10}>\n        {range(state.N).map((i) => {\n          const px = 16 - state.larghezze[i] / 2;\n          const py = y[i] + (state.rot[i] && (state.larghezze[i] - state.altezze[i]) / 2);\n          const rotation = state.rot[i] ? 0.25 : 0;\n          return (\n            <Rectangle\n              key={i}\n              color={colors[i]}\n              height={state.altezze[i]}\n              width={state.larghezze[i]}\n              x={px}\n              y={py}\n              rotation={rotation}\n            />\n          );\n        })}\n        <Sprite src={stairs} alt=\"Scale\" x={0.6} y={0} />\n        <Sprite src={bunny} alt=\"Bunny\" x={1.5} y={y[state.pos]} follow />\n      </Canvas>\n      <Variables\n        variables={{\n          ...variables,\n          \"N (num. scatole)\": state.N,\n        }}\n      />\n    </div>\n  );\n}\n","import { toolbox } from \"./toolbox.ts\";\nimport initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s2.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\nimport { Hint } from \"~/utils/hint\";\n\nDopo aver misurato la sua torre, Bunny (che alla fine è pur sempre un coniglio) ha paura che non sia\nabbastanza larga per reggere il suo peso! Vuole quindi provare a rendere la torre **più larga possibile**,\nruotando alcune delle scatole che la compongono. Hai a disposizione questi blocchi:\n\n- `N`: il numero di scatole impilate.\n- `altezza della scatola` $i$: l'altezza della $i$-esima scatola.\n- `larghezza della scatola` $i$: la larghezza della $i$-esima scatola.\n- `ruota la scatola i`: ruota di 90 gradi la scatola $i$-esima, scambiando quindi di conseguenza\n  la sua altezza con la sua larghezza **(nuovo!)**.\n- `riporta altezza` $h$ `e larghezza` $w$: termina il programma riportando il numero $h$ come altezza totale della torre, e il numero $w$ come larghezza minima della torre.\n\nAiuta Bunny a realizzare la torre più larga, riportando anche la nuova altezza e larghezza della torre\ndopo la rotazione delle scatole!\n\nNota che questa volta Bunny ha da effettuare una sequenza di scelte: per ogni scatola, deve decidere se\nruotarla o meno! In questa domanda, potrai ottenere il risultato migliore seguendo un _algoritmo greedy_ (goloso),\nin cui ogni scelta viene presa senza considerare le conseguenze sulle scelte future. Anche se questa strategia\nnon funziona in tutti i problemi, funziona in questo problema perché qui in effetti le diverse scelte non si\ninfluenzano a vicenda.\n\n<Hint label=\"suggerimento 1\">\n  Anche qui dovrai poi calcolare l'altezza e larghezza della torre, quindi ti conviene partire dal programma\n  della scorsa domanda. Prima di considerare l'altezza e larghezza di una scatola, cosa puoi fare?\n</Hint>\n\n<Hint label=\"suggerimento 2\">\n  Differentemente dalla scorsa domanda, ora puoi ruotare le scatole, e quindi hai delle scelte:\n  ruotare o non ruotare ogni scatola. Applicando un ragionamento greedy, concentrati su una sola\n  scatola: quando ti conviene ruotarla per rendere la torre più larga?\n</Hint>\n\n<Blockly\n  toolbox={toolbox}\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Questo programma è uguale al programma che risolve la domanda precedente, con l'aggiunta di un\n> singolo blocco condizionale come primo blocco all'interno del ciclo contatore.\n> Quindi, prima di considerare l'altezza e larghezza di una scatola, dobbiamo fare una scelta:\n> ruotarla o non ruotarla? Questa scelta possiamo farla in modo greedy, e cioè senza preoccuparci\n> di come saranno le scatole successive.\n>\n> Quindi, ci basta controllare se per caso la sua larghezza fosse minore della sua altezza.\n> Se sì ci conviene ruotarla, per allargare la torre al massimo, e quindi la ruotiamo prima\n> di considerarla nel calcolo di altezza e larghezza totale.\n\nPrima di passare alla prossima domanda, assicurati di aver risolto **tutti i livelli** di questa!","import type { ToolboxInfo } from \"blockly/core/utils/toolbox\";\n\nexport const toolbox: ToolboxInfo = {\n  kind: \"categoryToolbox\",\n  contents: [\n    {\n      kind: \"category\",\n      name: \"Variabili\",\n      categorystyle: \"variable_category\",\n      custom: \"VARIABLE\",\n    },\n    {\n      kind: \"category\",\n      name: \"Matematica\",\n      categorystyle: \"math_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"math_number\",\n          fields: { NUM: 123 },\n        },\n        {\n          kind: \"block\",\n          type: \"math_arithmetic\",\n          fields: {\n            OP: \"ADD\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Logica\",\n      categorystyle: \"logic_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"logic_compare\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_operation\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_negate\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n          extraState: {\n            hasElse: \"true\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Cicli\",\n      categorystyle: \"loop_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_repeat_ext\",\n          inputs: {\n            TIMES: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n          },\n        },\n        {\n          kind: \"block\",\n          type: \"controls_whileUntil\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_for\",\n          fields: {\n            VAR: \"i\",\n          },\n          inputs: {\n            FROM: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 1 },\n              },\n            },\n            TO: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n            BY: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 1 },\n              },\n            },\n          },\n        },\n      ],\n    },\n  ],\n};\n","\"use client\";\n\nimport clsx from \"clsx\";\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=60\";\nimport carrot from \"./asy/carrot.asy?w=40\";\nimport crate from \"./asy/crate.asy?w=50\";\n\nexport default function Visualizer({ variables, state }) {\n  const cellWidth = 50;\n  const cellHeight = 7;\n  const cellPadding = 1;\n\n  if (state.N > 7) {\n    return (\n      <div className=\"text-slate-800 p-4\">\n        La visualizzazione è disponibile solo per i primi 5 livelli.\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Canvas gravity=\"bottom\" scale={10}>\n        {range(state.N).map((i) => state.N - i - 1 == state.allie ? null : (\n          <Sprite\n            src={crate}\n            alt=\"box\"\n            x={cellWidth * 1.15}\n            y={cellHeight * (i + 0.5) - 3}\n            key={`box${i}`}\n          />\n        ))}\n        {range(state.N).map((i) => state.N - i - 1 == state.allie ? null : (\n          <Rectangle\n            color=\"transparent\"\n            width={cellWidth * 0.12}\n            height={cellHeight}\n            key={`cost${i}`}\n            x={cellWidth * 1.24}\n            y={cellHeight * i}\n            className={clsx(\n              \"!border-none flex items-center justify-end text-3xl decoration-red-500\",\n              state.highlight && state.pos === state.N - i\n                ? \"underline text-red-500\"\n                : \"text-black\",\n            )}>\n            {state.C}\n          </Rectangle>\n        ))}\n        {range(state.N).map((i) => state.N - i - 1 == state.allie ? null : (\n          <Sprite\n            src={carrot}\n            alt=\"carota\"\n            x={cellWidth * 1.35}\n            y={cellHeight * (i + 0.5) - 2}\n            key={`carrot${i}`}\n          />\n        ))}\n        {range(state.N).map((i) => (\n          <Rectangle\n            color=\"transparent\"\n            width={cellWidth * 0.15}\n            height={cellHeight}\n            key={`rank${i}`}\n            x={-cellWidth * 0.05}\n            y={cellHeight * i}\n            className=\"!border-none flex items-center justify-end text-[40px]\">\n            {state.N - i}.\n          </Rectangle>\n        ))}\n        {range(state.N)\n          .reverse()\n          .map((i) => {\n            const rank = state.N - i - 1;\n            const delta = [\n              state.stress[rank] === 0 ? 0 : 10,\n              state.stress[rank] * cellHeight * 0.25,\n            ];\n            return (\n              <Rectangle\n                color=\"gray\"\n                width={cellWidth}\n                height={cellHeight}\n                key={`points${state.P[state.N - i - 1][1]}`}\n                x={cellWidth * 0.1 + delta[0]}\n                y={cellHeight * i + delta[1]}>\n                <Rectangle\n                  color={state.P[state.N - i - 1][2] == \"Allie Muschio\" ? \"lightcoral\" : \"white\"}\n                  width={cellWidth * 0.6 - cellPadding}\n                  height={cellHeight - 2 * cellPadding}\n                  x={cellPadding}\n                  y={cellPadding}\n                  className=\"flex items-center justify-start text-4xl\">\n                  {state.P[state.N - i - 1][2]}\n                </Rectangle>\n                <Rectangle\n                  color={state.P[state.N - i - 1][2] == \"Allie Muschio\" ? \"lightcoral\" : \"white\"}\n                  width={cellWidth * 0.4 - cellPadding}\n                  height={cellHeight - 2 * cellPadding}\n                  x={cellWidth * 0.6}\n                  y={cellPadding}\n                  className=\"flex items-center justify-end text-[40px]\">\n                  {state.P[state.N - i - 1][0]} pts\n                </Rectangle>\n              </Rectangle>\n            );\n          })}\n        <Sprite src={bunny} alt=\"Carol\" x={73} y={(state.N - state.pos) * cellHeight} />\n      </Canvas>\n      <Variables\n        variables={{ ...variables, \"N (num. giocatori)\": state.N, \"posizione di Allie\": state.allie+1, \"carote spese\": state.count }}\n      />\n    </>\n  );\n}\n","import { toolbox } from \"./toolbox.ts\";\nimport initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s4.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\nimport { Hint } from \"~/utils/hint\";\n\nAllie Muschio ha deciso di iniziare a giocare a FarmCraft. Il gioco sembra abbastanza divertente,\nma ha un piccolo problema: Allie è ancora molto indietro nella graduatoria globale!\nPotrebbe allenarsi per alzare il suo punteggio, ma Allie ha un piano migliore.\n\nLa graduatoria di FarmCraft contiene $N$ giocatori, con il giocatore in posizione $i$-esima a punteggio $P_i$.\nNello store del gioco, Allie ha visto che c'è la possibilità di comprare $N$ diverse _box negative_,\nnumerate da $1$ a $N$, ciascuna con lo stesso costo di $C$ carote. Comprando la box $i$-esima, Allie potrà\nabbassare di $1$ punto il punteggio della persona che **in quel momento** sarà $i$-esima in graduatoria.\nOgni box può essere comprata un qualunque numero di volte. Dato che Allie è la più facoltosa della fattoria,\nha deciso di usare queste box per abbassare il punteggio di tutti gli altri sotto il proprio e diventare così\nprima in graduatoria! Hai a disposizione questi blocchi:\n\n- `N`: il numero di giocatori di FarmCraft.\n- `posizione di Allie`: la posizione corrente di Allie in graduatoria.\n- `punteggio del giocatore` $i$: il punteggio $P_i$ del giocatore che in questo momento è $i$-esimo in graduatoria.\n- `costo delle box negative`: costo $C$ in carote delle box per abbassare i punteggi dei giocatori.\n- `compra box negativa` $i$: paga la box negativa $i$-esima e abbassa di $1$ il punteggio del giocatore che al momento è $i$-esimo.\n- `termina`: goditi la meritata vittoria.\n\nAiuta Allie a diventare prima in graduatoria spendendo meno possibile!\n\n<Hint label=\"suggerimento 1\">\n  Hai molti blocchi a disposizione, ma non tutti sono davvero necessari per risolvere il problema.\n  Sai capire quali ti servono davvero?\n</Hint>\n\n<Hint label=\"suggerimento 2\">\n  Quando dovrai smettere di comprare box? Quali box può convenire comprare, finché non è ora di fermarsi?\n</Hint>\n\n<Blockly\n  toolbox={toolbox}\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Secondo questo programma, Allie continua a comprare box negative finché non diventa prima in graduatoria.\n> In ogni momento, ha senso comprare solo le box dei giocatori prima di lei in graduatoria, e qualunque\n> di queste box compri non cambierà il risultato. Quindi in questa soluzione, per semplicità, Allie sceglie\n> di comprare sempre la box che abbassa il punteggio del primo giocatore, che è sicuramente prima di lei.\n\nPrima di passare alla prossima domanda, assicurati di aver risolto **tutti i livelli** di questa!","import type { ToolboxInfo } from \"blockly/core/utils/toolbox\";\n\nexport const toolbox: ToolboxInfo = {\n  kind: \"categoryToolbox\",\n  contents: [\n    {\n      kind: \"category\",\n      name: \"Variabili\",\n      categorystyle: \"variable_category\",\n      custom: \"VARIABLE\",\n    },\n    {\n      kind: \"category\",\n      name: \"Matematica\",\n      categorystyle: \"math_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"math_number\",\n          fields: { NUM: 123 },\n        },\n        {\n          kind: \"block\",\n          type: \"math_arithmetic\",\n          fields: {\n            OP: \"ADD\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Logica\",\n      categorystyle: \"logic_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"logic_compare\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_operation\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_negate\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n          extraState: {\n            hasElse: \"true\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Cicli\",\n      categorystyle: \"loop_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_repeat_ext\",\n          inputs: {\n            TIMES: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n          },\n        },\n        {\n          kind: \"block\",\n          type: \"controls_whileUntil\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_for\",\n          fields: {\n            VAR: \"i\",\n          },\n          inputs: {\n            FROM: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 1 },\n              },\n            },\n            TO: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n            BY: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 1 },\n              },\n            },\n          },\n        },\n      ],\n    },\n  ],\n};\n","\"use client\";\n\nimport clsx from \"clsx\";\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=60\";\nimport carrot from \"./asy/carrot.asy?w=40\";\nimport crate from \"./asy/crate.asy?w=50\";\nimport crateplus from \"./asy/crateplus.asy?w=50\";\n\nexport default function Visualizer({ variables, state }) {\n  const cellWidth = 50;\n  const cellHeight = 7;\n  const cellPadding = 1;\n\n  if (state.N > 7) {\n    return (\n      <div className=\"text-slate-800 p-4\">\n        La visualizzazione è disponibile solo per i primi 5 livelli.\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Canvas gravity=\"bottom\" scale={10}>\n        {range(state.N).map((i) => (\n          <Sprite\n            src={state.N - i - 1 == state.allie ? crateplus : crate}\n            alt=\"box\"\n            x={cellWidth * 1.15}\n            y={cellHeight * (i + 0.5) - 3}\n            key={`box${i}`}\n          />\n        ))}\n        {range(state.N).map((i) => (\n          <Rectangle\n            color=\"transparent\"\n            width={cellWidth * 0.12}\n            height={cellHeight}\n            key={`cost${i}`}\n            x={cellWidth * 1.24}\n            y={cellHeight * i}\n            className={clsx(\n              \"!border-none flex items-center justify-end text-3xl decoration-red-500\",\n              state.highlight && state.pos === state.N - i\n                ? \"underline text-red-500\"\n                : \"text-black\",\n            )}>\n            {state.N - i - 1 == state.allie ? state.K : state.C}\n          </Rectangle>\n        ))}\n        {range(state.N).map((i) => (\n          <Sprite\n            src={carrot}\n            alt=\"carota\"\n            x={cellWidth * 1.35}\n            y={cellHeight * (i + 0.5) - 2}\n            key={`carrot${i}`}\n          />\n        ))}\n        {range(state.N).map((i) => (\n          <Rectangle\n            color=\"transparent\"\n            width={cellWidth * 0.15}\n            height={cellHeight}\n            key={`rank${i}`}\n            x={-cellWidth * 0.05}\n            y={cellHeight * i}\n            className=\"!border-none flex items-center justify-end text-[40px]\">\n            {state.N - i}.\n          </Rectangle>\n        ))}\n        {range(state.N)\n          .reverse()\n          .map((i) => {\n            const rank = state.N - i - 1;\n            const delta = [\n              state.stress[rank] === 0 ? 0 : 10,\n              state.stress[rank] * cellHeight * 0.25,\n            ];\n            return (\n              <Rectangle\n                color=\"gray\"\n                width={cellWidth}\n                height={cellHeight}\n                key={`points${state.P[state.N - i - 1][1]}`}\n                x={cellWidth * 0.1 + delta[0]}\n                y={cellHeight * i + delta[1]}>\n                <Rectangle\n                  color={state.P[state.N - i - 1][2] == \"Allie Muschio\" ? \"lightcoral\" : \"white\"}\n                  width={cellWidth * 0.6 - cellPadding}\n                  height={cellHeight - 2 * cellPadding}\n                  x={cellPadding}\n                  y={cellPadding}\n                  className=\"flex items-center justify-start text-4xl\">\n                  {state.P[state.N - i - 1][2]}\n                </Rectangle>\n                <Rectangle\n                  color={state.P[state.N - i - 1][2] == \"Allie Muschio\" ? \"lightcoral\" : \"white\"}\n                  width={cellWidth * 0.4 - cellPadding}\n                  height={cellHeight - 2 * cellPadding}\n                  x={cellWidth * 0.6}\n                  y={cellPadding}\n                  className=\"flex items-center justify-end text-[40px]\">\n                  {state.P[state.N - i - 1][0]} pts\n                </Rectangle>\n              </Rectangle>\n            );\n          })}\n        <Sprite src={bunny} alt=\"Carol\" x={73} y={(state.N - state.pos) * cellHeight} />\n      </Canvas>\n      <Variables\n        variables={{ ...variables, \"N (num. giocatori)\": state.N, \"posizione di Allie\": state.allie+1, \"carote spese\": state.count }}\n      />\n    </>\n  );\n}\n","import { toolbox } from \"./toolbox.ts\";\nimport initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s5.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\nimport { Hint } from \"~/utils/hint\";\n\nPoco dopo aver iniziato a comprare qualche box negativa, Allie si è accorta che in FarmCraft hanno messo in\nvendita un nuovo tipo di box: le **box positive**! Comprando la box positiva $i$-esima, al costo di $K$ carote,\nAllie potrà **alzare** di $1$ punto il punteggio della persona che **in quel momento** sarà $i$-esima in graduatoria.\nCome prima, ogni box può essere comprata un qualunque numero di volte. Hai a disposizione questi blocchi:\n\n- `N`: il numero di giocatori di FarmCraft.\n- `posizione di Allie`: la posizione corrente di Allie in graduatoria.\n- `punteggio del giocatore` $i$: il punteggio $P_i$ del giocatore che in questo momento è $i$-esimo in graduatoria.\n- `costo delle box positive`: costo $K$ in carote delle box per alzare i punteggi dei giocatori **(nuovo!)**.\n- `costo delle box negative`: costo $C$ in carote delle box per abbassare i punteggi dei giocatori.\n- `compra box positiva` $i$: paga la box positiva $i$-esima e alza di $1$ il punteggio del giocatore che al momento è $i$-esimo **(nuovo!)**.\n- `compra box negativa` $i$: paga la box negativa $i$-esima e abbassa di $1$ il punteggio del giocatore che al momento è $i$-esimo.\n- `termina`: goditi la meritata vittoria.\n\nAiuta Allie a riprovare ad arrivare prima in graduatoria spendendo meno possibile!\n\n<Hint label=\"suggerimento 1\">\n  Questa volta hai delle scelte da prendere, sempre in modo greedy: meglio una box positiva o negativa?\n</Hint>\n\n<Hint label=\"suggerimento 2\">\n  Se prendi una box positiva, quante box negative ti risparmia di prendere in futuro per arrivare primo?\n</Hint>\n\n<Hint label=\"suggerimento 3\">\n  Nella soluzione, conviene prima prendere tutte le box di un tipo (quale?) e poi tutte le box dell'altro,\n  con due cicli \"ripeti mentre/fino a che\". Riesci a impostarli?\n</Hint>\n\n<Blockly\n  toolbox={toolbox}\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Innanzitutto, notiamo che comprare una box positiva per Allie è equivalente come effetto in graduatoria a\n> comprare una box negativa per tutti i giocatori sopra di lei. La prima opzione (una box positiva) costa $K$,\n> mentre la seconda opzione (tante box negative) costa $C \\times (i-1)$ dove $i$ è la posizione attuale di Allie\n> in graduatoria. Seguiamo quindi una strategia greedy, ogni volta scegliendo se usare una box positiva o negativa\n> sulla base di quali di questi due numeri è più piccolo. Dato che il primo numero ($K$) è fisso mentre il\n> secondo numero ($C \\times (i-1)$) diminuisce man mano che Allie sale in graduatoria, la box positiva potrà\n> essere conveniente solo inizialmente, e quando inizierà a non esserlo più converrà usare solo box negative.\n>\n> Il programma sopra realizza questa idea. Prima di tutto Allie continua a comprare la box positiva della sua\n> posizione, fintanto che questa è conveniente (e quindi $K < C \\times (i-1)$). Quando questo non è più vero,\n> passa alla stessa strategia del problema precedente, comprando la box negativa del primo giocatore fino ad\n> arrivare primi.\n\nPrima di passare alla prossima domanda, assicurati di aver risolto **tutti i livelli** di questa!","import type { ToolboxInfo } from \"blockly/core/utils/toolbox\";\n\nexport const toolbox: ToolboxInfo = {\n  kind: \"categoryToolbox\",\n  contents: [\n    {\n      kind: \"category\",\n      name: \"Variabili\",\n      categorystyle: \"variable_category\",\n      custom: \"VARIABLE\",\n    },\n    {\n      kind: \"category\",\n      name: \"Matematica\",\n      categorystyle: \"math_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"math_number\",\n          fields: { NUM: 123 },\n        },\n        {\n          kind: \"block\",\n          type: \"math_arithmetic\",\n          fields: {\n            OP: \"ADD\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Logica\",\n      categorystyle: \"logic_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"logic_compare\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_operation\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_negate\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n          extraState: {\n            hasElse: \"true\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Cicli\",\n      categorystyle: \"loop_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_repeat_ext\",\n          inputs: {\n            TIMES: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n          },\n        },\n        {\n          kind: \"block\",\n          type: \"controls_whileUntil\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_for\",\n          fields: {\n            VAR: \"i\",\n          },\n          inputs: {\n            FROM: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 1 },\n              },\n            },\n            TO: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n            BY: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 1 },\n              },\n            },\n          },\n        },\n      ],\n    },\n  ],\n};\n","\"use client\";\n\nimport clsx from \"clsx\";\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Rectangle, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=60\";\nimport carrot from \"./asy/carrot.asy?w=40\";\nimport crate from \"./asy/crate.asy?w=50\";\n\nexport default function Visualizer({ variables, state }) {\n  const cellWidth = 50;\n  const cellHeight = 7;\n  const cellPadding = 1;\n\n  if (state.N > 7) {\n    return (\n      <div className=\"text-slate-800 p-4\">\n        La visualizzazione è disponibile solo per i primi 5 livelli.\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Canvas gravity=\"bottom\" scale={10}>\n        {range(state.N).map((i) => state.N - i - 1 == state.allie ? null : (\n          <Sprite\n            src={crate}\n            alt=\"box\"\n            x={cellWidth * 1.15}\n            y={cellHeight * (i + 0.5) - 3}\n            key={`box${i}`}\n          />\n        ))}\n        {range(state.N).map((i) => state.N - i - 1 == state.allie ? null : (\n          <Rectangle\n            color=\"transparent\"\n            width={cellWidth * 0.12}\n            height={cellHeight}\n            key={`cost${i}`}\n            x={cellWidth * 1.24}\n            y={cellHeight * i}\n            className={clsx(\n              \"!border-none flex items-center justify-end text-3xl decoration-red-500\",\n              state.highlight && state.pos === state.N - i\n                ? \"underline text-red-500\"\n                : \"text-black\",\n            )}>\n            {state.C[state.N - i - 1]}\n          </Rectangle>\n        ))}\n        {range(state.N).map((i) => state.N - i - 1 == state.allie ? null : (\n          <Sprite\n            src={carrot}\n            alt=\"carota\"\n            x={cellWidth * 1.35}\n            y={cellHeight * (i + 0.5) - 2}\n            key={`carrot${i}`}\n          />\n        ))}\n        {range(state.N).map((i) => (\n          <Rectangle\n            color=\"transparent\"\n            width={cellWidth * 0.15}\n            height={cellHeight}\n            key={`rank${i}`}\n            x={-cellWidth * 0.05}\n            y={cellHeight * i}\n            className=\"!border-none flex items-center justify-end text-[40px]\">\n            {state.N - i}.\n          </Rectangle>\n        ))}\n        {range(state.N)\n          .reverse()\n          .map((i) => {\n            const rank = state.N - i - 1;\n            const delta = [\n              state.stress[rank] === 0 ? 0 : 10,\n              state.stress[rank] * cellHeight * 0.25,\n            ];\n            return (\n              <Rectangle\n                color=\"gray\"\n                width={cellWidth}\n                height={cellHeight}\n                key={`points${state.P[state.N - i - 1][1]}`}\n                x={cellWidth * 0.1 + delta[0]}\n                y={cellHeight * i + delta[1]}>\n                <Rectangle\n                  color={state.P[state.N - i - 1][2] == \"Allie Muschio\" ? \"lightcoral\" : \"white\"}\n                  width={cellWidth * 0.6 - cellPadding}\n                  height={cellHeight - 2 * cellPadding}\n                  x={cellPadding}\n                  y={cellPadding}\n                  className=\"flex items-center justify-start text-4xl\">\n                  {state.P[state.N - i - 1][2]}\n                </Rectangle>\n                <Rectangle\n                  color={state.P[state.N - i - 1][2] == \"Allie Muschio\" ? \"lightcoral\" : \"white\"}\n                  width={cellWidth * 0.4 - cellPadding}\n                  height={cellHeight - 2 * cellPadding}\n                  x={cellWidth * 0.6}\n                  y={cellPadding}\n                  className=\"flex items-center justify-end text-[40px]\">\n                  {state.P[state.N - i - 1][0]} pts\n                </Rectangle>\n              </Rectangle>\n            );\n          })}\n        <Sprite src={bunny} alt=\"Carol\" x={73} y={(state.N - state.pos) * cellHeight} />\n      </Canvas>\n      <Variables\n        variables={{ ...variables, \"N (num. giocatori)\": state.N, \"posizione di Allie\": state.allie+1, \"carote spese\": state.count }}\n      />\n    </>\n  );\n}\n","import { toolbox } from \"./toolbox.ts\";\nimport initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s6.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\nimport { Hint } from \"~/utils/hint\";\n\nPrima che Allie riesca a comprare tutte le box che le servono per diventare prima in graduatoria, gli sviluppatori\ndi FarmCraft le hanno di nuovo cambiato le carte in tavola! Dopo alcune proteste sulla possibilità di comprare\npunti con le box, hanno deciso di rimuovere dal mercato del gioco le box positive. Per compensare la perdita di\nguadagni, hanno deciso invece di puntare maggiormente sulle box negative, facendo sì che abbiano **ciascuna un\ncosto diverso!**\n\nIn particolare, la box negativa $i$-esima, per abbassare il punteggio del giocare che in quel momento è $i$-esimo\nin graduatoria, ha ora un costo di $C_i$ carote. Come sempre, ogni box può essere comprata un qualunque numero di\nvolte. Hai a disposizione questi blocchi:\n\n- `N`: il numero di giocatori di FarmCraft.\n- `posizione di Allie`: la posizione corrente di Allie in graduatoria.\n- `punteggio del giocatore` $i$: il punteggio $P_i$ del giocatore che in questo momento è $i$-esimo in graduatoria.\n- `costo della box negativa` $i$: costo $C_i$ in carote della box negativa $i$-esima **(nuovo!)**.\n- `compra box negativa` $i$: paga la box negativa $i$-esima e abbassa di $1$ il punteggio del giocatore che al momento è $i$-esimo.\n- `termina`: goditi la meritata vittoria.\n\nAiuta Allie ad arrivare finalmente prima una volta per tutte, sempre spendendo meno possibile!\n\n<Hint label=\"suggerimento 1\">\n  Anche stavolta hai scelte da prendere in modo greedy: quale box negativa conviene comprare?\n  Qual è la condizione in cui ti puoi fermare?\n</Hint>\n\n<Hint label=\"suggerimento 2\">\n  Per trovare la box migliore da prendere, il procedimento che ti serve ha delle parti in comune\n  con la soluzione alla prima domanda di questa lezione.\n</Hint>\n\n<Blockly\n  toolbox={toolbox}\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Secondo questo programma, Allie continua a comprare box finché non diventa prima in graduatoria.\n> Ogni volta, tra le box relative ai giocatori che stanno sopra di lei (che servono a qualcosa),\n> sceglie sempre quella che ha il **costo minimo** (scelta greedy).\n>\n> Per trovare la box con il costo minimo, utilizziamo una variabile _minimo_.\n> Consideriamo tutte le box $i$ da $1$ alla posizione prima di Allie tramite un ciclo contatore:\n> se la box $i$-esima costa meno della box che abbiamo salvato in _minimo_, impostiamo il _minimo_ a $i$.\n","<Contest>\n\n<Section>\n  <Problem points={[5, 0, 0]}><S1TorreFissa /></Problem>\n  <Problem points={[5, 0, 0]}><S2TorreAllarga /></Problem>\n  <Problem points={[5, 0, 0]}><S3TorreRialza /></Problem>\n  <Problem points={[5, 0, 0]}><S4AbbassaUguale /></Problem>\n  <Problem points={[5, 0, 0]}><S5AbbassaAlza /></Problem>\n  <Problem points={[5, 0, 0]}><S6AbbassaDiverso /></Problem>\n</Section>\n\n</Contest>\n","# Corso di Programmazione a Blocchi\n\n## Lezione 5 - Algoritmi Greedy\n\nBentornato nel corso di programmazione a blocchi per la preparazione ai Giochi di Fibonacci!\n\nQuesta è la quinta lezione, nella quale non introdurremo blocchi nuovi. Invece, vedremo alcuni esempi\ndi _soluzioni greedy_ a problemi in cui bisogna fare una serie di scelte. La soluzione greedy (che in\nitaliano si può tradurre come _\"soluzione golosa\"_) sceglierà sempre quello che le sembra meglio in quel\nmomento, senza pensare troppo al futuro!\n\nSe non l'avessi ancora fatto, ti invitiamo a completare le lezioni precedenti prima di iniziare questa (anche se pensi di conoscere già quegli argomenti!).\n**Attenzione: questa lezione è un po' più lunga delle prime quattro!**\n\n## Punteggio e struttura delle lezioni\n\nLe lezioni di questo corso contengono alcuni problemi di programmazione a blocchi, da risolvere in al massimo _4 giorni_. Appena avrai finito di lavorarci, potrai cliccare su \"Termina\" per vedere subito un riepilogo del punteggio che hai ottenuto, e le soluzioni spiegate di tutti i problemi! Se anche non lo farai, la lezione verrà terminata automaticamente dopo 4 giorni. Potrai comunque ricominciare la lezione quante volte vuoi, cliccando sul tasto \"Ricomincia\" (freccia curva che torna indietro).\n\nI problemi richiedono di scrivere un **singolo** programma a blocchi, che viene valutato **contemporaneamente** su più livelli.\nQuindi attenzione che non puoi scrivere programmi diversi per i diversi livelli, ma uno solo!\nPer ciascun livello correttamente risolto di ciascun problema, otterrai _5 punti_.\n\nQuando termini la lezione, ti consigliamo di **leggere tutte le soluzioni spiegate**, anche dei problemi che avevi\ngià risolto correttamente: potresti scoprire modi diversi di risolvere quegli stessi problemi, e dei suggerimenti\nche ti potrebbero tornare utili per altri problemi simili che troverai in futuro!","import { NoAuth } from \"@olinfo/quizms/student\";\n\nimport Statement from \"./contest/contest.mdx\";\nimport Header from \"./header.md\";\n\nexport const metadata = {\n  title: \"Corso di Programmazione\",\n  description: \"Corso di Programmazione a Blocchi per i Giochi di Fibonacci\",\n};\n\nexport default function App() {\n  return (\n    <NoAuth contestLongName=\"\" contestName=\"Corso di Programmazione\" duration={5760}>\n      <Header />\n      <Statement />\n    </NoAuth>\n  );\n}\n"],"names":["toolbox","Visualizer","variables","state","colors","ref","useRef","useEffect","container","y","i","jsxs","Canvas","range","px","py","rotation","jsx","Rectangle","Sprite","stairs","bunny","Variables","_jsx","Equation","_jsxs","_components","Code","customBlocks","initialBlocks","testcases","Fragment","crate","clsx","carrot","rank","delta","crateplus","metadata","App","NoAuth","Header","Statement"],"mappings":"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"}