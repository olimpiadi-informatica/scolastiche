{"version":3,"file":"3fa06a59-page.js","sources":["../../../../src/fibonacci-corso/1-blocchi-esecuzione-e-ripeti-n/contest/s-1-salta-tutto-caso-singolo/toolbox.ts","../../../../src/fibonacci-corso/1-blocchi-esecuzione-e-ripeti-n/contest/s-1-salta-tutto-caso-singolo/visualizer.jsx","../../../../src/fibonacci-corso/1-blocchi-esecuzione-e-ripeti-n/contest/s-1-salta-tutto-caso-singolo/question.mdx","../../../../src/fibonacci-corso/1-blocchi-esecuzione-e-ripeti-n/contest/contest.mdx","../../../../src/fibonacci-corso/1-blocchi-esecuzione-e-ripeti-n/header.md","../../../../src/fibonacci-corso/1-blocchi-esecuzione-e-ripeti-n/page.jsx"],"sourcesContent":["import type { ToolboxInfo } from \"blockly/core/utils/toolbox\";\n\nexport const toolbox: ToolboxInfo = {\n  kind: \"categoryToolbox\",\n  contents: [\n  ],\n};\n","\"use client\";\n\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=66\";\nimport flag from \"./asy/flag.asy?w=80\";\nimport flatRock from \"./asy/flat_rock.asy?w=120\";\nimport rock from \"./asy/rock.asy?w=120\";\n\nexport default function Visualizer({ variables, state }) {\n  if (state.N > 50) {\n    return (\n      <div className=\"text-slate-800 p-4\">\n        La visualizzazione è disponibile solo per i primi 5 livelli.\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Canvas scale={130}>\n        {range(state.N + 2).map((i) => {\n          return (\n            <Sprite\n              key={i}\n              src={state.rocks[i] ? rock : flatRock}\n              alt={state.rocks[i] ? \"ostacolo\" : \"percorso\"}\n              x={i}\n              y={state.rocks[i] ? 0.9 : 1.5}\n            />\n          );\n        })}\n        <Sprite src={bunny} alt=\"Tip-Tap\" x={state.pos + 0.2} y={0.8 - state.flight} follow />\n        <Sprite src={flag} alt=\"Bandierina\" x={state.N - 0.6} y={0.9} />\n      </Canvas>\n      <Variables variables={{ ...variables }} />\n    </>\n  );\n}\n","import { toolbox } from \"./toolbox.ts\";\nimport initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s1.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nCarol si è iscritta ad una gara di corsa ad ostacoli!\nIl percorso si svolge su una sequenza di rocce, piatte o alte: si può stare solo sulle rocce piatte, mentre le rocce alte sono gli ostacoli.\nSe si avanza o atterra su una roccia alta si cade, perdendo la gara.\nLo scopo della gara è di raggiungere la bandierina finale.\nHai a disposizione questi blocchi:\n\n- `avanza`: avanza alla roccia successiva.\n- `salta`: salta oltre alla prossima roccia, atterrando su quella dopo.\n- `termina`: finisci la gara.\n\nNell'editor a blocchi qui sotto a destra, scrivi un programma che consenta ad Carol di completare la gara!\n\nPotrai trovare tutti i blocchi che ti servono cliccando sulla sezione _\"Esecuzione\"_, e trascinandoli nella finestra attaccandoli sotto al blocco _\"Inizia qui\"_ potrai comporre il tuo programma.\nPer provare la tua soluzione, premi sul pulsante verde con l'aeroplanino di carta: vedrai se è corretta, e potrai verificare il comportamento del programma tramite i\ntasti blu _\"Esegui/pausa\"_, _\"Esegui un blocco\"_, _\"Ricomincia da capo\"_.\n\n<Blockly\n  toolbox={toolbox}\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Secondo questo programma, il protagonista salta l'ostacolo davanti a se,\n> avanza alla roccia successiva, salta il secondo ostacolo, e avanza ancora\n> una volta per raggiungere la bandierina.\n\nPrima di passare alla prossima domanda, assicurati di aver risolto questa! Se l'hai risolta, dovresti vedere una _\"V\"_ verde in alto a sinistra, sopra la rappresentazione del livello, dopo la scritta **Livello**.","<Contest>\n\n<Section>\n  <Problem points={[5, 0, 0]}><S1SaltaTuttoCasoSingolo /></Problem>\n</Section>\n\n**Lezione in costruzione, continua...**\n\n</Contest>\n","# Corso di Programmazione a Blocchi\n\n## Lezione 1 - Blocchi Esecuzione e Ripeti N\n\nBenvenuto nel corso di programmazione a blocchi per la preparazione ai Giochi di Fibonacci!\n\nQuesta è la tua prima lezione, in cui ti faremo vedere:\n\n- come funzionano i problemi di programmazione a blocchi;\n- i più semplici blocchi di tipo \"esecuzione\";\n- il blocco \"ripeti N volte\".\n\n## Punteggio e struttura delle lezioni\n\nLe lezioni di questo corso contengono alcuni problemi di programmazione a blocchi, da risolvere in al massimo _4 giorni_. Appena avrai finito di lavorarci, potrai cliccare su \"Termina\" per vedere subito un riepilogo del punteggio che hai ottenuto, e le soluzioni spiegate di tutti i problemi! Se anche non lo farai, la lezione verrà terminata automaticamente dopo 4 giorni. Potrai comunque ricominciare la lezione quante volte vuoi, cliccando sul tasto \"Ricomincia\" (freccia curva che torna indietro).\n\nI problemi richiedono di scrivere un **singolo** programma a blocchi, che viene valutato **contemporaneamente** su più livelli.\nQuindi attenzione che non puoi scrivere programmi diversi per i diversi livelli, ma uno solo!\nPer ciascun livello correttamente risolto di ciascun problema, otterrai _5 punti_.\n","import { NoAuth } from \"@olinfo/quizms/student\";\n\nimport Statement from \"./contest/contest.mdx\";\nimport Header from \"./header.md\";\n\nexport const metadata = {\n  title: \"Corso di Programmazione\",\n  description: \"Corso di Programmazione a Blocchi per i Giochi di Fibonacci\",\n};\n\nexport default function App() {\n  return (\n    <NoAuth contestName=\"Corso di Programmazione\" duration={5760}>\n      <Header />\n      <Statement />\n    </NoAuth>\n  );\n}\n"],"names":["toolbox","Visualizer","variables","state","jsx","jsxs","Fragment","Canvas","range","i","Sprite","rock","flatRock","bunny","flag","Variables","_jsx","_components","customBlocks","initialBlocks","testcases","metadata","App","NoAuth","Header","Statement"],"mappings":";yTAEO,MAAMA,EAAuB,CAClC,KAAM,kBACN,SAAU,CAAA,CAEZ,61DCKA,SAAwBC,EAAW,CAAE,UAAAC,EAAW,MAAAC,GAAS,CACnD,OAAAA,EAAM,EAAI,GAETC,EAAAA,IAAA,MAAA,CAAI,UAAU,qBAAqB,SAEpC,+DAAA,EAMAC,EAAA,KAAAC,WAAA,CAAA,SAAA,CAACD,EAAAA,KAAAE,EAAA,CAAO,MAAO,IACZ,SAAA,CAAAC,EAAML,EAAM,EAAI,CAAC,EAAE,IAAKM,GAErBL,EAAA,IAACM,EAAA,CAEC,IAAKP,EAAM,MAAMM,CAAC,EAAIE,EAAOC,EAC7B,IAAKT,EAAM,MAAMM,CAAC,EAAI,WAAa,WACnC,EAAGA,EACH,EAAGN,EAAM,MAAMM,CAAC,EAAI,GAAM,GAAA,EAJrBA,CAKP,CAEH,EACAL,EAAA,IAAAM,EAAA,CAAO,IAAKG,EAAO,IAAI,UAAU,EAAGV,EAAM,IAAM,GAAK,EAAG,GAAMA,EAAM,OAAQ,OAAM,GAAC,EACpFC,EAAAA,IAACM,EAAO,CAAA,IAAKI,EAAM,IAAI,aAAa,EAAGX,EAAM,EAAI,GAAK,EAAG,EAAK,CAAA,CAAA,EAChE,QACCY,EAAU,CAAA,UAAW,CAAE,GAAGb,EAAa,CAAA,CAAA,EAC1C,CAEJ,8QClCA,SAAA;AAAA;AAAA;AAAA;AAAA;yGAMU,CAAA,EAAA,kCAAA;wGACD,CAAA,EAAA,gEAAA;0GACE,CAAA,EAAA,oBAAA;gBAEX,SAAA,2HAEA,SAAA,CAAA,yEAAAc,MAAAC,EAAA,GAAA,CAAuE,SAAA,cAAa,CAAA,EAAA,iEAAAD,MAAAC,EAAA,GAAA,CAA+D,SAAA,cAAa,CAAA,EAAA;AAAA;AAAA,YAAAD,MAAAC,EAAA,GAAA,CAErJ,SAAA,gBAAe,CAAA,EAAA,KAAAD,MAAAC,EAAA,GAAA,CAAG,SAAA,oBAAmB,CAAA,EAAA,KAAAD,MAAAC,EAAA,GAAA,CAAG,SAAA,sBAAqB,CAAA,EAAA,GAAA,aAG7DjB,QAAAA,EACKkB,aAAAA,EACCC,cAAAA,EACJC,UAAAA,EACCnB,WAAAA,mCAGZ,SAAA,sJAIA,SAAA;AAAA;AAAA,2DAIF,SAAA,CAAA,oHAAAe,MAAAC,EAAA,GAAA,CAAkH,SAAA,KAAI,CAAA,EAAA,qFAAAD,MAAAC,EAAA,OAAA,CAAoF,SAAA,SAAS,CAAA,EAAA,GAAA,qjBCnC/L,OAAA,CAAA,EAAG,EAAG,CAAA,oEAGxB,SAAA,qdCNA,SAAA;cAEC,SAAA;aAEH,SAAA;aAEA,SAAA;;cAEE,SAAA;cACA,SAAA;cACA,SAAA;;cAEC,SAAA;cAEH,SAAA,CAAA,iHAAAD,MAAAC,EAAA,GAAA,CAA+G,SAAA,UAAS,CAAA,EAAA,+XAAA;cAExH,SAAA,CAAA,wCAAAD,MAAAC,EAAA,OAAA,CAAuC,SAAA,SAAS,CAAA,EAAA,4CAAAD,MAAAC,EAAA,OAAA,CAA2C,SAAA,oBAAoB,CAAA,EAAA;AAAA;AAAA,0EAAAD,MAAAC,EAAA,GAAA,CAEtC,SAAA,SAAQ,CAAA,EAAA,GAAA,yHCb1E,MAAMI,EAAW,CACtB,MAAO,0BACP,YAAa,6DACf,EAEA,SAAwBC,GAAM,CAC5B,OACGjB,EAAAA,KAAAkB,EAAA,CAAO,YAAY,0BAA0B,SAAU,KACtD,SAAA,CAAAnB,EAAA,IAACoB,EAAO,EAAA,QACPC,EAAU,CAAA,CAAA,CAAA,EACb,CAEJ"}