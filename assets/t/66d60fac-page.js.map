{"version":3,"file":"66d60fac-page.js","sources":["../../../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/p-1-sequenza/question.md","../../../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/s-1-apri-porte/visualizer.jsx","../../../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/s-1-apri-porte/question.mdx","../../../../src/fibonacci-primarie/2023-seconda-fase-demo/contest/contest.mdx","../../../../src/fibonacci-primarie/2023-seconda-fase-demo/header.md","../../../../src/fibonacci-primarie/2023-seconda-fase-demo/page.tsx"],"sourcesContent":["Quali dei tre procedimenti consentono a Tip-Tap di prepararsi un piatto di carote? All'inizio piatto e carote sono nella dispensa, e alla fine devono trovarsi entrambi sul suo tavolo.\n\n![test](code.asy)\n\n- [x] Solo 1\n- [ ] Solo 2\n- [ ] Solo 3\n- [ ] 1 e 2\n- [ ] 2 e 3\n\n> Il procedimento 1 consente a Tip-Tap di preparare un piatto di carote, portando prima il piatto e poi le carote dalla dispensa al tavolo. Il procedimento 2 non funziona, perché impone a Tip-Tap di posare il piatto prima di averlo preso. Il procedimento 3 non funziona, perché impone a Tip-Tap di prendere il piatto mentre si trova al tavolo, anche se il piatto si trova nella dispensa.\n","\"use client\";\n\nimport { Fragment } from \"react\";\n\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=66\";\nimport carrot from \"./asy/carrot.asy?w=40\";\nimport closedDoor from \"./asy/closed-door.asy?w=55\";\nimport openedDoor from \"./asy/opened-door.asy?w=100\";\nimport rock from \"./asy/rock.asy?w=93\";\n\nexport default function Visualizer({ variables, state }) {\n  return (\n    <>\n      <Canvas scale={130}>\n        {range(state.N).map((i) => (\n          <Fragment key={i}>\n            {!!state.door[i] &&\n              (state.open[i] ? (\n                <Sprite src={openedDoor} alt=\"Porta aperta\" x={i + 0.77} y={-0.23} />\n              ) : (\n                <Sprite src={closedDoor} alt=\"Porta chiusa\" x={i + 0.65} y={0} />\n              ))}\n          </Fragment>\n        ))}\n        {range(state.N + 1).map((i) => (\n          <Sprite key={i} src={rock} alt=\"Sasso\" x={i} y={0.92} />\n        ))}\n        <Sprite src={bunny} alt=\"Bunny\" x={state.pos + 0.15} y={0.15} follow />\n        <Sprite\n          src={carrot}\n          alt=\"Carota\"\n          x={state.N + (state.eaten ? 0.43 : 0.46)}\n          y={state.eaten ? 0.37 : 0.77}\n        />\n      </Canvas>\n      <Variables variables={variables} />\n    </>\n  );\n}\n","import initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s1.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\n\nTip-Tap vorrebbe tanto mangiare la sua carota, prima però deve raggiungerla!\nA separarlo dal suo obiettivo ci sono $N$ rocce, alcune divise da porte chiuse.\nTip-Tap sa compiere le seguenti azioni:\n\n- `avanza`: salta alla roccia più vicina a destra, solo se non c'è una porta chiusa in mezzo.\n- `vedi porta chiusa`: condizione vera se di fianco a te c'è una porta chiusa.\n- `apri porta`: apri la porta a destra, ma solo se è di fianco a te.\n- `mangia carota`: mangia la carota a destra (solo se è di fianco a te) e termina il programma.\n\nScrivi un programma che consenta a Tip-Tap di mangiare sempre la carota!\n\n<Blockly\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  debug={{ logBlocks: false, logJs: false, logVariables: false }}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Secondo questo programma, per ognuno degli $N$ passi che Tip-Tap deve fare, il protagonista\n> controlla innanzitutto se vede una porta chiusa. Se la vede, allora la apre; e poi in ogni caso\n> avanza alla roccia successiva. Completati tutti gli $N$ passi, Tip-Tap procede quindi a mangiare la carota.\n","<Contest>\n\n## Sezione 1: procedimenti procedurali\n\n<Section>\n  <Problem points={[5, 1, 0]}><P1Sequenza /></Problem>\n  <Problem points={[5, 1, 0]}><P2Condizioni /></Problem>\n  <Problem points={[5, 1, 0]}><P3Mediana /></Problem>\n</Section>\n\n## Sezione 2: programmazione\n\n<Section>\n  <Problem points={[5, 0, 0]}><S1ApriPorte /></Problem>\n  <Problem points={[5, 0, 0]}><S2AlzaTorre /></Problem>\n  <Problem points={[5, 0, 0]}><S3GiraRuota /></Problem>\n</Section>\n\n</Contest>\n","# Giochi di Fibonacci 2023/2024\n\n## Allenamento per la Fase II - Scuole primarie\n\nQuesta prova contiene _6 domande_ da risolvere in _100 minuti_.\nLe domande sono a **scelta multipla** o a **blocchi**, e sono divise in due parti:\n\n- domande di interpretazione di **procedimenti procedurali** come programmi a blocchi, e\n- domande di **programmazione** tramite blocchi.\n\nIn entrambe le parti, le domande sono ordinate per difficoltà crescente.\n**Attento che la difficoltà è soggettiva!** Se stai passando tanto tempo cercando di risolvere una domanda, prova a passare ad altre domande e altre categorie!\n\n## Punteggio\n\nTutte le domande a _scelta multipla_ hanno 5 opzioni, di cui **solo una** è corretta. Il punteggio che puoi ottenere è:\n\n- 5 punti per una risposta _corretta_;\n- 1 punto per una risposta _non data_;\n- 0 punti per una risposta _sbagliata_.\n\nLe domande a _blocchi_ richiedono di scrivere un singolo programma a blocchi, che viene valutato su tre diversi livelli.\nPer ciascuna domanda e per ciascun livello, Il punteggio che puoi ottenere è:\n\n- 5 punti se il programma produce la risposta _corretta_;\n- 0 punti se il programma produce una risposta _sbagliata_.\n\nQuindi ogni domanda a blocchi può valere fino a 15 punti in totale.\n","import { NoAuth } from \"@olinfo/quizms/student\";\n\nimport Statement from \"./contest/contest.mdx\";\nimport Header from \"./header.md\";\n\nexport const metadata = {\n  title: \"Giochi di Fibonacci\",\n  description:\n    \"Prova di allenamento per la seconda fase dei Giochi di Fibonacci 2023/2024 per le scuole primarie\",\n};\n\nexport default function App() {\n  return (\n    <NoAuth contestLongName=\"\" contestName=\"Giochi di Fibonacci\" duration={100}>\n      <Header />\n      <Statement />\n    </NoAuth>\n  );\n}\n"],"names":["Visualizer","variables","state","jsxs","Fragment","Canvas","range","jsx","Sprite","openedDoor","closedDoor","rock","bunny","carrot","Variables","_jsx","Equation","customBlocks","initialBlocks","testcases","logBlocks","logJs","logVariables","_components","metadata","App","NoAuth","Header","Statement"],"mappings":"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"}