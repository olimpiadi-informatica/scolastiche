{"version":3,"file":"adeea1c8-page.js","sources":["../../../../src/scolastiche/2022/contest/a-2-max-meno-min/question.mdx","../../../../src/scolastiche/2022/contest/a-1-componenti-connesse/question.mdx","../../../../src/scolastiche/2022/contest/a-3-due-scatole/question.mdx","../../../../src/scolastiche/2022/contest/a-6-rettangoli/question.mdx","../../../../src/scolastiche/2022/contest/m-3-cavalieri-furfanti/question.md","../../../../src/scolastiche/2022/contest/m-5-somme-coppie/question.md","../../../../src/scolastiche/2022/contest/m-4-domino/question.md","../../../../src/scolastiche/2022/contest/m-6-numero-spaccato-in-4/question.mdx","../../../../src/scolastiche/2022/contest/m-7-numeri-colorati/question.md","../../../../src/scolastiche/2022/contest/m-8-potenze-di-10/question.mdx","../../../../src/scolastiche/2022/contest/p-2-stampa-interi-lessicografico/question.md","../../../../src/scolastiche/2022/contest/p-5-mediana/question.md","../../../../src/scolastiche/2022/contest/p-4-sequenza-alternante/question.mdx","../../../../src/scolastiche/2022/contest/p-7-invariante/question.md","../../../../src/scolastiche/2022/contest/p-8-incrementa-di-7/question.md","../../../../src/scolastiche/2022/contest/p-9-trova-elemento/question.mdx","../../../../src/scolastiche/2022/contest/contest.mdx","../../../../src/scolastiche/2022/header.md","../../../../src/scolastiche/2022/page.jsx"],"sourcesContent":["import variants from \"./variants.py\";\n\nConsidera la seguente sequenza formata da $12$ numeri interi distinti compresi tra $1$ e $1000$:\n\n$$\n\\js{numbers.join(\", \\\\; \")}\n$$\n\nUn _intervallo_ è una sequenza di numeri consecutivi nella sequenza data (formata da almeno un numero). Dato un intervallo $J$, indichiamo con $\\max(J)$ e $\\min(J)$, rispettivamente, il massimo e minimo valore di $J$. Ad esempio, se $J = [\\js{numbers.slice(3, 7).join(\", \\\\; \")}]$ (l'intervallo dal quarto al settimo numero) si ha $\\max(J) = \\js{Math.max(...numbers.slice(3, 7))}$ e $\\min(J) = \\js{Math.min(...numbers.slice(3, 7))}$.\n\nPer ogni $k = 0, \\, \\dots, \\, 1000$, chiamiamo $L_k$ la **massima** lunghezza di un intervallo $J$ tale che $\\max(J) - \\min(J) \\le k$. Nota che $J$ può essere formato anche da un solo numero, nel qual caso $\\max(J) = \\min(J)$.\n\nQuanto vale $L_{\\js{k}}$?\n\n?> {ans1}\n\n> La risposta è **{ans1}**.\n>\n> Per calcolare $L_{\\js{k}}$, possiamo scorrere tutti i possibili intervalli $J$, per ciascuno calcolare $\\max(J) - \\min(J)$, e considerare solo quelli per cui questo valore non supera $\\js{k}$. Il valore cercato sarà la massima lunghezza di un intervallo considerato.\n>\n> Gli intervalli sono, in totale, $12 \\cdot 13 = 156$, quindi scorrerli tutti è un processo lento ma fattibile. Per velocizzarlo si possono fare osservazioni che riducono di molto il numero di intervalli da considerare. Per esempio, possiamo iterare su tutte le **coppie** di numeri della sequenza, diciamo $(x, \\, y)$, imponendo che $x$ sia il minimo dell'intervallo e $y$ il massimo. Per la maggior parte delle coppie, questo non sarà possibile, perché tra $x$ e $y$ c'è un numero più piccolo di $x$ o più grande di $y$ (come accade per la coppia $(\\js{numbers[2]}, \\, \\js{numbers[7]})$). Per le altre coppie, controlliamo se $y - x \\le \\js{k}$ e, in quel caso, troviamo la massima lunghezza di un intervallo che contiene $x$ e $y$ e nessun numero minore di $x$ o maggiore di $y$.\n>\n> Qualunque sia la strategia impiegata, alla fine si determina che l'intervallo più lungo che soddisfa la condizione è $J = [\\js{J.join(\", \\\\; \")}$, che ha lunghezza $\\js{ans1}$ (e $\\max(J) - \\min(J) = \\js{Math.max(...J) - Math.min(...J)}$).\n>\n> ![Statistiche risposte]({i}-0.svg)\n\n---\n\nImmagina di scrivere su un foglio i numeri $L_0, \\, L_1, \\, \\dots, \\, L_{1000}$.\n\nQuanti numeri **distinti** compaiono sul foglio?\n\n?> {ans2}\n\n> La risposta è **{ans2}**.\n>\n> Per prima cosa, occorre osservare che la risposta non cambia se ci restringiamo ai $k$ che coincidono **esattamente** con $\\max(J) - \\min(J)$ per un qualche intervallo $J$. Questo perché per tutti gli altri $k$ il valore di $L_k$ è sicuramente uguale a uno dei precedenti. Infatti, sia $J$ un intervallo di lunghezza massima tale che $\\max(J) - \\min(J) \\le k$. Allora, posto $k' = \\max(J) - \\min(J)$, si ha $L_k = L_{k'}$.\n>\n> A questo punto l'idea è simile a quella della parte precedente, ma più raffinata. Scorriamo tutti gli intervalli $J$, per ciascuno calcoliamo il numero $k = \\max(J) - \\min(J)$ e, su un foglio, scriviamo $k$ e la lunghezza di $J$. Alla fine, raggruppiamo le coppie con lo stesso $k$, e in ogni gruppo prendiamo il valore massimo della lunghezza dell'intervallo, che coincide con $L_k$. La risposta è il numero di valori di $L_k$ distinti tra tutti i gruppi, che risulta essere $\\js{ans2}$.\n>\n> Con la stessa strategia di prima si può velocizzare molto il processo di iterazione sugli intervalli.\n>\n> ![Statistiche risposte]({i}-1.svg)\n","import variants from \"./variants.py\";\n\nLa città di Remontagna ha $10$ piazze collegate da strade a doppio senso.\n\nNella figura qui sotto, le piazze sono rappresentate da cerchi. A ciascuna piazza è associata una lettera dell'alfabeto da $\\textsf{A}$ a $\\textsf{J}$, in modo univoco.\n\nLe strade sono di tre tipi:\n\n- _vie_, evidenziate in linea continua rossa nella figura;\n- _viali_, evidenziati in doppia linea verde nella figura;\n- _sentieri_, evidenziati in linea tratteggiata blu nella figura.\n\n![La mappa di Remontagna](city.asy?v=variants.py)\n\nQuante sono le coppie di piazze **distinte** che sono raggiungibili l'una dall'altra **usando solo vie** (strade in linea continua rossa)? Le coppie si intendono **non ordinate**: ad esempio, le coppie $(\\textsf{A}, \\, \\textsf{B})$ e $(\\textsf{B}, \\, \\textsf{A})$ vanno contate una sola volta.\n\n?> {ans1}\n\n> La risposta è **{ans1}**.\n>\n> Le piazze si possono dividere in gruppi tali che due piazze sono nello stesso gruppo se e solo se si possono raggiungere l'una dall'altra solo attraverso vie. (In gergo algoritmico, si dice che la città è un _grafo_ e i gruppi di piazze sono _componenti connesse_.) In questo caso, ci sono $\\js{cc.length}$ gruppi contenenti, rispettivamente, $\\js{cc.join(\", \\\\,\")}$ piazze.\n>\n> Si tratta ora di contare le coppie di piazze che appartengono allo stesso gruppo. Se un gruppo contiene $x$ piazze, le possibili coppie in quel gruppo sono $\\frac{x \\cdot (x - 1)}{2}$: infatti, per ogni piazza ci sono $x - 1$ altre piazze con cui si può formare una coppia; ma così facendo ogni coppia viene contata due volte, e quindi bisogna dimezzare.\n>\n> La risposta è quindi $\\js{sum_fracs} = \\js{ans1}$.\n>\n> ![Statistiche risposte]({i}-0.svg)\n\n---\n\nUn _bel percorso_ è un percorso formato da un numero **pari** di strade con la seguente proprietà: le prime due strade sono dello stesso tipo; la terza e la quarta strada sono dello stesso tipo; e così via, fino alle ultime due strade che sono anch'esse dello stesso tipo. Nota che un _bel percorso_ può passare più volte per alcune strade e piazze.\n\nAd esempio, un bel percorso è $\\textsf{\\js{good_path}}$, ovvero quello che parte dalla piazza $\\textsf{\\js{good_path[0]}}$, passa per le piazze $\\textsf{\\js{good_path[1]}}$, $\\textsf{\\js{good_path[2]}}$, $\\textsf{\\js{good_path[3]}}$ e arriva alla piazza $\\textsf{\\js{good_path[4]}}$. Infatti passa per $4$ strade, delle quali le prime due sono sentieri e le ultime due sono viali.\n\nAl contrario, $\\textsf{\\js{bad_path}}$ **non** è un bel percorso, poiché le prime due strade non sono dello stesso tipo.\n\nQuante sono le coppie di piazze **distinte** che si possono raggiungere l'una dall'altra attraverso un bel percorso? Anche in questo caso, indendiamo le coppie come **non ordinate**. Stavolta si possono usare tutti i tipi di strade.\n\n?> {ans2}\n\n> La risposta è **{ans2}**.\n>\n> Immaginiamo di aggiungere della strade _speciali_. Una strada speciale collega due piazze che possono essere raggiunte l'una dall'altra percorrendo **esattamente** due strade normali dello stesso tipo (cioè due vie, due viali o due sentieri). Le strade speciali sono mostrate in figura:\n>\n> ![Strade speciali evidenziate sulla mappa](special-roads.asy?v=variants.py)\n>\n> Ad esempio, c'è una strada speciale che collega le piazze $\\textsf{\\js{P}}$ e $\\textsf{\\js{Q}}$ perché si possono raggiungere l'una dall'altra attraversando due viali (e la piazza $\\textsf{\\js{R}}$).\n>\n> Notiamo che un bel percorso non è altro che un percorso costituito da strade speciali. Quindi, il problema a cui ci siamo ridotti è lo stesso della prima parte, dove però consideriamo le strade speciali invece delle vie. I gruppi di piazze, in questo caso, sono formati da $\\js{cc_special.join(\", \\\\,\")}$ piazze, e la risposta è $\\js{sum_fracs_special} = \\js{ans2}$.\n>\n> ![Statistiche risposte]({i}-1.svg)\n","import variants from \"./variants.py\";\n\nHai comprato $9$ barrette di cioccolato, i cui pesi (in una certa unità di misura) sono i seguenti:\n\n$$\n\\js{weights.map(w => w.toString()).join(\", \\\\; \")}\n$$\n\nCome premio per il tuo acquisto ingente, ti è stata offerta in regalo una maxi barretta di peso $2022$ (nella stessa unità di misura).\n\nVuoi distribuire le $10$ barrette in due scatole, in modo che ci siano **esattamente** $5$ barrette per scatola. Poi darai una scatola a tuo fratello e terrai l'altra per te. Sai che tuo fratello sceglierà sicuramente la scatola con barrette di peso totale maggiore (se i pesi delle due scatole sono uguali, ne sceglie una qualunque). Ovviamente, vorresti tenere per te il **massimo peso** possibile.\n\nSe scegli la distribuzione migliore, qual è il peso totale delle barrette di cioccolato nella **scatola che resta a te**?\n\n?> {ans1}\n\n> La risposta è $\\js{ans1}$.\n>\n> La maxi barretta ha un peso chiaramente superiore alla somma degli altri $9$. Quindi, qualunque sia la distribuzione delle barrette nelle scatole, tuo fratello sceglierà sempre la scatola che contiene la maxi barretta e a te rimarrà l'altra.\n>\n> La distribuzione più conveniente è allora quella che massimizza il peso nella scatola che non contiene la maxi barretta: in particolare, conviene mettere in tale scatola le $5$ barrette (normali) più pesanti, cioè quelle di pesi $\\js{w[0]}$, $\\js{w[1]}$, $\\js{w[2]}$, $\\js{w[3]}$ e $\\js{w[4]}$. La loro somma è $\\js{ans1}$.\n>\n> ![Statistiche risposte]({i}-0.svg)\n\n---\n\nTuttavia, prima di distribuire le barrette ti viene voglia di cioccolato, e decidi di mangiare un pezzo della maxi barretta di peso $2022$. Per non destare sospetti, vuoi che la risposta alla domanda 1 rimanga la stessa anche dopo aver mangiato parte della maxi barretta.\n\nQual è il **massimo peso** di un pezzo di maxi barretta che puoi mangiare senza che la risposta alla domanda precedente cambi?\n\n?> {ans2}\n\n> La risposta è $\\js{ans2}$.\n>\n> Se la scatola che ti rimane ha peso $\\js{ans1}$, quella che prende tuo fratello deve avere almeno lo stesso peso, e pertanto la somma totale dei pesi delle barrette (compresa la maxi barretta parzialmente mangiata) deve essere maggiore o uguale di $2 \\cdot \\js{ans1} = \\js{2 * ans1}$. Sottraendo a tale quantità la somma dei pesi delle $9$ barrette normali, si ottiene che il peso finale della maxi barretta deve essere almeno $\\js{2 * ans1} - \\js{sumWeights} = \\js{diff}$.\n>\n> D'altra parte, se la maxi barretta ha peso esattamente $\\js{diff}$, possiamo suddividere le barrette esattamente come nella parte precedente, ovvero mettendo le $5$ barrette **normali** più pesanti in una scatola, e le altre nell'altra scatola. Così facendo, le due scatole hanno lo stesso peso di $\\js{ans1}$, e quindi la risposta non cambia.\n>\n> Pertanto il peso massimo che puoi mangiare è $2022 - \\js{diff} = \\js{ans2}$.\n>\n> ![Statistiche risposte]({i}-1.svg)\n","import variants from \"./variants.py\";\n\nTi viene data la tabella $8 \\times 8$ mostrata sotto, che contiene tutti i numeri interi da $1$ a $64$:\n\n![Tabella 8 per 8 riempita con i numeri da 1 a 64](table.asy?s=1.5&v=variants.py)\n\nUn _rettangolo_ è una sotto-tabella ottenuta intersecando un insieme di righe consecutive e un insieme di colonne consecutive. Nota che anche una singola casella è un rettangolo. Diciamo che un rettangolo è _interessante_ se, detto $N$ il numero di caselle da cui è formato, esso contiene tutti i numeri da $1$ a $N + 1$, **tranne uno**.\n\nAd esempio, il rettangolo evidenziato nella figura che segue è interessante: esso è formato da $N = 6$ caselle e contiene i numeri $\\js{nums}$, ovvero tutti i numeri tra $1$ e $N + 1 = 7$ tranne il $\\js{t}$.\n\n![Stessa tabella di prima, in cui è evidenziato un rettangolo 2 per 3](highlighted-rectangle.asy?s=1.5&v=variants.py)\n\nQuanti sono i rettangoli interessanti formati da **al massimo** $5$ caselle?\n\n?> {ans1}\n\n> La risposta è **{ans1}**.\n>\n> Nella seconda parte mostreremo una strategia che funziona in generale, ma per ora ne descriviamo una più semplice che permette di calcolare la risposta ristretta a rettangoli \"piccoli\".\n>\n> I rettangoli interessanti formati da al massimo $5$ caselle sicuramente contengono solo numeri minori o uguali di $6$, e quindi sono interamente contenuti nella regione evidenziata in grigio:\n>\n> ![Tabella con numeri minori o uguali di 6 colorati in grigio](highlighted-small.asy?s=1.5&v=variants.py)\n>\n> Pertanto, possiamo controllare uno per uno tutti questi rettangoli, e per ciascuno determinare se è interessante oppure no. Nota, in particolare, che i rettangoli $1 \\times 1$ formati dalla singola casella con il numero $1$ e dalla singola casella con il numero $2$ sono sicuramente interessanti (perché?).\n>\n> In totale si contano $\\js{ans1}$ rettangoli interessanti.\n>\n> ![Statistiche risposte]({i}-0.svg)\n\n---\n\nQuanti sono i rettangoli interessanti formati da **almeno** $6$ caselle?\n\n?> {ans2}\n\n> La risposta è **{ans2}**.\n>\n> In questo caso, provare tutti i rettangoli è decisamente troppo dispendioso in termini di tempo. Tuttavia, ragionando come prima, si può osservare che i rettangoli interessanti formati da $k$ caselle sono sicuramente contenuti nel sottoinsieme della tabella formato dalle caselle $1, \\, 2, \\, \\dots, \\, k + 1$. Più precisamente, tali rettangoli devono consistere di tutte queste caselle tranne una.\n>\n> Ad esempio, i rettangoli formati da $k = \\js{k}$ caselle sono contenuti nella regione evidenziata in grigio nella figura qui sotto (costituita da tutti i numeri tra $1$ e $\\js{k+1}$), ed è facile notare (a colpo d'occhio) che c'è esattamente un tale rettangolo formato da esattamente $\\js{k}$ caselle, quello con il bordo spesso.\n>\n> ![Tabella con numeri da 1 a k+1 colorati in grigio e rettangolo evidenziato con bordo spesso](highlighted-big.asy?s=1.5&v=variants.py)\n>\n> (Per molti valori di $k$, ovviamente, non ci sarà nessun rettangolo interessante formato da $k$ caselle.)\n>\n> Un modo per fare questa operazione velocemente \"su carta\" è annerire le caselle della tabella una alla volta, partendo da quella con il numero $1$ e procedendo in ordine crescente. Ogni volta che anneriamo una casella, controlliamo se ci sono rettangoli che consistono di tutte le caselle annerite tranne una, e in tal caso quanti sono (ricordandoci che dobbiamo considerare solo i rettangoli interessanti con almeno $6$ caselle).\n>\n> In totale, si verifica che ci sono $\\js{ans2}$ rettangoli interessanti.\n>\n> ![Statistiche risposte]({i}-1.svg)\n","L'Isola delle Olimpiadi di Informatica ha $999$ abitanti, ognuno dei quali è un cavaliere o un furfante. I cavalieri dicono sempre la verità, mentre i furfanti dicono sempre e solo il falso. Un giornalista arriva sull'isola e parla con un abitante che è parte del **gruppo più numeroso** tra i due, chiedendogli: \"Cosa puoi dirci sugli abitanti dell'isola?\".\n\nQuale o quali tra le seguenti affermazioni sono risposte possibili?\n\n1. \"Ci sono più cavalieri che furfanti\"\n2. \"Ci sono più furfanti che cavalieri\"\n3. \"I cavalieri sono tanti quanti i furfanti\"\n\n- [x] Solo la $1$ e la $3$\n- [ ] Solo la $1$\n- [ ] Solo la $2$\n- [ ] Solo la $2$ e la $3$\n- [ ] Tutte le risposte sono possibili\n\n> La risposta è **Solo la $1$ e la $3$**.\n>\n> L'affermazione $1$ può essere detta sia da un cavaliere (nel qual caso sarebbe vera: il cavaliere appartiene al gruppo più numeroso, e quindi ci sono più cavalieri che furfanti), sia da un furfante (nel qual caso sarebbe falsa: il furfante appartiene al gruppo più numeroso, e quindi ci sono più furfanti che cavalieri).\n>\n> L'affermazione $3$ può essere detta da un furfante: infatti, essendo gli abitanti $999$ (che è un numero dispari), l'affermazione è sicuramente falsa.\n>\n> L'affermazione $2$ non può essere detta né da un cavaliere, né da un furfante: se venisse detta da un cavaliere, il gruppo più numeroso sarebbe quello dei cavalieri, e l'affermazione sarebbe falsa; se venisse detta da un furfante, il gruppo più numeroso sarebbe quello dei furfanti, e l'affermazione sarebbe vera.\n>\n> ![Statistiche risposte](default.svg)\n","Roberto ha una lista di $n \\geq 2$ numeri **interi positivi distinti**, dove $n$ è ignoto. Per ogni possibile coppia di numeri distinti, ne scrive la somma su una lavagna. Poi, se un numero è presente più di una volta, ne elimina tutte le occorrenze **tranne una**. Alla fine, rimangono $k$ numeri sulla lavagna.\n\nQuale tra i seguenti **non può** essere il valore di $k$?\n\n- [x] $4$\n- [ ] $5$\n- [ ] $6$\n- [ ] $7$\n- [ ] $8$\n\n> La risposta è $4$.\n>\n> Se Roberto ha al massimo $3$ numeri (cioè $n \\le 3$) le possibili coppie di numeri sono al più $3$, e quindi anche $k$ lo è. Supponiamo, invece, che $n \\ge 4$, e siano $a < b < c < d$ quattro dei numeri che ha Roberto. Le somme $a + b$, $a + c$, $a + d$, $b + d$, $c + d$ sono tutte distinte, e anzi, sono una minore della successiva: ad esempio, $a + b < a + c$ è equivalente a $b < c$, e $a + d < b + d$ è equivalente a $a < b$. Quindi, in questo caso $k \\ge 5$. Questo dimostra che $k$ non può essere uguale a $4$.\n>\n> Anche se non necessario per risolvere l'esercizio, facciamo vedere come le risposte $5$, $6$, $7$ e $8$ siano tutte possibili.\n>\n> - Per $k = 5$, l'insieme di numeri $\\{1, \\, 2, \\, 3, \\, 4\\}$ ha come somme i numeri $3, \\, 4, \\, 5, \\, 6, \\, 7$.\n> - Per $k = 6$, l'insieme di numeri $\\{1, \\, 2, \\, 3, \\, 5\\}$ ha come somme i numeri $3, \\, 4, \\, 5, \\, 6, \\, 7, \\, 8$.\n> - Per $k = 7$, l'insieme di numeri $\\{1, \\, 2, \\, 3, \\, 4, \\, 5\\}$ ha come somme i numeri $3, \\, 4, \\, 5, \\, 6, \\, 7, \\, 8, \\, 9$.\n> - Per $k = 8$, l'insieme di numeri $\\{1, \\, 2, \\, 3, \\, 4, \\, 6\\}$ ha come somme i numeri $3, \\, 4, \\, 5, \\, 6, \\, 7, \\, 8, \\, 9, \\, 10$.\n>\n> ![Statistiche risposte](default.svg)\n","Una tessera del domino è un rettangolo $2 \\times 1$ composto da due quadrati, contenenti due numeri **distinti** tra $1$ e $6$ (rappresentati da pallini).\n\nSul tavolo sono presenti le due tessere mostrate di seguito. Hai inoltre a disposizione una quantità illimitata di ciascun tipo di tessera. Quanti modi ci sono di inserire **tre tessere** tra le due esistenti, in modo che ogni coppia di quadrati adiacenti appartenenti a tessere diverse contenga lo stesso numero? (Due modi si considerano distinti anche se usano le stesse tessere in ordine diverso.)\n\n![Le tessere 4-3 e 1-6, separate orizzontalmente dallo spazio di tre tessere](question.asy)\n\nAd esempio, un possibile modo di posizionare le tre tessere è il seguente:\n\n![Le tessere 4-3, 3-2, 2-5, 5-1, 1-6](example.asy)\n\n- [x] $21$\n- [ ] $36$\n- [ ] $19$\n- [ ] $25$\n- [ ] $30$\n\n> La risposta è $21$.\n>\n> Le tre tessere inserite devono essere della forma $4$--$x$, $x$--$y$ e $y$--$1$, dove $x$ e $y$ sono numeri incogniti soggetti alle condizioni $3 \\ne x$, $x \\ne y$ e $y \\ne 1$.\n>\n> La prima condizione è soddisfatta scegliendo $x$ tra i numeri da $1$ a $6$ diversi da $3$, ovvero per $5$ scelte di $x$. Allo stesso modo, la terza condizione è soddisfatta per $5$ scelte di $y$ (i numeri da $2$ a $6$). Quindi, se ignoriamo la seconda condizione, ci sono $5 \\cdot 5 = 25$ modi di scegliere $x$ e $y$. Di questi, quelli che non soddisfano la seconda condizione sono quelli in cui $x = y$, che sono $4$: infatti $x$ e $y$ non possono valere né $3$ né $1$, e pertanto vanno bene solo i $4$ valori $2, \\, 3, \\, 5, \\, 6$.\n>\n> La risposta si ottiene sottraendo questi $4$ casi dai $25$ contati prima, e quindi vale $25 - 4 = 21$.\n>\n> ![Statistiche risposte](default.svg)\n","import variants from \"./variants.py\";\n\nSandra prende il numero $\\js{n}$, ne spezza le cifre in $4$ parti tutte maggiori di $0$, e calcola la somma dei $4$ numeri ottenuti. Ad esempio, una possibile suddivisione è $\\js{exampleSplit[0]} + \\js{exampleSplit[1]} + \\js{exampleSplit[2]} + \\js{exampleSplit[3]} = \\js{exampleSum}$.\n\nSia $x$ la **massima** somma possibile. Qual è la somma delle cifre di $x$?\n\n- [x] $\\js{correct}$\n- [ ] $\\js{wrong[0]}$\n- [ ] $\\js{wrong[1]}$\n- [ ] $\\js{wrong[2]}$\n- [ ] $\\js{wrong[3]}$\n\n> La risposta è $\\js{correct}$.\n>\n> Affinché la somma sia massima, una delle tre parti in cui viene suddiviso il numero deve avere il numero massimo possibile di cifre (cioè $5$), e le altre tre parti devono essere tutte di una cifra. Ci sono $4$ modi di suddividere il numero in questo modo. Si possono provare tutti, oppure si può ulteriormente osservare che la somma massima $x$ si ottiene quando il pezzo di $5$ cifre ha il valore più alto possibile, che in questo caso è $\\js{maxPiece}$.\n>\n> Dunque $x = \\js{split.join(' + ')} = \\js{result}$, e la somma delle sue cifre è $\\js{correct}$.\n>\n> ![Statistiche risposte]({n}.svg)\n","---\nvariants:\n  - n: 10\n    k: 7\n    ns: [6, 13, 4, 7, 9]\n    ks: [3, 8, 2, 6, 7]\n  - n: 12\n    k: 8\n    ns: [8, 14, 5, 10, 11]\n    ks: [4, 9, 2, 7, 9]\n  - n: 14\n    k: 9\n    ns: [9, 17, 10, 7, 12]\n    ks: [4, 10, 7, 3, 8]\n  - n: 11\n    k: 7\n    ns: [6, 13, 7, 8, 9]\n    ks: [2, 8, 4, 5, 7]\n  - n: 13\n    k: 9\n    ns: [7, 14, 11, 10, 8]\n    ks: [3, 10, 9, 7, 5]\n---\n\nI numeri da $1$ a $2022$ sono stati colorati con $\\js{n}$ colori diversi, in modo che ogni gruppo di $\\js{n}$ numeri consecutivi contenga **almeno** $\\js{k}$ colori distinti. Quale delle seguenti affermazioni è necessariamente vera?\n\n- [x] Ogni gruppo di $\\js{ns[0]}$ numeri consecutivi contiene almeno $\\js{ks[0]}$ colori distinti\n- [ ] Ogni gruppo di $\\js{ns[1]}$ numeri consecutivi contiene almeno $\\js{ks[1]}$ colori distinti\n- [ ] Ogni gruppo di $\\js{ns[2]}$ numeri consecutivi contiene almeno $\\js{ks[2]}$ colori distinti\n- [ ] Ogni gruppo di $\\js{ns[3]}$ numeri consecutivi contiene almeno $\\js{ks[3]}$ colori distinti\n- [ ] Ogni gruppo di $\\js{ns[4]}$ numeri consecutivi contiene almeno $\\js{ks[4]}$ colori distinti\n\n> La riposta è **Ogni gruppo di $\\js{ns[0]}$ numeri consecutivi contiene almeno $\\js{ks[0]}$ colori distinti**.\n>\n> Tutte le opzioni sono della forma ``Ogni gruppo di $n$ numeri consecutivi contiene almeno $k$ colori distinti''. Facciamo vedere che quella con $n = \\js{ns[0]}$ e $k = \\js{ks[0]}$ è sempre vera. Procediamo per assurdo: supponiamo che esista un modo di colorare i numeri da $1$ a $2022$ (rispettando la regola del testo) che rende l'affermazione falsa. Allora esiste un gruppo di $\\js{ns[0]}$ numeri consecutivi che contiene meno di $\\js{ks[0]}$ colori distinti. Se estendiamo questo intervallo a sinistra e/o a destra di altri $\\js{n} - \\js{ns[0]} = \\js{n - ns[0]}$ numeri, il nuovo intervallo contiene $\\js{n}$ numeri e **al massimo** $\\js{ks[0]} - 1 + \\js{n - ns[0]} = \\js{ks[0] - 1 + n - ns[0]} < \\js{k}$ colori, che è una contraddizione.\n>\n> L'opzione con $n = \\js{ns[1]}$ e $k = \\js{ks[1]}$ è sbagliata perché, ad esempio, i numeri potrebbero essere stati colorati con esattamente $\\js{k}$ colori. Poiché $\\js{k} < \\js{ks[1]}$, in questo caso sicuramente l'affermazione non sarebbe vera.\n>\n> Per quanto riguarda le altre, facciamo vedere che, se $n - k < \\js{n} - \\js{k} = \\js{n - k}$, l'affermazione potrebbe non essere vera. Infatti, possiamo colorare i numeri nel modo che segue:\n>\n> - i primi $n - k + 2$ numeri con lo stesso colore;\n> - tutti i numeri successivi con altri $\\js{n - 1}$ colori, ripetuti a blocchi di $\\js{n - 1}$ sempre nello stesso ordine.\n>\n> È facile verificare che questa colorazione rispetta le condizioni del testo, ma i primi $n$ numeri contengono solo $k - 1$ colori distinti. Dato che, nelle tre opzioni rimaste, si ha sempre $n - k < {n - k}$, tali risposte non sono corrette.\n>\n> ![Statistiche risposte]({n},{k}.svg)\n","import variants from \"./variants.py\";\n\nHai a disposizione $\\js{n}$ palline da tennis, e vuoi dividerle in gruppi in modo che il numero di palline in ogni gruppo sia una potenza di $10$ (in altre parole, un numero della forma $10^k$ per un qualche $k \\geq 0$).\n\nQual è il numero minimo di gruppi che puoi realizzare utilizzando tutte le palline da tennis?\n\n- [x] $\\js{correct}$\n- [ ] $\\js{wrong[0]}$\n- [ ] $\\js{wrong[1]}$\n- [ ] $\\js{wrong[2]}$\n- [ ] $\\js{wrong[3]}$\n\n> La risposta è $\\js{correct}$.\n>\n> Il quesito chiede di determinare qual è il minimo numero di potenze di $10$ (eventualmente ripetute) che servono per sommare a $\\js{n}$.\n>\n> La rappresentazione decimale di un numero è un modo di scrivere tale numero come somma di potenze di $10$, ciascuna moltiplicata per la cifra corrispondente. Ad esempio, il numero dato è uguale a $\\js{decimal} = \\js{n}$. Quindi, sicuramente è sufficiente un numero di addendi pari alla somma delle cifre: $\\js{sumDigits} = \\js{correct}$.\n>\n> Per mostrare che non si può fare di meglio, si può ragionare così. Sicuramente non conviene usare più di $9$ potenze di $10$ con lo stesso esponente: infatti, se usassimo almeno $10$ volte l'addendo $10^k$, potremmo sostituirlo con una singola occorrenza di $10^{k + 1}$. D'altra parte, l'unico modo di scrivere un numero come somma di potenze di $10$ moltiplicate per coefficienti **minori o uguali di $9$** è la sua rappresentazione decimale!\n>\n> ![Statistiche risposte]({n}.svg)\n","---\nvariants:\n  - n: 30291\n    correct: 303\n    wrong: [30292, 3030, 3029]\n  - n: 83495\n    correct: 835\n    wrong: [83496, 8350, 8349]\n  - n: 77293\n    correct: 773\n    wrong: [77294, 7730, 7729]\n  - n: 67898\n    correct: 679\n    wrong: [67899, 6790, 6789]\n  - n: 55193\n    correct: 552\n    wrong: [55194, 5520, 5519]\n---\n\nConsidera la seguente funzione ricorsiva, che prende come argomento due interi `n` e `x`:\n\n```srs\nfunction print_numbers(n: integer, x: integer)\n    if x > n then\n        return\n    end if\n    output(x)\n    for i in [0 ... 10) do\n        if x != 0 or i != 0 then\n            print_numbers(n, 10 * x + i)\n        end if\n    end for\nend function\n```\n\nSupponiamo di chiamare `print_numbers({n}, 0)`. Quale numero viene stampato in output immediatamente dopo $\\js{n}$?\n\n- [x] $\\js{correct}$\n- [ ] $\\js{n}$ è l'ultimo numero stampato\n- [ ] $\\js{wrong[0]}$\n- [ ] $\\js{wrong[1]}$\n- [ ] $\\js{wrong[2]}$\n\n> La risposta è $\\js{correct}$.\n>\n> Si tratta di capire quali numeri stampa la funzione `print_numbers`, e in che ordine li stampa. Notiamo intanto che:\n>\n> - il valore di `n` è costante e uguale a $\\js{n}$;\n> - il valore di `x` è sempre maggiore o uguale di $0$;\n> - non vengono mai stampati numeri maggiori di $\\js{n}$, perché se `x` è maggiore di $\\js{n}$ la funzione ritorna immediatamente.\n>\n> Ora, l'osservazione cruciale è che, dopo aver stampato `x`, la funzione chiama se stessa con tutti i numeri ottenuti aggiungendo in fondo a `x` una cifra da $0$ a $9$ (è questo il significato dell'espressione `10 * x + i`). Ad esempio, se il valore di `x` è $28$, la funzione si chiama ricorsivamente passando (come secondo argomento) prima $280$, poi $281$, e così via fino a $289$.\n>\n> Allora, un numero $a$ viene stampato prima di un numero $b$ esattamente quando, scrivendo $a$ e $b$ in cifre, $a$ viene prima di $b$ in \"ordine alfabetico\". Quindi, per esempio, $3201$ viene prima di $39$ perché la prima cifra (da sinistra) è uguale, mentre la seconda è più piccola in $3201$. Inoltre, questa osservazione ci dice anche che tutti i numeri tra $0$ e $\\js{n}$ vengono stampati, prima o poi.\n>\n> Il numero che viene immediatamente dopo $\\js{n}$ in \"ordine alfabetico\" è $\\js{correct}$, come si può facilmente constatare. Nota che la risposta **non** è $\\js{wrong[0]}$, perché tale numero è maggiore di $\\js{n}$ e quindi non viene stampato.\n>\n> _Chiarimento:_ Qual è il significato dell'`if` con condizione `x != 0 or i != 0`? Se `x` è uguale a $0$ (cioè quando `print_numbers` viene chiamata per la prima volta) e `i` è anch'esso uguale a $0$, l'espressione `10 * x + i` vale di nuovo $0$. Quindi, se non escludessimo questo caso si entrerebbe in una ricorsione infinita!\n>\n> ![Statistiche risposte]({n}.svg)\n","La seguente funzione prende come argomenti tre interi `a`, `b`, `c` (non necessariamente distinti) e ritorna la loro _mediana_, ovvero il numero che occupa la posizione centrale quando vengono ordinati. Ad esempio, la mediana di $5$, $3$ e $10$ è $5$, e la mediana di $4$, $1$ e $1$ è $1$.\n\nTuttavia, alcune righe di pseudocodice, indicate con `[???]`, sono mancanti.\n\n(Si ricorda che, ad esempio, l'istruzione `(a, b) <- (b, a)` scambia i valori di `a` e `b`.)\n\n```srs\nfunction median(a: integer, b: integer, c: integer) -> integer\n    [???]\n    if b > c then\n        (b, c) <- (c, b)\n    end if\n    if a > b then\n        (a, b) <- (b, a)\n    end if\n    return b\nend function\n```\n\nQuale delle seguenti può essere la parte mancante?\n\n- [x] {\" \"}\n  ```srs\n  if a > b then\n      (a, b) <- (b, a)\n  end if\n  ```\n- [ ] {\" \"}\n  ```srs\n  if a < c then\n      (a, c) <- (c, a)\n  end if\n  ```\n- [ ] {\" \"}\n  ```srs\n  (a, c) <- (c, a)\n  ```\n- [ ] {\" \"}\n  ```srs\n  if a < b then\n      (a, b) <- (b, a)\n  end if\n  ```\n- [ ] La funzione è corretta così com'è, non sono necessarie ulteriori righe di pseudocodice\n\n> La risposta è\n>\n> ```srs\n> if a > b then\n>     (a, b) <- (b, a)\n> end if\n> ```\n>\n> Vediamo cosa fa la funzione dopo averla completata nel modo proposto.\n>\n> 1. Per prima cosa, le due variabili `a` e `b` vengono ordinate, scambiandone i valori se necessario.\n> 2. A questo punto, `b` e `c` vengono ordinate. In questo momento, `c` contiene il massimo dei tre valori iniziali.\n> 3. Per finire, `a` e `b` vengono nuovamente ordinate. Adesso `b` contiene il massimo dei due valori più piccoli, ovvero il valore centrale (la mediana)!\n>\n> _Approfondimento:_ Difatto, la funzione `median` implementa una versione a tre variabili del **BubbleSort**, uno dei più semplici (ma poco efficienti) algoritmi di ordinamento.\n>\n> ![Statistiche risposte](default.svg)\n","import variants from \"./variants.py\";\n\nConsidera la seguente funzione, che prende come argomenti un intero **positivo** `n` e un array di interi **non-negativi** `v` di lunghezza `n`, e ritorna un intero:\n\n```srs\nfunction compute(n: integer, v: integer[]) -> integer\n    variable x: integer\n    x <- 0\n    variable ret: integer\n    ret <- 0\n    for i in [0 ... n) do\n        while x < v[i] do\n            x <- x + 1\n            ret <- ret + 1\n        end while\n        while x > v[i] do\n            x <- x - 1\n            ret <- ret + 1\n        end while\n    end for\n    return ret\nend function\n```\n\nSupponiamo di chiamare `compute(5, v)`, dove `v` è un array di lunghezza $5$ i cui elementi sono, **in qualche ordine**, $\\js{seq.join(\", \\\\, \")}$. Quali sono il minimo e il massimo possibile valore di ritorno della funzione?\n\n- [x] $\\js{correct.min}$ e $\\js{correct.max}$\n- [ ] $\\js{wrong[0].min}$ e $\\js{wrong[0].max}$\n- [ ] $\\js{wrong[1].min}$ e $\\js{wrong[1].max}$\n- [ ] $\\js{wrong[2].min}$ e $\\js{wrong[2].max}$\n- [ ] $\\js{wrong[3].min}$ e $\\js{wrong[3].max}$\n\n> La risposta è **$\\js{correct.min}$ e $\\js{correct.max}$**.\n>\n> Cerchiamo di capire cosa fa la funzione. A ogni iterazione del ciclo `for`, la variabile `x` viene incrementata o decrementata di $1$ alla volta finché non diventa uguale a `v[i]`. A ogni incremento/decremento, il valore di `ret` viene incrementato di $1$. Il valore di ritorno è il valore finale di `ret`, cioè il numero totale di volte che viene incrementato.\n>\n> Gli incrementi durante l'iterazione `i` sono esattamente il valore assoluto di `v[i] - v[i - 1]` se `i` è maggiore di $0$, e sono `v[0]` se `i` è uguale a $0$ (dato che `x` parte da $0$). Ad esempio, supponiamo di chiamare la funzione con l'array `[{seq.join(\", \")}]`. Durante la prima iterazione, `ret` viene incrementata $\\js{seq[0]}$ volte e `x` diventa uguale a $\\js{seq[0]}$. Durante la seconda iterazione, `x` diventa uguale a $\\js{seq[1]}$ e `ret` viene incrementata $|\\js{seq[1]} - \\js{seq[0]}| = \\js{Math.abs(seq[1] - seq[0])}$ volte. (Le barrette verticali denotano il valore assoluto.) Poi, durante la terza iterazione, `ret` viene incrementata $|\\js{seq[2]} - \\js{seq[1]}| = \\js{Math.abs(seq[2] - seq[1])}$ volte, e così via per altre due iterazioni.\n>\n> Il numero minimo di incrementi si ha quando l'array `v` è ordinato in ordine crescente, ovvero quando coincide con `[{sortedSeq.join(\", \")}]`, e vale $\\js{sumIncMin} = \\js{correct.min}$.\n>\n> Calcolare il massimo è un po' più complicato. Ci si può convincere (ma non lo dimostriamo) che il modo migliore è alternare valori grandi e valori piccoli, partendo da quello massimo: questo produce l'array `[{alternatedSeq.join(\", \")}]`, per il quale il numero di incrementi vale $\\js{sumIncMax} = \\js{correct.max}$.\n>\n> ![Statistiche risposte](<{seq.join(\"\")}.svg>)\n","---\nvariants:\n  - n: 1000\n  - n: 2000\n  - n: 4000\n  - n: 5000\n---\n\nQual è il valore restituito da una chiamata alla seguente funzione?\n\n```srs\nfunction transform() -> integer\n    variable i: integer\n    variable j: integer\n    i <- 0\n    j <- {n}\n    while (4 * i * i) - j < (2 * j * j) + i do\n        i <- i + 2\n        j <- j - 1\n    end while\n    return i + 2 * j\nend function\n```\n\n- [x] $\\js{2 * n}$\n- [ ] $\\js{n / 1000}$\n- [ ] $\\js{Math.floor(2 * n / 3)}$\n- [ ] $\\js{n}$\n- [ ] $\\js{Math.floor(5 * n / 3)}$\n\n> La risposta è $\\js{2 * n}$.\n>\n> Il valore di `i + 2 * j` non cambia quando `i` viene incrementato di $2$ e `j` viene decrementato di $1$: questo segue dall'uguaglianza matematica $(i + 2) + 2 \\cdot (j - 1) = i + 2 \\cdot j$. Quindi il valore finale di tale espressione (che è quello che viene restituito) coincide con quello iniziale, ovvero $0 + 2 \\cdot \\js{n} = \\js{2 * n}$ (e questo indipendentemente da quante volte viene eseguito il ciclo `while`).\n>\n> _Precisazione:_ A essere onesti, bisognerebbe verificare che il programma esce dal ciclo, cioè che prima o poi la condizione `(4 * i * i) - j < (2 * j * j) + i` diventa falsa. Questa verifica è lasciata come esercizio.\n>\n> ![Statistiche risposte]({n}.svg)\n","---\nvariants:\n  - a: 10\n    b: 7\n  - a: 9\n    b: 11\n  - a: 12\n    b: 5\n  - a: 15\n    b: 8\n  - a: 7\n    b: 12\n  - a: 8\n    b: 13\n---\n\nConsidera la seguente funzione, che prende come argomento un intero **positivo** `n` e ritorna un intero:\n\n```srs\nfunction increase(n: integer) -> integer\n    variable k: integer\n    k <- 0\n    for i in [0 ... {a}) do\n        if k < n then\n            k <- k + {b}\n        end if\n    end for\n    return k\nend function\n```\n\nPer quanti valori di `n` si ha che `increase(n)` è uguale a `n`?\n\n- [x] $\\js{a}$\n- [ ] $1$\n- [ ] $\\js{b}$\n- [ ] $\\js{a * b}$\n- [ ] Infiniti\n\n> La risposta è $\\js{a}$.\n>\n> Il valore di `k` parte da $0$ e incrementa sempre di $\\js{b}$, quindi alla fine sarà sicuramente un multiplo di $\\js{b}$. Inoltre, gli incrementi sono al massimo $\\js{a}$ (il numero d'iterazioni del ciclo `for`), per cui il valore finale di `k` è al massimo $\\js{a} \\cdot \\js{b} = \\js{a * b}$.\n>\n> I multipli di $\\js{b}$ (positivi) minori o uguali di $\\js{a * b}$ sono esattamente $\\js{a * b} / \\js{b} = \\js{a}$. È facile vedere che, se `n` è uno di tali numeri, il valore finale di `k` coincide con `n`.\n>\n> ![Statistiche risposte]({a},{b}.svg)\n","export const variants = [\n  buildVariant(0, [5, 9, 2, 3, 0, 2, 4, 0], [-1, 2, 6, 7]),\n  buildVariant(1, [9, 1, 0, 2, 3, 1, 5, 4], [-1, 0, 2, 5]),\n  buildVariant(2, [0, 7, 1, 6, 2, 2, 6, 3], [-1, 2, 5, 6]),\n  buildVariant(3, [2, 9, 0, 0, 9, 3, 8, 3], [-1, 0, 1, 7]),\n  buildVariant(4, [1, 8, 4, 3, 8, 4, 5, 0], [-1, 1, 3, 5]),\n];\n\nexport function buildVariant(x, v, wrong) {\n  const correct = v.indexOf(x);\n  return { x, v, correct, wrong };\n}\n\nConsidera la seguente funzione, che prende come argomenti un intero non-negativo `n` e un array di interi `v` di lunghezza `n`, e ritorna un intero.\n\n```srs\nfunction find(n: integer, v: integer[]) -> integer\n    for i in [0 ... n) do\n        if v[i] == {x} then\n            return i\n        end if\n    end for\n    return -1\nend function\n```\n\nCosa viene restituito da `find(8, [{v.join(\", \")}])`?\n\n- [x] $\\js{correct}$\n- [ ] $\\js{wrong[0]}$\n- [ ] $\\js{wrong[1]}$\n- [ ] $\\js{wrong[2]}$\n- [ ] $\\js{wrong[3]}$\n\n> La risposta è $\\js{correct}$.\n>\n> La funzione `find` trova l'indice del **primo** elemento dell'array `v` uguale a $\\js{x}$ (ricordiamo che gli indici partono da $0$), oppure restituisce $-1$ se un tale elemento non esiste.\n>\n> Nell'array dato, il primo elemento uguale a $\\js{x}$ è quello che ha indice $\\js{correct}$.\n>\n> ![Statistiche risposte]({x}.svg)\n","<Contest>\n\n## Sezione 1: Esercizi a carattere logico-matematico\n\n<Section>\n  <Problem points={[5, 1, 0]}><M3CavalieriFurfanti /></Problem>\n  <Problem points={[5, 1, 0]}><M6NumeroSpaccatoIn4 /></Problem>\n  <Problem points={[5, 1, 0]}><M8PotenzeDi10 /></Problem>\n\n  <Problem points={[5, 1, 0]}><M4Domino /></Problem>\n  <Problem points={[5, 1, 0]}><M5SommeCoppie /></Problem>\n  <Problem points={[5, 1, 0]}><M7NumeriColorati /></Problem>\n</Section>\n\n## Sezione 2: Esercizi di programmazione\n\n<Section>\n  <Problem points={[5, 1, 0]}><P5Mediana /></Problem>\n  <Problem points={[5, 1, 0]}><P8IncrementaDi7 /></Problem>\n  <Problem points={[5, 1, 0]}><P9TrovaElemento /></Problem>\n\n  <Problem points={[5, 1, 0]}><P2StampaInteriLessicografico /></Problem>\n  <Problem points={[5, 1, 0]}><P4SequenzaAlternante /></Problem>\n  <Problem points={[5, 1, 0]}><P7Invariante /></Problem>\n</Section>\n\n## Sezione 3: Esercizi a carattere algoritmico\n\n<Section>\n  <Problem points={[5, 0, 0]}><A3DueScatole /></Problem>\n  <Problem points={[5, 0, 0]}><A6Rettangoli /></Problem>\n  <Problem points={[5, 0, 0]}><A1ComponentiConnesse /></Problem>\n  <Problem points={[5, 0, 0]}><A2MaxMenoMin /></Problem>\n</Section>\n\n</Contest>\n","Ciao! Ecco le informazioni essenziali sulla prova che stai per svolgere. Ti consigliamo di leggerle attentamente.\n\n## Regole di base\n\nTi è permesso:\n\n- avere a disposizione una calcolatrice -- va bene qualunque tipo di calcolatrice, comprese quelle grafiche e la calcolatrice di sistema dell'eventuale dispositivo elettronico che stai usando (PC o dispositivo mobile);\n- avere con te dei fogli bianchi (eventualmente a righe o quadretti);\n- avere con te del materiale di cancelleria (penne, matite, gomma, etc.);\n- andare in bagno in qualunque momento -- in tal caso, dovrai lasciare nell'aula dispositivi elettronici, il testo della prova, e altro materiale cartaceo;\n- comunicare con il docente sorvegliante in caso di problemi tecnici.\n\nNon ti è permesso:\n\n- navigare su internet, se non all'indirizzo del sito della prova;\n- comunicare con i tuoi compagni;\n- comunicare con il docente sorvegliante sul contenuto della prova;\n- diffondere il testo della prova, o parte di esso, prima delle 20:00 del giorno della prova (16 dicembre).\n\n## Formato della prova\n\nQuesta prova contiene _20 domande_, da svolgere in un tempo totale di _90 minuti_. La prova consiste di quesiti a **scelta multipla** e quesiti a **domanda aperta numerica**, ed è divisa in tre parti:\n\n- 6 quesiti a scelta multipla a **carattere logico-matematico**,\n- 6 quesiti a scelta multipla di **programmazione** in pseudocodice, e\n- 4 quesiti a **carattere algoritmico**, ciascuno con 2 domande aperte numeriche.\n\nIn ciascuna delle tre parti, i quesiti sono _indicativamente_ (ma non esattamente) ordinati per difficoltà crescente. _Attenzione_: la difficoltà è spesso soggettiva! Se stai passando tanto tempo cercando di risolvere un quesito, considera di dare uno sguardo al successivo, o a quelli di un’altra categoria!\n\n## Punteggio\n\nTutti i quesiti a _scelta multipla_ presentano 5 opzioni, di cui **solo una** è corretta. Il punteggio assegnato per tali quesiti è:\n\n- 5 punti per una risposta _corretta_;\n- 1 punto per una risposta _in bianco_;\n- 0 punti per una risposta _errata_.\n\nOgni _domanda aperta numerica_ richiede come risposta un numero intero (eventualmente negativo). Il punteggio assegnato per tali domande è:\n\n- 5 punti per una risposta _corretta_;\n- 0 punti per una risposta _errata_ o _in bianco_.\n\nIn particolare, il punteggio massimo ottenibile per un quesito a carattere algoritmico è 5 + 5 = 10.\n\n## Quesiti di programmazione e pseudocodice\n\nI quesiti di programmazione presentano semplici programmi scritti in _pseudocodice_. Qui sotto puoi trovare un riassunto della sintassi dello pseudocodice, oppure [scarica la guida completa](/Pseudocodice.pdf) in PDF.\n\n![Riassunto guida pseudocodice](pseudocodice-cheatsheet.svg)\n","import { NoAuth } from \"@olinfo/quizms/student\";\n\nimport Contest from \"./contest/contest.mdx\";\nimport Header from \"./header.md\";\n\nexport const metadata = {\n  title: \"Olimpiadi di Informatica\",\n  description: \"Olimpiadi Italiane di Informatica 2022/2023 - Selezione scolastica\",\n};\n\nexport default function App() {\n  return (\n    <NoAuth\n      contestName=\"Olimpiadi di Informatica\"\n      contestLongName={metadata.description}\n      duration={90}>\n      <Header />\n      <Contest />\n    </NoAuth>\n  );\n}\n"],"names":["_jsx","Equation","_jsxs","_components","ans1","ans2","Code","variants","buildVariant","x","v","wrong","correct","indexOf","metadata","App","jsxs","NoAuth","jsx","Header","Contest"],"mappings":"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"}