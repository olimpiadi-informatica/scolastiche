{"version":3,"file":"16f60a18-page.js","sources":["../../../src/scolastiche/2022-demo/contest/algo-1/question.md","../../../src/scolastiche/2022-demo/contest/algo-2/question.md","../../../src/scolastiche/2022-demo/contest/logica-1/question.md","../../../src/scolastiche/2022-demo/contest/logica-2/question.md","../../../src/scolastiche/2022-demo/contest/logica-3/question.md","../../../src/scolastiche/2022-demo/contest/prog-1/question.md","../../../src/scolastiche/2022-demo/contest/prog-2/question.md","../../../src/scolastiche/2022-demo/contest/prog-3/question.md","../../../src/scolastiche/2022-demo/contest/contest.mdx","../../../src/scolastiche/2022-demo/header.md","../../../src/scolastiche/2022-demo/page.jsx"],"sourcesContent":["Vuoi costruire una percorso da parkour, composto da alcune piattaforme disposte in fila una dopo l'altra. La piattaforma $i$-esima può essere alta al massimo $M_i$ e deve essere alta almeno tanto quanto la piattaforma alla sua sinistra (se esiste).\n\nAd esempio, considera $M = [1, \\, 3, \\, 2, \\, 4]$. Posizionare le piattaforme ad altezza $[1, \\, 2, \\, 2, \\, 4]$ sarebbe una disposizione valida. Invece, $[1, \\, 3, \\, 2, \\, 4]$ e $[1, \\, 2, \\, 2, \\, 6]$ non lo sono: nel primo caso la terza piattaforma è più bassa della precedente, nel secondo l'ultima piattaforma è più alta del suo limite.\n\nConsidera ora\n\n$$\nM = [4, \\, 3, \\, 1, \\, 2, \\, 5, \\, 4, \\, 4, \\, 6, \\, 9, \\, 9, \\, 10, \\, 8, \\, 10].\n$$\n\nQual è la massima somma delle altezze ottenibile?\n\n?> 65\n\n> La risposta è $65$.\n>\n> La sequenza di altezze deve essere debolmente crescente. Se chiamiamo $i$ l'indice del valore minimo della sequenza $M$, conviene porre tutte le piattaforme $0, \\, \\dots, \\, i$ ad altezza esattamente $M_i$ (non possiamo farle più alte, altrimenti ci sarebbe almeno una piattaforma più bassa della sua precedente). A questo punto, troviamo il minimo degli elementi rimanenti (quelli da $i + 1$ in poi) e ripetiamo lo stesso procedimento. Continuando così fino ad aver assegnato tutte le altezze, si trova la soluzione per la quale la somma delle altezze è massima.\n>\n> Di seguito uno schema della soluzione, in cui le altezze massime sono segnate in rosso, e l'area blu è proprio la somma totale delle altezze.\n>\n> ![Soluzione](sol.asy)\n\n---\n\nAggiungiamo una seconda condizione da rispettare: la differenza tra le altezze di due piattaforme consecutive non può mai essere maggiore di $1$.\n\nQual è la massima somma delle altezze ottenibile con entrambi i vincoli?\n\n?> 59\n\n> La risposta è $59$.\n>\n> Partiamo dalla soluzione della sezione precedente. Questa rispetta già il vincolo di non essere decrescente, ma potenzialmente fa dei \"salti\" troppo grandi tra elementi consecutivi. Per adattarla e rispettare anche il secondo vincolo, possiamo scorrere da sinistra la lista di altezze, e abbassarle quando necessario. In particolare, per ogni elemento $x$, se il successivo è maggiore di $x+1$ lo abbassiamo a $x+1$, il massimo valore ammissibile.\n>\n> Graficamente, la soluzione parte da quella della parte precedente (ora in grigio) e risale più lentamente in corrispondenza dei gradini:\n>\n> ![Soluzione](sol2.asy)\n>\n> In questo modo abbassiamo ogni elemento solo se strettamente necessario, mentre non è mai possibile alzare un valore rispetto alla soluzione del punto precedente, perché violeremmo il primo vincolo. Questo procedimento porta quindi alla soluzione ottima.\n","Caterina ha scritto una lettera dell'alfabeto inglese in ogni casella della tabella $3 \\times 7$ mostrata in figura:\n\n![Tabella](table-big.asy?s=1.7)\n\nCaterina può cambiare tutte le lettere che vuole, sostituendo ciascuna di esse con un'altra lettera dell'alfabeto inglese (anche lettere diverse da quelle scritte adesso).\n\nQuante lettere deve cambiare, al minimo, per rendere tutte le righe uguali?\n\n?> 7\n\n> La risposta è $7$.\n>\n> Per rendere tutte le righe uguali, Caterina deve fare in modo che ogni colonna contenga tre volte la stessa lettera. Possiamo esaminare ogni colonna separatamente:\n>\n> - Se la colonna ha già tre lettere uguali, non c'è nulla da cambiare.\n> - Se la colonna ha due lettere uguali e una diversa, conviene cambiare quest'ultima.\n> - Altrimenti, la colonna ha tre lettere diverse, e Caterina deve necessariamente cambiarne due.\n>\n> Sommando su tutte le colonne, si ottiene $1 + 2 + 0 + 1 + 1 + 1 + 1 = 7$.\n\n---\n\nAdesso, Caterina considera la parola ottenuta \"incollando\" tutte le righe una di seguito all'altra (prendendole dall'alto al basso), e la parola ottenuta \"incollando\" tutte le colonne una di seguito all'altra (prendendole da sinistra a destra). Vorrebbe che queste due parole fossero uguali.\n\nConsidera il seguente esempio, con una tabella più piccola ($2 \\times 3$):\n\n![Tabella di esempio](table-small.asy?s=1.7)\n\nLa parola ottenuta incollando le righe è $\\texttt{baccac}$, come mostrato in figura:\n\n![Decomposizione righe](row-decomposition.asy?s=1.7)\n\nInvece, la parola ottenuta incollando le colonne è $\\texttt{bcaacc}$:\n\n![Decomposizione colonne](column-decomposition.asy?s=1.7)\n\nQuante lettere deve cambiare nella tabella iniziale, al minimo, affinché ciò sia possibile?\n\n?> 9\n\n> La risposta è $9$.\n>\n> Chiamiamo $w_h$ la parola ottenuta incollando le righe, e $w_v$ la parola ottenuta incollando le colonne. Osserviamo che la lettera in alto a sinistra è la prima lettera sia di $w_h$ sia di $w_v$, quindi non va cambiata. Consideriamo adesso, ad esempio, la lettera sulla prima riga e seconda colonna (che è una $\\texttt{b}$), e osserviamo la seguente figura, in cui è indicata con $\\textnormal{\\small\\textcircled{1}}$:\n>\n> ![Primo gruppo](first-group.asy?s=1.7)\n>\n> In $w_h$, tale lettera occupa la seconda posizione. Pertanto, alla fine dovrà coincidere con la lettera che occupa la seconda posizione in $w_v$, ovvero la lettera nella seconda riga e prima colonna, indicata con $\\textnormal{\\small\\textcircled{2}}$ nella figura. Ma questa lettera occupa la ottava posizione in $w_h$, e quindi deve essere uguale alla ottava lettera di $w_v$; quest'ultima è indicata con $\\textnormal{\\small\\textcircled{3}}$ e occupa la seconda riga e terza colonna. Ripetendo il ragionamento ancora una volta, otteniamo che questa lettera è la decima di $w_h$, e quindi deve coincidere con la decima lettera di $w_v$, quella indicata con $\\textnormal{\\small\\textcircled{4}}$. Infine, tale lettera occupa la quarta posizione in $w_h$, ma la quarta lettera di $w_v$ è la $\\textnormal{\\small\\textcircled{1}}$, e quindi possiamo chiudere il ciclo. Abbiamo formato un gruppo di quattro lettere che, alla fine, devono essere tutte uguali: dato che tre di esse sono una $\\texttt{b}$ e l'altra una $\\texttt{f}$, a Caterina conviene cambiare quest'ultima in una $\\texttt{b}$.\n>\n> Ripetiamo questo procedimento per ogni lettera che non appartiene ancora a un gruppo. Colorando ogni gruppo di un colore diverso, otteniamo la figura mostrata di seguito:\n>\n> ![Tutti i gruppi](all-groups.asy?s=1.7)\n>\n> Notiamo che ci sono gruppi da quattro, due, o anche una lettera. In ogni caso, Caterina deve rendere uguali le lettere in ogni gruppo, quindi possiamo procedere come nella parte 1: dato un gruppo, il modo ottimale di cambiare le lettere al suo interno è renderle tutte uguali alla lettera che inizialmente compare più volte.\n>\n> Sommando su tutti i gruppi, otteniamo quindi (\"leggendo\" dall'alto in basso e da sinistra a destra) $0 + 1 + 2 + 3 + 1 + 0 + 2 + 0 = 9$.\n","Un numero intero positivo si dice _palindromo_ se è lo stesso letto da sinistra a destra o da destra a sinistra (in base $10$). Ad esempio, $3223$, $9019109$ e $5$ sono palindromi, mentre $1010$ e $5556$ non lo sono.\n\nQual è la **somma delle cifre** del più piccolo numero palindromo di **esattamente** $9$ cifre, della forma $\\texttt{\\_}3\\texttt{\\_}2\\texttt{\\_}\\texttt{\\_}9\\texttt{\\_}\\texttt{\\_}$? I trattini bassi possono essere qualunque cifra, ma quello più a sinistra non può essere $0$.\n\n- [ ] $27$\n- [ ] $28$\n- [ ] $29$\n- [x] $30$\n- [ ] $32$\n\n> La risposta è $30$.\n>\n> Osserviamo che la penultima cifra deve essere uguale alla seconda (che è la sua speculare), cioè $3$. Allo stesso modo la terza cifra è uguale alla terzultima, ovvero $9$, e la sesta cifra è uguale alla quarta, cioè $2$. A questo punto il numero ha la forma $\\texttt{\\_}392\\texttt{\\_}293\\texttt{\\_}$ e dobbiamo scegliere le altre cifre. Poiché vogliamo minimizzare il numero, conviene scegliere come cifra centrale $0$, e come prima e ultima cifra $1$ (non possiamo scegliere $0$).\n>\n> Il numero ottenuto è $139202931$, e la somma delle sue cifre è $30$.\n","Marco ha una scacchiera quadrata $8 \\times 8$, divisa in $64$ quadratini uguali. Ha anche un tassello a forma di L, formato da tre quadratini uguali delle stesse dimensioni di quelli della scacchiera, come in figura.\n\n![Tassello](tile.asy?s=2)\n\nMarco vuole disporre il tassello sulla scacchiera, in modo che copra per intero esattamente tre quadratini di quest'ultima. Nel farlo, può ruotare il tassello come vuole. In quanti modi può disporre il tassello sulla scacchiera? (Due disposizioni si considerano diverse se non coprono le stesse tre caselle.)\n\n- [ ] $64$\n- [ ] $95$\n- [ ] $128$\n- [ ] $144$\n- [x] $196$\n\n> La risposta è $196$.\n>\n> Quando il tassello viene posizionato sulla scacchiera, occupa $3$ caselle di un quadrato $2 \\times 2$, con la quarta casella lasciata vuota. Ci sono $7 \\cdot 7 = 49$ modi di scegliere tale quadrato. Una volta scelto, ci sono $4$ modi di ruotare il tassello. Questo dà luogo a $49 \\cdot 4 = 196$ disposizioni distinte.\n","Sulla retta dei numeri reali sono posizionati $8$ portali: il primo in posizione $1$, il secondo in posizione $2$, fino all'ottavo che è in posizione $8$. Inizialmente, tutti i portali sono **attivi**.\n\nUna formica inizia a camminare sulla retta, partendo in posizione $0$ e muovendosi sempre verso destra, alla velocità di $1$ unità al secondo. Quando la sua posizione coincide con quella del portale:\n\n- se il portale è **inattivo**, il portale diventa **attivo** e la formica continua a camminare normalmente;\n- se il portale è **attivo**, il portale diventa **inattivo** e la formica viene istantaneamente teletrasportata in posizione $0$, dove ricomincia a camminare verso destra alla stessa velocità.\n\nQuanti secondi sono passati, dall'istante in cui ha iniziato a camminare, quando la formica raggiunge la posizione $9$?\n\n- [ ] $442$\n- [x] $511$\n- [ ] $373$\n- [ ] $896$\n- [ ] $424$\n\n> La risposta è $511$.\n>\n> _Prima soluzione._ Indichiamo con $\\texttt{A}$ un portale attivo e con $\\texttt{I}$ un portale inattivo. All'inizio la sequenza di portali è $\\texttt{AAAAAAAA}$. Un secondo dopo l'istante iniziale, la formica incontra il primo portale, che è attivo: viene quindi teletrasportata in $0$ e la nuova sequenza di portali è $\\texttt{IAAAAAAA}$. Dopo un altro secondo, incontra di nuovo il primo portale, che adesso è inattivo, dunque la formica prosegue verso destra; un secondo dopo incontra il secondo portale, che è attivo, e viene teletrasportata in $0$. La sequenza a questo punto è $\\texttt{AIAAAAAA}$.\n>\n> In generale, ogni volta che la formica riparte da $0$, sia $k$ la posizione della prima $\\texttt{A}$ nella sequenza. La formica cammina verso destra per $k$ secondi, invertendo lo stato dei primi $k - 1$ portali (da inattivo ad attivo) e del $k$-esimo portale (da attivo a inattivo), e viene teletrasportata in $0$.\n>\n> È possibile mostrare che, durante tutto il procedimento, vengono prodotte tutte le $2^8$ possibili sequenze di $\\texttt{A}$ e $\\texttt{I}$ di lunghezza $8$, e l'ultima di queste sequenze è $\\texttt{IIIIIIII}$. Per ciascuna sequenza eccetto quest'ultima, al tempo totale viene sommata la posizione $k$ della prima $\\texttt{A}$ che vi compare (come visto prima). Per l'ultima sequenza, la formica non viene bloccata da nessun portale, quindi in $9$ secondi raggiunge il traguardo.\n>\n> Per $k = 1, \\, \\dots, \\, 8$, il numero di sequenze che hanno la prima $\\texttt{A}$ in posizione $k$ è $2^{8 - k}$: infatti, le prime $k$ lettere sono determinate, e le restanti $8 - k$ possono essere scelte arbitrariamente. La risposta è quindi:\n>\n> $$\n> (1 \\cdot 2^{8 - 1} + 2 \\cdot 2^{8 - 2} + \\cdots + 8 \\cdot 2^{8 - 8}) + 9 = 511.\n> $$\n>\n> _Seconda soluzione._ Risolviamo il problema mediante una ricorrenza. Per $0 \\le n \\le 8$, sia $T(n)$ il tempo passato dall'istante iniziale quando la formica raggiunge per la prima volta la posizione $n + 1$. Si ha $T(0) = 1$.\n>\n> Prendiamo ora $n > 0$. Per raggiungere la posizione $n + 1$, la formica deve aver sicuramente raggiunto la posizione $n$: quando questo accade, è passato un tempo $T(n - 1)$. A quel punto, la formica riparte da $0$, è la situazione dei portali è la seguente: tutti i portali da $1$ a $n - 1$ sono attivi, mentre il portale $n$ è inattivo. La formica deve ancora una volta raggiungere la posizione $n$, e, poiché i primi $n - 1$ portali sono esattamente nello stato iniziale, il tempo necessario è ancora $T(n - 1)$. Per finire, la formica percorre una ulteriore unità di lunghezza in un tempo $1$.\n>\n> Otteniamo dunque la ricorrenza $T(n) = 2T(n - 1) + 1$, con $T(0) = 1$. Si può dimostrare che essa ha la soluzione $T(n) = 2^{n + 1} - 1$, ma non è necessario: è sufficiente calcolare i valori a mano, essendocene solo $8$. Come prima, si trova $T(8) = 511$.\n","Cosa stampa la seguente funzione al termine dell'esecuzione?\n\n```srs\nfunction count()\n\tvariable k: integer\n\tk <- 0\n\tfor i in [0 ... 100) do\n\t\tfor j in [0 ... 200) do\n\t\t\tif i == j then\n\t\t\t\tk <- k + 1\n\t\t\tend if\n\t\tend for\n\tend for\n\toutput(k)\nend function\n```\n\n- [x] $100$\n- [ ] $200$\n- [ ] $300$\n- [ ] $1000$\n- [ ] $2000$\n\n> La risposta è $100$.\n>\n> La variabile `k`, il cui valore iniziale è $0$, viene incrementata ogni volta che gli indici `i` e `j` che iterano i due cicli `for` sono uguali. Poiché `i` va da $0$ a $99$ e `j` da $0$ a $199$, questo accade solo quando le due variabili sono entrambe uguali a un numero compreso tra $0$ e $99$, ovvero $100$ volte.\n","La seguente funzione prende come argomenti un intero positivo `n`, un intero `k` compreso tra $1$ e `n` (inclusi), e un array `a` di lunghezza `n` contenente interi **distinti** compresi tra $0$ e $1000$ (inclusi). La funzione restituisce il `k`-esimo elemento di `a` in ordine crescente. Parte del codice, indicata da `[???]`, è mancante.\n\n```srs\nfunction kth_element(n: integer, k: integer, a: integer[]) -> integer\n\tvariable m: integer\n\tfor i in [0 ... k) do\n\t\tm <- 0\n\t\tfor j in [1 ... n) do\n\t\t\tif a[j] < a[m] then\n\t\t\t\tm <- j\n\t\t\tend if\n\t\tend for\n\t\t[???]\n\tend for\n  return a[m]\nend function\n```\n\nQuale dei seguenti può essere il pezzo mancante?\n\n- [ ] {\" \"}\n  ```srs\n  if i < k - 1 then\n    a[m] <- -1\n  end if\n  ```\n- [x] {\" \"}\n  ```srs\n  if i < k - 1 then\n    a[m] <- 1001\n  end if\n  ```\n- [ ] {\" \"}\n  ```srs\n  if i > 0 then\n    a[m] <- -1\n  end if\n  ```\n- [ ] {\" \"}\n  ```srs\n  if i > 0 then\n    a[m] <- 1001\n  end if\n  ```\n- [ ] {\" \"}\n  ```srs\n  a[m] <- -1\n  ```\n\n> La risposta è\n>\n> ```srs\n> if i < k - 1 then\n>   a[m] <- 1001\n> end if\n> ```\n>\n> Il ciclo for più interno assegna a `m` l'indice del minimo valore contenuto in `a` in quel momento. Quindi, vogliamo che alla `k`-esima iterazione il minimo di `a` corrisponda al `k`-esimo minimo nell'array originale. Questo è possibile se, a ogni iterazione del ciclo for esterno, ad `a[m]` viene assegnato un valore più grande di tutti gli altri elementi, ad esempio $1001$. Dobbiamo, tuttavia, evitare questo assegnamento all'ultima iterazione (cioè quando `i` è uguale a `k - 1`), perché altrimenti la funzione restituirebbe $1001$.\n","Considera la seguente procedura ricorsiva, che prende come argomento un intero **non negativo** `n`:\n\n```srs\nfunction say_hello(n: integer)\n\toutput(\"Hello\")\n\tfor i in [0 ... n) do\n\t\tsay_hello(i)\n\tend for\nend function\n```\n\nChiamando `say_hello(2022)`, quante volte viene stampata in output la stringa `\"Hello\"`?\n\n- [x] $2^{2022}$\n- [ ] $2022 \\cdot 2021 \\cdots 2 \\cdot 1$\n- [ ] $2022$\n- [ ] $2022^2$\n- [ ] $2022 + 2021 + \\cdots + 2 + 1$\n\n> La risposta è $2^{2022}$.\n>\n> Ogni volta che viene chiamata `output(\"Hello\")`, consideriamo la sequenza di chiamate a `say_hello` che ha portato a tale stato (a eccezione della prima, quella con argomento $2022$). Gli argomenti passati alla funzione in queste chiamate sono interi distinti compresi tra $0$ e $2022 - 1 = 2021$, cioè corrispondono a un sottoinsieme di $\\{0, \\, \\dots, \\, 2021\\}$. Inoltre, a ogni sottoinsieme corrisponde esattamente una sequenza di chiamate, e quindi una stampa di `\"Hello\"`. La risposta è pertanto il numero di tali sottoinsiemi, cioè $2^{2022}$.\n","<Contest>\n\n## Sezione 1: Esercizi a carattere logico-matematico\n\n<Section>\n  <Problem points={[5, 1, 0]}><Logica1 /></Problem>\n  <Problem points={[5, 1, 0]}><Logica2 /></Problem>\n  <Problem points={[5, 1, 0]}><Logica3 /></Problem>\n</Section>\n\n## Sezione 2: Esercizi di programmazione\n\n<Section>\n  <Problem points={[5, 1, 0]}><Prog1 /></Problem>\n  <Problem points={[5, 1, 0]}><Prog2 /></Problem>\n  <Problem points={[5, 1, 0]}><Prog3 /></Problem>\n</Section>\n\n## Sezione 3: Esercizi a carattere algoritmico\n\n<Section>\n  <Problem points={[5, 0, 0]}><Algo1 /></Problem>\n  <Problem points={[5, 0, 0]}><Algo2 /></Problem>\n</Section>\n\n</Contest>\n","Ciao! Questo è un esempio dimostrativo della prova di selezione scolastica che affronterai il 16 dicembre 2022.\n\nQuesto esempio contiene _10 domande_ ed è pensato per essere risolto in _45 minuti_ (la prova ufficiale conterrà invece _20 domande_ da svolgere in _90 minuti_).\n\nSe hai già affrontato la prova negli anni passati, o ne hai comunque letto i testi, noterai che lo stile di alcuni esercizi è cambiato, in particolare quelli a carattere algoritmico (terza parte). Inoltre, adesso il punteggio viene assegnato in base a nuove regole.\n\n## Formato della prova\n\nLa prova consiste di quesiti a **scelta multipla** e quesiti a **domanda aperta numerica**, ed è divisa in tre parti:\n\n- quesiti a **carattere logico-matematico**,\n- quesiti di **programmazione** in pseudocodice, e\n- quesiti a **carattere algoritmico**.\n\nIn ciascuna delle tre parti, i quesiti sono _indicativamente_ ordinati per difficoltà crescente. _Attenzione_: la difficoltà è spesso soggettiva! Se stai passando tanto tempo cercando di risolvere un quesito, considera di dare uno sguardo al successivo, o ai problemi di un’altra categoria!\n\n### Punteggio\n\nTutti i quesiti a _scelta multipla_ presentano 5 opzioni, di cui **solo una** è corretta. Il punteggio assegnato per tali quesiti è:\n\n- 5 punti per una risposta _esatta_;\n- 1 punto per una risposta _in bianco_;\n- 0 punti per una risposta _errata_.\n\nI quesiti a _domanda aperta numerica_ richiedono come risposta un numero intero (eventualmente negativo). Il punteggio assegnato per tali quesiti è:\n\n- 5 punti per una risposta _corretta_;\n- 0 punti per una risposta _errata_ o _in bianco_.\n\n### Quesiti di programmazione e pseudocodice\n\nI quesiti di programmazione presentano semplici programmi scritti in _pseudocodice_. Qui sotto puoi trovare un riassunto della sintassi dello pseudocodice, oppure [scarica la guida completa](/Pseudocodice.pdf) in PDF.\n\n![Riassunto guida pseudocodice](pseudocodice-cheatsheet.svg)\n","import { NoAuth } from \"@olinfo/quizms/student\";\n\nimport Contest from \"./contest/contest.mdx\";\nimport Header from \"./header.md\";\n\nexport const metadata = {\n  title: \"Demo Scolastiche 2022\",\n  description: \"Olimpiadi Italiane di Informatica 2022/2023 - Selezione scolastica (demo)\",\n};\n\nexport default function App() {\n  return (\n    <NoAuth\n      contestName=\"Olimpiadi di Informatica\"\n      contestLongName={metadata.description}\n      duration={45}>\n      <Header />\n      <Contest />\n    </NoAuth>\n  );\n}\n"],"names":["_jsxs","_components","_jsx","Equation","Code","metadata","App","jsxs","NoAuth","jsx","Header","Contest"],"mappings":";opBAAA,SAAA,CAAA,4HAAAA,OAAAC,EAAA,KAAA,iGAA4H,CAAA,EAAA,+BAAAC,EAAA,IAAAC,EAAA,yBAAuC,CAAA,EAAA,uFAAA,gBAEnK,SAAA,CAAA,yBAAAH,OAAAC,EAAA,KAAA,oHAAiD,CAAA,EAAA,0CAAAC,EAAA,IAAAC,EAAA,2CAA+D,CAAA,EAAA,6CAAAD,EAAA,IAAAC,EAAA,2CAAiE,CAAA,EAAA,MAAAD,EAAA,IAAAC,EAAA,2CAA0B,CAAA,EAAA,6IAAA,eAE3M,SAAA,2JAMA,SAAA,wJAIE,SAAA,CAAA,iBAAAH,OAAAC,EAAA,KAAA,+GAEA,SAAA,CAAA,yEAAAC,EAAA,IAAAC,EAAA,uBAAyE,CAAA,EAAA,8CAAAH,OAAAC,EAAA,KAAA,4FAA8C,CAAA,EAAA,wCAAAC,EAAA,IAAAC,EAAA,uCAAyD,CAAA,EAAA,2BAAAD,EAAA,IAAAC,EAAA,yBAA6B,CAAA,EAAA,uLAAAD,EAAA,IAAAC,EAAA,2BAA2L,CAAA,EAAA,6KAAA,eAExY,SAAA;;0CAMF,SAAA,CAAA,gJAAAH,OAAAC,EAAA,KAAA,6GAEA,SAAA,+KAIE,SAAA,CAAA,iBAAAD,OAAAC,EAAA,KAAA,+GAEA,SAAA,CAAA,mWAAAD,OAAAC,EAAA,KAAA,4FAAmW,CAAA,EAAA,mCAAAC,EAAA,IAAAC,EAAA,yBAAsC,CAAA,EAAA,oBAAAH,OAAAC,EAAA,KAAA,8FAAsB,CAAA,EAAA,iCAAA,eAE/Z,SAAA,gPAIA,SAAA,w+CCtCF,SAAA,CAAA,uFAAAC,EAAA,IAAAC,EAAA,gCAAgG,CAAA,EAAA,sBAAA,qGAIhG,SAAA,2LAEA,SAAA,iLAIE,SAAA,CAAA,iBAAAH,OAAAC,EAAA,KAAA,6GAEA,SAAA;cAEE,SAAA;cACA,SAAA;cACA,SAAA;iBAEF,SAAA,CAAA,4CAAAD,OAAAC,EAAA,KAAA;;yCAIF,SAAA,oTAEA,SAAA,CAAA,+DAAAD,OAAAC,EAAA,KAAA,yNAIA,SAAA,CAAA,4CAAAD,OAAAC,EAAA,KAAA,0GAA0D,CAAA,EAAA,2BAAA,mHAI1D,SAAA,CAAA,sDAAAD,OAAAC,EAAA,KAAA,gOAIA,SAAA,iMAIE,SAAA,CAAA,iBAAAD,OAAAC,EAAA,KAAA,8GAEA,SAAA,CAAA,aAAAC,EAAA,IAAAC,EAAA,yBAAe,CAAA,EAAA,8CAAAD,EAAA,IAAAC,EAAA,yBAAgD,CAAA,EAAA,qHAAAD,EAAA,IAAAC,EAAA,yBAAuH,CAAA,EAAA,WAAAH,OAAAC,EAAA,KAAA,8FAAa,CAAA,EAAA,sHAAAD,OAAAC,EAAA,KAAA,sGAAgI,CAAA,EAAA,2DAAAD,OAAAC,EAAA,KAAA,0OAInU,SAAA,CAAA,MAAAD,OAAAC,EAAA,KAAA,8FAAQ,CAAA,EAAA,qIAAAD,OAAAC,EAAA,KAAA,8FAAwI,CAAA,EAAA,uEAAAC,EAAA,IAAAC,EAAA,wDAAyG,CAAA,EAAA,kEAAAH,OAAAC,EAAA,KAAA,8FAAoE,CAAA,EAAA,uDAAAD,OAAAC,EAAA,KAAA,8FAA0D,CAAA,EAAA,gCAAAC,EAAA,IAAAC,EAAA,wDAAkE,CAAA,EAAA,sIAAAH,OAAAC,EAAA,KAAA,8FAAwI,CAAA,EAAA,sDAAAD,OAAAC,EAAA,KAAA,8FAAyD,CAAA,EAAA,wBAAAD,OAAAC,EAAA,KAAA,6HAA0D,CAAA,EAAA,uDAAAD,OAAAC,EAAA,KAAA,8FAA0D,CAAA,EAAA,4BAAAC,EAAA,IAAAC,EAAA,yBAA+B,CAAA,EAAA,SAAAH,OAAAC,EAAA,KAAA,6HAA0C,CAAA,EAAA,gKAAAC,EAAA,IAAAC,EAAA,gCAA0K,CAAA,EAAA,kBAAAH,OAAAC,EAAA,KAAA,qGAA2B,CAAA,EAAA,qDAAAD,OAAAC,EAAA,KAAA,sHAE5/B,SAAA,uRAIA,SAAA,qVAEA,SAAA,CAAA,uGAAAD,OAAAC,EAAA,KAAA,wpBCtDF,SAAA,CAAA,qCAAAC,MAAAD,EAAA,GAAA,CAAmC,SAAA,YAAW,CAAA,EAAA,8EAAAD,OAAAC,EAAA,KAAA,8FAA+E,CAAA,EAAA,gBAAAD,OAAAC,EAAA,KAAA,+FAAqB,CAAA,EAAA,IAAAC,EAAA,IAAAC,EAAA,6BAAW,CAAA,EAAA,MAAAD,EAAA,IAAAC,EAAA,uBAAM,CAAA,EAAA,4BAAAD,EAAA,IAAAC,EAAA,0BAA+B,CAAA,EAAA,MAAAD,EAAA,IAAAC,EAAA,0BAAS,CAAA,EAAA,eAAA,gBAE3M,SAAA,CAAA,aAAAD,MAAAD,EAAA,OAAA,CAAY,SAAA,mBAAmB,CAAA,EAAA,yCAAAC,MAAAD,EAAA,OAAA,CAAwC,SAAA,aAAa,CAAA,EAAA,IAAAC,EAAA,IAAAC,EAAA,uBAAI,CAAA,EAAA,uBAAAH,OAAAC,EAAA,KAAA,gKAA2F,CAAA,EAAA,6FAAAD,OAAAC,EAAA,KAAA,ilBAQjL,SAAA,CAAA,iBAAAD,OAAAC,EAAA,KAAA,+GAEA,SAAA,CAAA,oGAAAD,OAAAC,EAAA,KAAA,4FAAoG,CAAA,EAAA,qEAAAD,OAAAC,EAAA,KAAA,4FAAsE,CAAA,EAAA,gDAAAD,OAAAC,EAAA,KAAA,4FAAiD,CAAA,EAAA,yCAAAC,EAAA,IAAAC,EAAA,6DAAgF,CAAA,EAAA,uHAAAH,OAAAC,EAAA,KAAA,4FAAuH,CAAA,EAAA,gCAAAC,EAAA,IAAAC,EAAA,uBAAiC,CAAA,EAAA,4BAAAH,OAAAC,EAAA,KAAA,+GAEnc,SAAA,CAAA,wBAAAD,OAAAC,EAAA,KAAA,oGAAgC,CAAA,EAAA,iCAAAD,OAAAC,EAAA,KAAA,8sBCdlC,SAAA,CAAA,oCAAAD,OAAAC,EAAA,KAAA,qGAA6C,CAAA,EAAA,cAAAC,EAAA,IAAAC,EAAA,wBAAgB,CAAA,EAAA,6JAAA,sGAI7D,SAAA,2yBAQE,SAAA,CAAA,iBAAAH,OAAAC,EAAA,KAAA,gHAEA,SAAA,CAAA,iEAAAC,EAAA,IAAAC,EAAA,uBAAiE,CAAA,EAAA,2BAAAH,OAAAC,EAAA,KAAA,qGAAoC,CAAA,EAAA,kDAAAC,EAAA,IAAAC,EAAA,oCAAgE,CAAA,EAAA,+DAAAD,EAAA,IAAAC,EAAA,uBAA+D,CAAA,EAAA,mDAAAD,EAAA,IAAAC,EAAA,sCAAkE,CAAA,EAAA,yBAAA,uiBCdxS,SAAA,CAAA,iDAAAD,EAAA,IAAAC,EAAA,uBAAiD,CAAA,EAAA,mCAAAH,OAAAC,EAAA,KAAA,4FAAmC,CAAA,EAAA,4BAAAD,OAAAC,EAAA,KAAA,4FAA6B,CAAA,EAAA,uCAAAD,OAAAC,EAAA,KAAA,4FAAwC,CAAA,EAAA,uCAAAC,MAAAD,EAAA,OAAA,CAAuC,SAAA,QAAQ,CAAA,EAAA,GAAA,gBAExM,SAAA,CAAA,qEAAAC,EAAA,IAAAC,EAAA,uBAAqE,CAAA,EAAA,uDAAAD,EAAA,IAAAC,EAAA,uBAAuD,CAAA,EAAA,6EAAA;eAE1H,SAAA,CAAA,mBAAAD,MAAAD,EAAA,OAAA,CAAkB,SAAA,UAAU,CAAA,EAAA,wBAAAC,MAAAD,EAAA,OAAA,CAAuB,SAAA,QAAQ,CAAA,EAAA,iDAAA;eAC3D,SAAA,CAAA,mBAAAC,MAAAD,EAAA,OAAA,CAAkB,SAAA,QAAQ,CAAA,EAAA,wBAAAC,MAAAD,EAAA,OAAA,CAAuB,SAAA,UAAU,CAAA,EAAA,oEAAAD,OAAAC,EAAA,KAAA,4FAAoE,CAAA,EAAA,iEAAA;iBAEjI,SAAA,CAAA,sHAAAD,OAAAC,EAAA,KAAA,slBAQE,SAAA,CAAA,iBAAAD,OAAAC,EAAA,KAAA,sIAEC,SAAA,kBAAiB,CAAA,EAAA,mBAAAC,EAAA,IAAAC,EAAA,gCAA4B,CAAA,EAAA,4BAAAD,EAAA,IAAAC,EAAA,gCAAqC,CAAA,EAAA,6DAAAH,OAAAC,EAAA,KAAA,4GAA6E,CAAA,EAAA,4HAAAC,EAAA,IAAAC,EAAA,uBAA6H,CAAA,EAAA,qCAAAH,OAAAC,EAAA,KAAA,4GAAqD,CAAA,EAAA,qNAAAD,OAAAC,EAAA,KAAA,4FAAsN,CAAA,EAAA,iCAAAD,OAAAC,EAAA,KAAA,8HAExiB,SAAA,CAAA,qDAAAD,OAAAC,EAAA,KAAA,4FAAqD,CAAA,EAAA,QAAAC,EAAA,IAAAC,EAAA,uBAAS,CAAA,EAAA,6BAAAD,EAAA,IAAAC,EAAA,gCAAsC,CAAA,EAAA,wDAAAD,EAAA,IAAAC,EAAA,uBAAwD,CAAA,EAAA,2CAAAD,EAAA,IAAAC,EAAA,2BAA+C,CAAA,EAAA,0CAAAH,OAAAC,EAAA,KAAA,iGAA0C,CAAA,EAAA,+DAAAD,OAAAC,EAAA,KAAA,8GAErP,SAAA,CAAA,sFAAAC,EAAA,IAAAC,EAAA,yBAAwF,CAAA,EAAA,0BAAAD,EAAA,IAAAC,EAAA,gCAAmC,CAAA,EAAA,MAAAD,EAAA,IAAAC,EAAA,gCAAe,CAAA,EAAA,iBAAAH,OAAAC,EAAA,KAAA,4FAAiB,CAAA,EAAA,oCAAAD,OAAAC,EAAA,KAAA,4GAAqD,CAAA,EAAA,2FAAAC,EAAA,IAAAC,EAAA,uBAA4F,CAAA,EAAA,gBAAAD,EAAA,IAAAC,EAAA,gCAAyB,CAAA,EAAA,yHAAAD,EAAA,IAAAC,EAAA,uBAAyH,CAAA,EAAA,kCAAA,gBAE9b,SAAA,CAAA,OAAAH,OAAAC,EAAA,KAAA,gHAA2B,CAAA,EAAA,6CAAAC,EAAA,IAAAC,EAAA,gCAAuD,CAAA,EAAA,iBAAAD,EAAA,IAAAC,EAAA,uBAAiB,CAAA,EAAA,MAAAH,OAAAC,EAAA,KAAA,oGAAc,CAAA,EAAA,sBAAAC,EAAA,IAAAC,EAAA,uBAAuB,CAAA,EAAA,4CAAAD,EAAA,IAAAC,EAAA,2BAAgD,CAAA,EAAA,+DAAA,iKAMvL,SAAA,oBAAmB,CAAA,EAAA,wDAAAH,OAAAC,EAAA,KAAA,wGAAoE,CAAA,EAAA,QAAAC,EAAA,IAAAC,EAAA,0BAAY,CAAA,EAAA,uGAAAH,OAAAC,EAAA,KAAA,gGAA2G,CAAA,EAAA,UAAAD,OAAAC,EAAA,KAAA,qHAE/M,SAAA,CAAA,iBAAAD,OAAAC,EAAA,KAAA,gGAAqB,CAAA,EAAA,iCAAAD,OAAAC,EAAA,KAAA,gGAAsC,CAAA,EAAA,4DAAAD,OAAAC,EAAA,KAAA,4FAA6D,CAAA,EAAA,6CAAAD,OAAAC,EAAA,KAAA,mGAAqD,CAAA,EAAA,wCAAAD,OAAAC,EAAA,KAAA,4FAAyC,CAAA,EAAA,kEAAAC,EAAA,IAAAC,EAAA,uBAAmE,CAAA,EAAA,MAAAD,EAAA,IAAAC,EAAA,2BAAU,CAAA,EAAA,mCAAAD,EAAA,IAAAC,EAAA,uBAAmC,CAAA,EAAA,0EAAAH,OAAAC,EAAA,KAAA,4FAA0E,CAAA,EAAA,sBAAAC,EAAA,IAAAC,EAAA,2BAA2B,CAAA,EAAA,gFAAAH,OAAAC,EAAA,KAAA,mGAAuF,CAAA,EAAA,iFAAAD,OAAAC,EAAA,KAAA,8GAElgB,SAAA,CAAA,kCAAAD,OAAAC,EAAA,KAAA,+GAAqD,CAAA,EAAA,QAAAD,OAAAC,EAAA,KAAA,mGAAgB,CAAA,EAAA,+CAAAD,OAAAC,EAAA,KAAA,+GAAmE,CAAA,EAAA,mFAAAD,OAAAC,EAAA,KAAA,4FAAoF,CAAA,EAAA,yBAAAD,OAAAC,EAAA,KAAA,ynBCjC9N,SAAA;;;;;;;;;;;ioBAuBE,SAAA,CAAA,iBAAAD,OAAAC,EAAA,KAAA,gHAEA,SAAA,CAAA,gBAAAC,EAAA,IAAAE,EAAA,mEAAgB,CAAA,EAAA,8BAAAJ,OAAAC,EAAA,KAAA,4FAA8B,CAAA,EAAA,iDAAAC,EAAA,IAAAE,EAAA,mEAAkD,CAAA,EAAA,MAAAF,EAAA,IAAAE,EAAA,mEAAM,CAAA,EAAA,4BAAAF,EAAA,IAAAE,EAAA,qEAA8B,CAAA,EAAA,wBAAAF,EAAA,IAAAE,EAAA,mEAAwB,CAAA,EAAA,UAAAF,EAAA,IAAAC,EAAA,uBAAU,CAAA,EAAA,MAAAD,EAAA,IAAAC,EAAA,wBAAO,CAAA,EAAA,MAAAD,EAAA,IAAAE,EAAA,mEAAM,CAAA,EAAA,OAAAF,EAAA,IAAAC,EAAA,uBAAO,CAAA,EAAA,MAAAH,OAAAC,EAAA,KAAA,8FAAQ,CAAA,EAAA,6FAAAC,EAAA,IAAAC,EAAA,uBAA8F,CAAA,EAAA,MAAAH,OAAAC,EAAA,KAAA,6FAAO,CAAA,EAAA,WAAAC,EAAA,IAAAC,EAAA,yBAAc,CAAA,EAAA,SAAA,miBCzBvT,SAAA,CAAA,iEAAAD,EAAA,IAAAE,EAAA,mEAAiE,CAAA,EAAA,eAAAF,EAAA,IAAAE,EAAA,mEAAe,CAAA,EAAA,iBAAAF,EAAA,IAAAC,EAAA,uBAAiB,CAAA,EAAA,MAAAD,EAAA,IAAAE,EAAA,mEAAM,CAAA,EAAA,0BAAAF,EAAA,IAAAE,EAAA,mEAA0B,CAAA,EAAA,iBAAAF,EAAA,IAAAE,EAAA,mEAAiB,CAAA,EAAA,sBAAAF,MAAAD,EAAA,OAAA,CAAqB,SAAA,UAAU,CAAA,EAAA,iBAAAC,EAAA,IAAAC,EAAA,uBAAiB,CAAA,EAAA,MAAAD,EAAA,IAAAC,EAAA,0BAAS,CAAA,EAAA,0CAAAD,EAAA,IAAAE,EAAA,mEAA0C,CAAA,EAAA,sBAAAF,EAAA,IAAAE,EAAA,mEAAsB,CAAA,EAAA,uDAAAF,EAAA,IAAAE,EAAA,sEAA2D,CAAA,EAAA,eAAA;;;;;;;;;;;;sJAkBtU,SAAA,8FAEO,SAAA,CAAA,IAAAF,EAAA,IAAAE,EAAA;;6JAMA,SAAA,CAAA,IAAAF,EAAA,IAAAE,EAAA;;6JAMA,SAAA,CAAA,IAAAF,EAAA,IAAAE,EAAA;;6JAMA,SAAA,CAAA,IAAAF,EAAA,IAAAE,EAAA;;6JAMA,SAAA,CAAA,IAAAF,EAAA,IAAAE,EAAA,8LAKL,SAAA;;iJAQA,SAAA,CAAA,sCAAAF,EAAA,IAAAE,EAAA,mEAAsC,CAAA,EAAA,4CAAAF,EAAA,IAAAE,EAAA,mEAA4C,CAAA,EAAA,+CAAAF,EAAA,IAAAE,EAAA,mEAA+C,CAAA,EAAA,kCAAAF,EAAA,IAAAE,EAAA,mEAAkC,CAAA,EAAA,mBAAAF,EAAA,IAAAE,EAAA,mEAAmB,CAAA,EAAA,0GAAAF,EAAA,IAAAE,EAAA,qEAA6G,CAAA,EAAA,iFAAAJ,OAAAC,EAAA,KAAA,+FAAoF,CAAA,EAAA,uFAAAC,EAAA,IAAAE,EAAA,mEAAwF,CAAA,EAAA,eAAAF,EAAA,IAAAE,EAAA,uEAAmB,CAAA,EAAA,kDAAAJ,OAAAC,EAAA,KAAA,ooBCzDpe,SAAA,CAAA,kFAAAC,MAAAD,EAAA,OAAA,CAAiF,SAAA,cAAc,CAAA,EAAA,IAAAC,EAAA,IAAAE,EAAA,mEAAI,CAAA,EAAA,GAAA;;;;;uJAWnG,SAAA,CAAA,aAAAF,EAAA,IAAAE,EAAA,gFAA2B,CAAA,EAAA,sDAAAF,EAAA,IAAAE,EAAA,yEAA4D,CAAA,EAAA,GAAA,ujBAQrF,SAAA,CAAA,iBAAAJ,OAAAC,EAAA,KAAA,qHAEA,SAAA,CAAA,iCAAAC,EAAA,IAAAE,EAAA,gFAA+C,CAAA,EAAA,4CAAAF,EAAA,IAAAE,EAAA,2EAAoD,CAAA,EAAA,+EAAAJ,OAAAC,EAAA,KAAA,gGAAkF,CAAA,EAAA,6FAAAC,EAAA,IAAAC,EAAA,uBAA+F,CAAA,EAAA,MAAAH,OAAAC,EAAA,KAAA,0GAAoB,CAAA,EAAA,4CAAAD,OAAAC,EAAA,KAAA,mHAAoE,CAAA,EAAA,0GAAAC,EAAA,IAAAE,EAAA,yEAAiH,CAAA,EAAA,iEAAAJ,OAAAC,EAAA,KAAA,8yBCnB5d,SAAA,mFAGiB,OAAA,CAAA,EAAG,EAAG,CAAA,uCACN,OAAA,CAAA,EAAG,EAAG,CAAA,uCACN,OAAA,CAAA,EAAG,EAAG,CAAA,6CAGvB,SAAA,uEAGiB,OAAA,CAAA,EAAG,EAAG,CAAA,uCACN,OAAA,CAAA,EAAG,EAAG,CAAA,uCACN,OAAA,CAAA,EAAG,EAAG,CAAA,6CAGvB,SAAA,6EAGiB,OAAA,CAAA,EAAG,EAAG,CAAA,uCACN,OAAA,CAAA,EAAG,EAAG,CAAA,kkBCtB1B,SAAA;cAEA,SAAA,CAAA,2BAAAC,MAAAD,EAAA,GAAA,CAAyB,SAAA,YAAW,CAAA,EAAA,uCAAAC,MAAAD,EAAA,GAAA,CAAqC,SAAA,WAAU,CAAA,EAAA,wCAAAC,MAAAD,EAAA,GAAA,CAAsC,SAAA,YAAW,CAAA,EAAA,mBAAAC,MAAAD,EAAA,GAAA,CAAiB,SAAA,WAAU,CAAA,EAAA,IAAA;aAE/J,SAAA;cAEG,SAAA;cAEH,SAAA,CAAA,kCAAAC,MAAAD,EAAA,OAAA,CAAiC,SAAA,iBAAiB,CAAA,EAAA,gBAAAC,MAAAD,EAAA,OAAA,CAAe,SAAA,yBAAyB,CAAA,EAAA,6BAAA;;eAExF,SAAA,CAAA,aAAAC,MAAAD,EAAA,OAAA,CAAY,SAAA,6BAA6B,CAAA,EAAA,GAAA;eACzC,SAAA,CAAA,cAAAC,MAAAD,EAAA,OAAA,CAAa,SAAA,gBAAgB,CAAA,EAAA,qBAAA;eAC7B,SAAA,CAAA,aAAAC,MAAAD,EAAA,OAAA,CAAY,SAAA,uBAAuB,CAAA,EAAA,GAAA;;cAErC,SAAA,CAAA,+CAAAC,MAAAD,EAAA,GAAA,CAA6C,SAAA,iBAAgB,CAAA,EAAA,uCAAAC,MAAAD,EAAA,GAAA,CAAqC,SAAA,YAAW,CAAA,EAAA,uLAAA;cAEzG,SAAA;cAEJ,SAAA,CAAA,qBAAAC,MAAAD,EAAA,GAAA,CAAmB,SAAA,iBAAgB,CAAA,EAAA,iCAAAC,MAAAD,EAAA,OAAA,CAAgC,SAAA,UAAU,CAAA,EAAA,yDAAA;;eAE3E,SAAA,CAAA,4BAAAC,MAAAD,EAAA,GAAA,CAA0B,SAAA,QAAO,CAAA,EAAA,GAAA;eACjC,SAAA,CAAA,4BAAAC,MAAAD,EAAA,GAAA,CAA0B,SAAA,WAAU,CAAA,EAAA,GAAA;eACpC,SAAA,CAAA,4BAAAC,MAAAD,EAAA,GAAA,CAA0B,SAAA,QAAO,CAAA,EAAA,GAAA;;cAEnC,SAAA,CAAA,eAAAC,MAAAD,EAAA,GAAA,CAAa,SAAA,yBAAwB,CAAA,EAAA,iHAAA;;eAEnC,SAAA,CAAA,4BAAAC,MAAAD,EAAA,GAAA,CAA0B,SAAA,UAAS,CAAA,EAAA,GAAA;eACnC,SAAA,CAAA,4BAAAC,MAAAD,EAAA,GAAA,CAA0B,SAAA,QAAO,CAAA,EAAA,MAAAC,MAAAD,EAAA,GAAA,CAAI,SAAA,WAAU,CAAA,EAAA,GAAA;;cAE7C,SAAA;cAEJ,SAAA,CAAA,wEAAAC,MAAAD,EAAA,GAAA,CAAsE,SAAA,cAAa,CAAA,EAAA,mFAAAC,MAAAD,EAAA,EAAA,0BAAiF,SAAA,2BAA6C,CAAA,EAAA,UAAA;mWC1B1M,MAAMI,GAAW,CACtB,MAAO,wBACP,YAAa,2EACf,EAEA,SAAwBC,IAAM,CAE1B,OAAAC,EAAA,KAACC,EAAA,CACC,YAAY,2BACZ,gBAAiBH,GAAS,YAC1B,SAAU,GACV,SAAA,CAAAI,EAAA,IAACC,GAAO,EAAA,QACPC,GAAQ,EAAA,CAAA,CAAA,CAAA,CAGf"}