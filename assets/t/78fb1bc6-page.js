/*! For licenses information, see LICENSES.txt */
"use client";import{j as a}from"../_virtual_quizms-routes-f9dad0bd.js";import{P as g,I as X}from"../u/ed4b56fd-components.js";import{C as x,r as h,S as s,V as b}from"../i/12a8adb8-visualizer.js";import"../w/c63694d0-index.js";function E(){return{...g()}}const k={src:new URL("../f/f534e52a-sol.webp",import.meta.url).href,width:398,height:438};const F={kind:"categoryToolbox",contents:[{kind:"category",name:"Cicli",categorystyle:"loop_category",contents:[{kind:"block",type:"controls_repeat_ext",inputs:{TIMES:{block:{type:"math_number",fields:{NUM:10}}}}}]}]},J=JSON.parse('{"blocks":{"languageVersion":0,"blocks":[{"type":"start","id":"y=zq)Uya2A/{vyOtN[i6","x":61,"y":81}]},"variables":[]}'),V=JSON.parse(`[{"type":"start","message0":"inizia qui","inputsInline":true,"colour":20,"tooltip":"L'esecuzione inizia da qui","helpUrl":"","maxInstances":1,"js":"","nextStatement":null},{"type":"N","message0":"N","inputsInline":true,"colour":20,"tooltip":"numero di cibi in fila","helpUrl":"","js":["state.N",1.2],"output":"Number"},{"type":"prossimo cibo","message0":"prossimo cibo","inputsInline":true,"colour":20,"tooltip":"il prossimo cibo in fila","helpUrl":"","js":["state.pos < state.N ? state.queue[state.pos] : exit(false, \\"il cibo è finito\\")",15],"output":"String"},{"type":"cuoci","message0":"cuoci %1","args0":[{"type":"input_value","check":"String","name":"_ARG0"}],"inputsInline":true,"colour":20,"tooltip":"cuoci il cibo dato","helpUrl":"","js":"(function(x) {\\n  if (state.pos >= state.N)\\n    exit(false, \\"hai finito il cibo\\");\\n  if (state.queue[state.pos] !== x)\\n    exit(false, \\"questo non è il prossimo cibo\\");\\n  if (state.queue[state.pos].split(\\" \\").length > 1)\\n    exit(false, \\"stai cuocendo un cibo già cotto\\");\\n  state.queue[state.pos] += \\" cotta\\";\\n})(_ARG0);","nextStatement":null,"previousStatement":null},{"type":"mangia","message0":"mangia %1","args0":[{"type":"input_value","check":"String","name":"_ARG0"}],"inputsInline":true,"colour":20,"tooltip":"mangia il cibo dato","helpUrl":"","js":"(function(x) {\\n  if (state.pos >= state.N)\\n    exit(false, \\"hai finito il cibo\\");\\n  if (state.queue[state.pos] !== x)\\n    exit(false, \\"questo non è il prossimo cibo\\");\\n  food = state.queue[state.pos].split(\\" \\");\\n  if (!(food[0] in state.food_types))\\n    exit(false, \\"non conosco il cibo \\" + food[0]);\\n  state.pos += 1;\\n  if (food.length == 1)\\n    exit(false, \\"Tip-Tap non mangia il cibo crudo\\");\\n})(_ARG0);","nextStatement":null,"previousStatement":null},{"type":"termina","message0":"termina","inputsInline":true,"colour":20,"tooltip":"smetti di mangiare","helpUrl":"","js":"if (state.pos < state.N)\\n  exit(false, \\"non hai finito il cibo\\");\\nexit(true, \\"hai finito tutto il cibo, complimenti!\\");","previousStatement":null}]`),W=JSON.parse('[{"food_types":{"carota":"verdura","patata":"verdura","melanzana":"verdura","mela":"frutta","banana":"frutta","fragola":"frutta"},"queue":["fragola","banana","melanzana","patata","mela"],"pos":0,"N":5},{"food_types":{"carota":"verdura","patata":"verdura","melanzana":"verdura","mela":"frutta","banana":"frutta","fragola":"frutta"},"queue":["patata","melanzana","carota","patata","patata","melanzana","patata","carota","melanzana","patata"],"pos":0,"N":10},{"food_types":{"carota":"verdura","patata":"verdura","melanzana":"verdura","mela":"frutta","banana":"frutta","fragola":"frutta"},"queue":["mela","fragola","fragola","fragola","fragola","mela","fragola","fragola","fragola","banana","mela","banana","banana","fragola","fragola","banana","fragola","mela","fragola","banana"],"pos":0,"N":20},{"food_types":{"carota":"verdura","patata":"verdura","melanzana":"verdura","mela":"frutta","banana":"frutta","fragola":"frutta"},"queue":["carota","banana","melanzana","banana","banana","carota","melanzana","fragola","patata","patata","fragola","patata","mela","patata","fragola","banana","melanzana","carota","patata","mela","fragola","carota","mela","banana","mela","banana","mela","fragola","mela","mela","melanzana","mela","melanzana","mela","patata","patata","patata","mela","mela","melanzana"],"pos":0,"N":40}]'),j={src:new URL("../2/2ea51814-cibo-banana.svg",import.meta.url).href,width:120,height:44.06091370558376},y={src:new URL("../4/4ea26069-cibo-carota.svg",import.meta.url).href,width:120,height:44.87309644670051},v={src:new URL("../4/4f18ed79-cibo-fragola.svg",import.meta.url).href,width:120,height:42.43654822335025},_={src:new URL("../d/d6b2202b-cibo-mela.svg",import.meta.url).href,width:120,height:40.81218274111675},z={src:new URL("../7/7866e5c0-cibo-melanzana.svg",import.meta.url).href,width:120,height:48.121827411167516},S={src:new URL("../d/d9497179-cibo-patata.svg",import.meta.url).href,width:120,height:42.43654822335025},H={src:new URL("../9/98ab570a-bunny.svg",import.meta.url).href,width:66,height:116.42696629213484},w={src:new URL("../4/4f6add51-fornello-acceso.svg",import.meta.url).href,width:120,height:65.87837837837837},N={src:new URL("../c/c562c5f2-fornello-retro.svg",import.meta.url).href,width:120,height:61.3109243697479},q={src:new URL("../8/88beed90-fornello-spento.svg",import.meta.url).href,width:120,height:65.87837837837837},Q=Object.assign({"./asy/cibo-banana.asy":j,"./asy/cibo-carota.asy":y,"./asy/cibo-fragola.asy":v,"./asy/cibo-mela.asy":_,"./asy/cibo-melanzana.asy":z,"./asy/cibo-patata.asy":S});function K({variables:t,state:e}){function i(o,n){return o===-1?[1.4,1.3]:n?[2.2,1.5]:[.5*o+2.4,1.3]}return a.jsxs(a.Fragment,{children:[a.jsxs(x,{scale:130,children:[a.jsx(s,{src:H,alt:"Tip-Tap",x:1.6,y:.9,follow:!0}),a.jsx(s,{src:N,alt:"Fornello",x:2.2,y:1.5}),h(Math.max(e.pos-1,0),e.N).map(o=>{const n=i(o-e.pos,e.queue[o].endsWith(" cotta"));return a.jsx(s,{src:Q[`./asy/cibo-${e.queue[o].split(" ")[0]}.asy`],alt:e.queue[o],x:n[0],y:n[1]},o)}),a.jsx(s,{src:e.pos<e.N&&e.queue[e.pos].endsWith(" cotta")?w:q,alt:"Fornello",x:2.2,y:1.5})]}),a.jsx(b,{variables:{...t,"N (num. cibi)":e.N}})]})}function A(t){const e={em:"em",li:"li",p:"p",span:"span",ul:"ul",...E(),...t.components},{Blockly:i,Code:o,Equation:n,Explanation:l,Image:r,SubProblem:c}=e;return i||p("Blockly"),o||p("Code"),n||p("Equation"),l||p("Explanation"),r||p("Image"),c||p("SubProblem"),a.jsxs(c,{children:[a.jsxs(e.p,{children:["Tip-Tap deve preparare il pranzo ed ha allineato ",a.jsx(n,{children:String.raw`N`}),` cibi che vuole mangiare dopo averli cotti.
Hai a disposizione questi blocchi:`]}),a.jsxs(e.ul,{children:[`
`,a.jsxs(e.li,{children:[a.jsx(o,{code:String.raw`N`,inline:!0,lang:"text",className:"p-0 text-base"}),": il numero di cibi che Tip-Tap ha allineato."]}),`
`,a.jsxs(e.li,{children:[a.jsx(o,{code:String.raw`prossimo cibo`,inline:!0,lang:"text",className:"p-0 text-base"}),": il prossimo cibo che Tip-Tap non ha ancora mangiato."]}),`
`,a.jsxs(e.li,{children:[a.jsx(o,{code:String.raw`cuoci`,inline:!0,lang:"text",className:"p-0 text-base"})," ",a.jsxs(e.span,{className:"inline-block whitespace-nowrap",children:[a.jsx(n,{children:String.raw`x`}),":"]})," cuoci il cibo ",a.jsxs(e.span,{className:"inline-block whitespace-nowrap",children:[a.jsx(n,{children:String.raw`x`}),"."]})]}),`
`,a.jsxs(e.li,{children:[a.jsx(o,{code:String.raw`mangia`,inline:!0,lang:"text",className:"p-0 text-base"})," ",a.jsxs(e.span,{className:"inline-block whitespace-nowrap",children:[a.jsx(n,{children:String.raw`x`}),":"]})," mangia il cibo ",a.jsxs(e.span,{className:"inline-block whitespace-nowrap",children:[a.jsx(n,{children:String.raw`x`}),"."]})]}),`
`,a.jsxs(e.li,{children:[a.jsx(o,{code:String.raw`termina`,inline:!0,lang:"text",className:"p-0 text-base"}),": smetti di mangiare."]}),`
`]}),a.jsx(e.p,{children:"Scrivi un programma che consenta a Tip-Tap di pranzare come più preferisce!"}),a.jsxs(e.p,{children:["Ti basterà usare i tipi di blocchi (",a.jsx(e.em,{children:"“Esecuzione”"})," e ",a.jsx(e.em,{children:"“Cicli”"}),`) visti nella sezione precedente.
Attenzione che alcuni blocchi `,a.jsx(e.em,{children:"“Esecuzione”"}),` questa volta contengono uno spazio in cui puoi inserire un altro blocco di tipo numerico (tondo),
in maniera simile a come si inserisce un blocco numerico nei cicli per indicare quante volte ripetere.`]}),a.jsx(i,{toolbox:F,customBlocks:V,initialBlocks:J,testcases:W,visualizer:K}),a.jsxs(l,{children:[a.jsx(e.p,{children:"Un possibile programma corretto è il seguente:"}),a.jsx(e.p,{children:a.jsx(r,{alt:"soluzione",src:typeof k=="function"?k(_variant):k})}),a.jsxs(e.p,{children:["Secondo questo programma, per ognuno degli ",a.jsx(n,{children:String.raw`N`}),` cibi che Tip-Tap vuole mangiare, il protagonista
lo cuoce e poi lo mangia.`]})]})]})}function Y(t={}){const{wrapper:e}={...E(),...t.components};return e?a.jsx(e,{...t,children:a.jsx(A,{...t})}):A(t)}function p(t,e){throw new Error("Expected component `"+t+"` to be defined: you likely forgot to import, pass, or provide it.")}function T(){return{...g()}}const C={src:new URL("../a/ac36d93f-sol.webp",import.meta.url).href,width:627,height:579};const Z={kind:"categoryToolbox",contents:[{kind:"category",name:"Logica",categorystyle:"logic_category",contents:[{kind:"block",type:"controls_if"}]},{kind:"category",name:"Cicli",categorystyle:"loop_category",contents:[{kind:"block",type:"controls_repeat_ext",inputs:{TIMES:{block:{type:"math_number",fields:{NUM:10}}}}}]}]},aa=JSON.parse('{"blocks":{"languageVersion":0,"blocks":[{"type":"start","id":"y=zq)Uya2A/{vyOtN[i6","x":61,"y":81}]},"variables":[]}'),ea=JSON.parse(`[{"type":"start","message0":"inizia qui","inputsInline":true,"colour":20,"tooltip":"L'esecuzione inizia da qui","helpUrl":"","maxInstances":1,"js":"","nextStatement":null},{"type":"N","message0":"N","inputsInline":true,"colour":20,"tooltip":"numero di cibi in fila","helpUrl":"","js":["state.N",1.2],"output":"Number"},{"type":"prossimo cibo","message0":"prossimo cibo","inputsInline":true,"colour":20,"tooltip":"il prossimo cibo in fila","helpUrl":"","js":["state.pos < state.N ? state.queue[state.pos] : exit(false, \\"il cibo è finito\\")",15],"output":"String"},{"type":"è una verdura","message0":"%1 è una verdura","args0":[{"type":"input_value","check":"String","name":"_ARG0"}],"inputsInline":true,"colour":20,"tooltip":"se il cibo dato è una verdura","helpUrl":"","js":["(function(x) {\\n  food = x.split(\\" \\")[0];\\n  if (food in state.food_types)\\n    return state.food_types[food] === \\"verdura\\";\\n  exit(false, \\"non conosco il cibo \\" + x);\\n})(_ARG0)",2],"output":"Boolean"},{"type":"cuoci","message0":"cuoci %1","args0":[{"type":"input_value","check":"String","name":"_ARG0"}],"inputsInline":true,"colour":20,"tooltip":"cuoci il cibo dato","helpUrl":"","js":"(function(x) {\\n  if (state.pos >= state.N)\\n    exit(false, \\"hai finito il cibo\\");\\n  if (state.queue[state.pos] !== x)\\n    exit(false, \\"questo non è il prossimo cibo\\");\\n  if (state.queue[state.pos].split(\\" \\").length > 1)\\n    exit(false, \\"stai cuocendo un cibo già cotto\\");\\n  state.queue[state.pos] += \\" cotta\\";\\n})(_ARG0);","nextStatement":null,"previousStatement":null},{"type":"mangia","message0":"mangia %1","args0":[{"type":"input_value","check":"String","name":"_ARG0"}],"inputsInline":true,"colour":20,"tooltip":"mangia il cibo dato","helpUrl":"","js":"(function(x) {\\n  if (state.pos >= state.N)\\n    exit(false, \\"hai finito il cibo\\");\\n  if (state.queue[state.pos] !== x)\\n    exit(false, \\"questo non è il prossimo cibo\\");\\n  food = state.queue[state.pos].split(\\" \\");\\n  if (!(food[0] in state.food_types))\\n    exit(false, \\"non conosco il cibo \\" + food[0]);\\n  state.pos += 1;\\n  if (state.food_types[food[0]] == \\"verdura\\" && food.length == 1)\\n    exit(false, \\"a Bunny non piace la verdura cruda\\");\\n  if (state.food_types[food[0]] == \\"frutta\\" && food.length > 1)\\n    exit(false, \\"a Bunny non piace la frutta cotta\\");\\n})(_ARG0);","nextStatement":null,"previousStatement":null},{"type":"termina","message0":"termina","inputsInline":true,"colour":20,"tooltip":"smetti di mangiare","helpUrl":"","js":"if (state.pos < state.N)\\n  exit(false, \\"non hai finito il cibo\\");\\nexit(true, \\"hai finito tutto il cibo, complimenti!\\");","previousStatement":null}]`),oa=JSON.parse('[{"food_types":{"carota":"verdura","patata":"verdura","melanzana":"verdura","mela":"frutta","banana":"frutta","fragola":"frutta"},"queue":["fragola","banana","melanzana","patata","mela"],"pos":0,"N":5},{"food_types":{"carota":"verdura","patata":"verdura","melanzana":"verdura","mela":"frutta","banana":"frutta","fragola":"frutta"},"queue":["patata","melanzana","carota","patata","patata","melanzana","patata","carota","melanzana","patata"],"pos":0,"N":10},{"food_types":{"carota":"verdura","patata":"verdura","melanzana":"verdura","mela":"frutta","banana":"frutta","fragola":"frutta"},"queue":["mela","fragola","fragola","fragola","fragola","mela","fragola","fragola","fragola","banana","mela","banana","banana","fragola","fragola","banana","fragola","mela","fragola","banana"],"pos":0,"N":20},{"food_types":{"carota":"verdura","patata":"verdura","melanzana":"verdura","mela":"frutta","banana":"frutta","fragola":"frutta"},"queue":["carota","banana","melanzana","banana","banana","carota","melanzana","fragola","patata","patata","fragola","patata","mela","patata","fragola","banana","melanzana","carota","patata","mela","fragola","carota","mela","banana","mela","banana","mela","fragola","mela","mela","melanzana","mela","melanzana","mela","patata","patata","patata","mela","mela","melanzana"],"pos":0,"N":40}]'),na={src:new URL("../2/27400aa0-bunny.svg",import.meta.url).href,width:66,height:116.42696629213484},ta=Object.assign({"./asy/cibo-banana.asy":j,"./asy/cibo-carota.asy":y,"./asy/cibo-fragola.asy":v,"./asy/cibo-mela.asy":_,"./asy/cibo-melanzana.asy":z,"./asy/cibo-patata.asy":S});function ia({variables:t,state:e}){function i(o,n){return o===-1?[1.4,1.3]:n?[2.2,1.5]:[.5*o+2.4,1.3]}return a.jsxs(a.Fragment,{children:[a.jsxs(x,{scale:130,children:[a.jsx(s,{src:na,alt:"Tip-Tap",x:1.6,y:.9,follow:!0}),a.jsx(s,{src:N,alt:"Fornello",x:2.2,y:1.5}),h(Math.max(e.pos-1,0),e.N).map(o=>{const n=i(o-e.pos,e.queue[o].endsWith(" cotta"));return a.jsx(s,{src:ta[`./asy/cibo-${e.queue[o].split(" ")[0]}.asy`],alt:e.queue[o],x:n[0],y:n[1]},o)}),a.jsx(s,{src:e.pos<e.N&&e.queue[e.pos].endsWith(" cotta")?w:q,alt:"Fornello",x:2.2,y:1.5})]}),a.jsx(b,{variables:{...t,"N (num. cibi)":e.N}})]})}function I(t){const e={em:"em",li:"li",p:"p",span:"span",strong:"strong",ul:"ul",...T(),...t.components},{Blockly:i,Code:o,Equation:n,Explanation:l,Image:r,SubProblem:c}=e;return i||m("Blockly"),o||m("Code"),n||m("Equation"),l||m("Explanation"),r||m("Image"),c||m("SubProblem"),a.jsxs(c,{children:[a.jsxs(e.p,{children:["Anche Bunny è ora a pranzo e ha allineato ",a.jsx(n,{children:String.raw`N`}),` cibi. Come Tip-Tap, anche lui cuoce le verdure; tuttavia, non gli piace la frutta cotta.
Hai a disposizione gli stessi blocchi di prima, più uno per capire se un cibo è frutta o verdura:`]}),a.jsxs(e.ul,{children:[`
`,a.jsxs(e.li,{children:[a.jsx(o,{code:String.raw`N`,inline:!0,lang:"text",className:"p-0 text-base"}),": il numero di cibi che Bunny ha allineato."]}),`
`,a.jsxs(e.li,{children:[a.jsx(o,{code:String.raw`prossimo cibo`,inline:!0,lang:"text",className:"p-0 text-base"}),": il prossimo cibo che Bunny non ha ancora mangiato."]}),`
`,a.jsxs(e.li,{children:[a.jsx(n,{children:String.raw`x`})," ",a.jsx(o,{code:String.raw`è una verdura`,inline:!0,lang:"text",className:"p-0 text-base"}),": vero se il cibo ",a.jsx(n,{children:String.raw`x`})," è una verdura ",a.jsx(e.strong,{children:"(nuovo!)"}),"."]}),`
`,a.jsxs(e.li,{children:[a.jsx(o,{code:String.raw`cuoci`,inline:!0,lang:"text",className:"p-0 text-base"})," ",a.jsxs(e.span,{className:"inline-block whitespace-nowrap",children:[a.jsx(n,{children:String.raw`x`}),":"]})," cuoci il cibo ",a.jsxs(e.span,{className:"inline-block whitespace-nowrap",children:[a.jsx(n,{children:String.raw`x`}),"."]})]}),`
`,a.jsxs(e.li,{children:[a.jsx(o,{code:String.raw`mangia`,inline:!0,lang:"text",className:"p-0 text-base"})," ",a.jsxs(e.span,{className:"inline-block whitespace-nowrap",children:[a.jsx(n,{children:String.raw`x`}),":"]})," mangia il cibo ",a.jsxs(e.span,{className:"inline-block whitespace-nowrap",children:[a.jsx(n,{children:String.raw`x`}),"."]})]}),`
`,a.jsxs(e.li,{children:[a.jsx(o,{code:String.raw`termina`,inline:!0,lang:"text",className:"p-0 text-base"}),": smetti di mangiare."]}),`
`]}),a.jsx(e.p,{children:"Scrivi un programma che consenta a Bunny di pranzare come più preferisce!"}),a.jsxs(e.p,{children:["Nota che il blocco che controlla se un cibo è una verdura, che si trova sempre nella sezione ",a.jsx(e.em,{children:"“Esecuzione”"}),`, ha una forma diversa del solito, ad esagono allungato.
Nella programmazione a blocchi, questa è la forma dei blocchi che producono un valore vero/falso!
Le altre forme che abbiamo già visto sono:`]}),a.jsxs(e.ul,{children:[`
`,a.jsxs(e.li,{children:[a.jsx(e.strong,{children:"rettangolare"}),", usata per le istruzioni che compiono una qualche azione;"]}),`
`,a.jsxs(e.li,{children:[a.jsx(e.strong,{children:"stondata"}),", usata per i blocchi che calcolano un valore di tipo numerico."]}),`
`]}),a.jsxs(e.p,{children:["Puoi inserire i blocchi esagonali come condizioni nei blocchi ",a.jsx(e.strong,{children:"condizionali"}),", che trovi nella sezione ",a.jsx(e.em,{children:"“Logica”"}),", tramite cui scegliere quali istruzioni eseguire."]}),a.jsx(i,{toolbox:Z,customBlocks:ea,initialBlocks:aa,testcases:oa,visualizer:ia}),a.jsxs(l,{children:[a.jsx(e.p,{children:"Un possibile programma corretto è il seguente:"}),a.jsx(e.p,{children:a.jsx(r,{alt:"soluzione",src:typeof C=="function"?C(_variant):C})}),a.jsxs(e.p,{children:["Secondo questo programma, per ognuno degli ",a.jsx(n,{children:String.raw`N`}),` cibi che Bunny vuole mangiare, il protagonista
controlla se il prossimo cibo è una verdura, e in caso affermativo la cuoce prima di mangiarla.
A questo punto mangia il prossimo cibo (che sia verdura o frutta), che sarà di suo gradimento:
verdura cotta o frutta cruda.`]})]})]})}function sa(t={}){const{wrapper:e}={...T(),...t.components};return e?a.jsx(e,{...t,children:a.jsx(I,{...t})}):I(t)}function m(t,e){throw new Error("Expected component `"+t+"` to be defined: you likely forgot to import, pass, or provide it.")}function G(){return{...g()}}const U={src:new URL("../d/d3cebcd0-sol.webp",import.meta.url).href,width:1237,height:604};const la={kind:"categoryToolbox",contents:[{kind:"category",name:"Logica",categorystyle:"logic_category",contents:[{kind:"block",type:"logic_operation"},{kind:"block",type:"logic_negate"},{kind:"block",type:"controls_if"},{kind:"block",type:"controls_if",extraState:{hasElse:"true"}}]},{kind:"category",name:"Cicli",categorystyle:"loop_category",contents:[{kind:"block",type:"controls_repeat_ext",inputs:{TIMES:{block:{type:"math_number",fields:{NUM:10}}}}},{kind:"block",type:"controls_whileUntil"}]}]},ra=JSON.parse('{"blocks":{"languageVersion":0,"blocks":[{"type":"start","id":"y=zq)Uya2A/{vyOtN[i6","x":61,"y":81}]},"variables":[]}'),ca=JSON.parse(`[{"type":"start","message0":"inizia qui","inputsInline":true,"colour":20,"tooltip":"L'esecuzione inizia da qui","helpUrl":"","maxInstances":1,"js":"","nextStatement":null},{"type":"N","message0":"N","inputsInline":true,"colour":20,"tooltip":"numero di cibi in fila","helpUrl":"","js":["state.N",1.2],"output":"Number"},{"type":"prossimo cibo","message0":"prossimo cibo","inputsInline":true,"colour":20,"tooltip":"il prossimo cibo in fila","helpUrl":"","js":["state.pos < state.N ? state.queue[state.pos] : exit(false, \\"il cibo è finito\\")",15],"output":"String"},{"type":"è una verdura","message0":"%1 è una verdura","args0":[{"type":"input_value","check":"String","name":"_ARG0"}],"inputsInline":true,"colour":20,"tooltip":"se il cibo dato è una verdura","helpUrl":"","js":["(function(x) {\\n  food = x.split(\\" \\")[0];\\n  if (food in state.food_types)\\n    return state.food_types[food] === \\"verdura\\";\\n  exit(false, \\"non conosco il cibo \\" + x);\\n})(_ARG0)",2],"output":"Boolean"},{"type":"è giallo","message0":"%1 è giallo","args0":[{"type":"input_value","check":"String","name":"_ARG0"}],"inputsInline":true,"colour":20,"tooltip":"se il cibo dato è giallo","helpUrl":"","js":["(function(x) {\\n  food = x.split(\\" \\")[0];\\n  if (food in state.food_colors)\\n    return state.food_colors[food] === \\"giallo\\";\\n  exit(false, \\"non conosco il cibo \\" + x);\\n})(_ARG0)",2],"output":"Boolean"},{"type":"cuoci","message0":"cuoci %1","args0":[{"type":"input_value","check":"String","name":"_ARG0"}],"inputsInline":true,"colour":20,"tooltip":"cuoci il cibo dato","helpUrl":"","js":"(function(x) {\\n  if (state.pos >= state.N)\\n    exit(false, \\"hai finito il cibo\\");\\n  if (state.queue[state.pos] !== x)\\n    exit(false, \\"questo non è il prossimo cibo\\");\\n  if (state.queue[state.pos].split(\\" \\").length > 1)\\n    exit(false, \\"stai cuocendo un cibo già cotto\\");\\n  state.queue[state.pos] += \\" cotta\\";\\n})(_ARG0);","nextStatement":null,"previousStatement":null},{"type":"mangia","message0":"mangia %1","args0":[{"type":"input_value","check":"String","name":"_ARG0"}],"inputsInline":true,"colour":20,"tooltip":"mangia il cibo dato","helpUrl":"","js":"(function(x) {\\n  if (state.pos >= state.N)\\n    exit(false, \\"hai finito il cibo\\");\\n  if (state.queue[state.pos] !== x)\\n    exit(false, \\"questo non è il prossimo cibo\\");\\n  food = state.queue[state.pos].split(\\" \\");\\n  if (!(food[0] in state.food_types))\\n    exit(false, \\"non conosco il cibo \\" + food[0]);\\n  state.pos += 1;\\n  state.trash = false;\\n  if (state.food_types[food[0]] == \\"verdura\\" && state.food_colors[food[0]] != \\"giallo\\" && food.length == 1)\\n    exit(false, \\"a Carol non piace la verdura cruda se non è gialla\\");\\n  if (state.food_types[food[0]] == \\"verdura\\" && state.food_colors[food[0]] == \\"giallo\\" && food.length > 1)\\n    exit(false, \\"a Carol non piace la verdura gialla cotta\\");\\n  if (state.food_types[food[0]] == \\"frutta\\" && food.length > 1)\\n    exit(false, \\"a Carol non piace la frutta cotta\\");\\n})(_ARG0);","nextStatement":null,"previousStatement":null},{"type":"butta","message0":"butta %1","args0":[{"type":"input_value","check":"String","name":"_ARG0"}],"inputsInline":true,"colour":20,"tooltip":"butta via il cibo dato","helpUrl":"","js":"(function(x) {\\n  if (state.pos >= state.N)\\n    exit(false, \\"hai finito il cibo\\");\\n  if (state.queue[state.pos] !== x)\\n    exit(false, \\"questo non è il prossimo cibo\\");\\n  food = state.queue[state.pos].split(\\" \\");\\n  if (!(food[0] in state.food_types))\\n    exit(false, \\"non conosco il cibo \\" + food[0]);\\n  state.pos += 1;\\n  state.trash = true;\\n  exit(false, \\"a Carol piace tutto, non dovevi buttare via questo\\");\\n})(_ARG0);","nextStatement":null,"previousStatement":null},{"type":"termina","message0":"termina","inputsInline":true,"colour":20,"tooltip":"smetti di mangiare","helpUrl":"","js":"if (state.pos < state.N)\\n  exit(false, \\"non hai finito il cibo\\");\\nexit(true, \\"hai finito tutto il cibo, complimenti!\\");","previousStatement":null}]`),ua=JSON.parse('[{"food_types":{"carota":"verdura","patata":"verdura","melanzana":"verdura","mela":"frutta","banana":"frutta","fragola":"frutta"},"food_colors":{"carota":"giallo","patata":"marrone","melanzana":"viola","mela":"rosso","banana":"giallo","fragola":"rosso"},"queue":["fragola","banana","melanzana","patata","mela"],"pos":0,"trash":false,"N":5},{"food_types":{"carota":"verdura","patata":"verdura","melanzana":"verdura","mela":"frutta","banana":"frutta","fragola":"frutta"},"food_colors":{"carota":"giallo","patata":"marrone","melanzana":"viola","mela":"rosso","banana":"giallo","fragola":"rosso"},"queue":["patata","melanzana","carota","patata","patata","melanzana","patata","carota","melanzana","patata"],"pos":0,"trash":false,"N":10},{"food_types":{"carota":"verdura","patata":"verdura","melanzana":"verdura","mela":"frutta","banana":"frutta","fragola":"frutta"},"food_colors":{"carota":"giallo","patata":"marrone","melanzana":"viola","mela":"rosso","banana":"giallo","fragola":"rosso"},"queue":["mela","fragola","fragola","fragola","fragola","mela","fragola","fragola","fragola","banana","mela","banana","banana","fragola","fragola","banana","fragola","mela","fragola","banana"],"pos":0,"trash":false,"N":20},{"food_types":{"carota":"verdura","patata":"verdura","melanzana":"verdura","mela":"frutta","banana":"frutta","fragola":"frutta"},"food_colors":{"carota":"giallo","patata":"marrone","melanzana":"viola","mela":"rosso","banana":"giallo","fragola":"rosso"},"queue":["carota","banana","melanzana","banana","banana","carota","melanzana","fragola","patata","patata","fragola","patata","mela","patata","fragola","banana","melanzana","carota","patata","mela","fragola","carota","mela","banana","mela","banana","mela","fragola","mela","mela","melanzana","mela","melanzana","mela","patata","patata","patata","mela","mela","melanzana"],"pos":0,"trash":false,"N":40}]'),pa={src:new URL("../d/d5b24aa0-bunny.svg",import.meta.url).href,width:66,height:116.42696629213484},ma=Object.assign({"./asy/cibo-banana.asy":j,"./asy/cibo-carota.asy":y,"./asy/cibo-fragola.asy":v,"./asy/cibo-mela.asy":_,"./asy/cibo-melanzana.asy":z,"./asy/cibo-patata.asy":S});function da({variables:t,state:e}){function i(o,n){return o===-1?e.trash?[.5,1.7]:[1.4,1.3]:n?[2.2,1.5]:[.5*o+2.4,1.3]}return a.jsxs(a.Fragment,{children:[a.jsxs(x,{scale:130,children:[a.jsx(s,{src:pa,alt:"Tip-Tap",x:1.6,y:.9,follow:!0}),a.jsx(s,{src:N,alt:"Fornello",x:2.2,y:1.5}),h(Math.max(e.pos-1,0),e.N).map(o=>{const n=i(o-e.pos,e.queue[o].endsWith(" cotta"));return a.jsx(s,{src:ma[`./asy/cibo-${e.queue[o].split(" ")[0]}.asy`],alt:e.queue[o],x:n[0],y:n[1]},o)}),a.jsx(s,{src:e.pos<e.N&&e.queue[e.pos].endsWith(" cotta")?w:q,alt:"Fornello",x:2.2,y:1.5})]}),a.jsx(b,{variables:{...t,"N (num. cibi)":e.N}})]})}function $(t){const e={em:"em",li:"li",p:"p",span:"span",ul:"ul",...G(),...t.components},{Blockly:i,Code:o,Equation:n,Explanation:l,Image:r,SubProblem:c}=e;return i||d("Blockly"),o||d("Code"),n||d("Equation"),l||d("Explanation"),r||d("Image"),c||d("SubProblem"),a.jsxs(c,{children:[a.jsxs(e.p,{children:["Anche Carol è ora a pranzo e ha allineato ",a.jsx(n,{children:String.raw`N`}),` cibi. Come Bunny, anche lei mangia di tutto e preferisce mangiare la frutta cruda.
Tuttavia non cuoce tutte le verdure: cuoce solo quelle che non sono gialle!
Hai a disposizione gli stessi blocchi di prima:`]}),a.jsxs(e.ul,{children:[`
`,a.jsxs(e.li,{children:[a.jsx(o,{code:String.raw`N`,inline:!0,lang:"text",className:"p-0 text-base"}),": il numero di cibi che Carol ha allineato."]}),`
`,a.jsxs(e.li,{children:[a.jsx(o,{code:String.raw`prossimo cibo`,inline:!0,lang:"text",className:"p-0 text-base"}),": il prossimo cibo che Carol non ha ancora mangiato."]}),`
`,a.jsxs(e.li,{children:[a.jsx(n,{children:String.raw`x`})," ",a.jsx(o,{code:String.raw`è una verdura`,inline:!0,lang:"text",className:"p-0 text-base"}),": vero se il cibo ",a.jsx(n,{children:String.raw`x`})," è una verdura."]}),`
`,a.jsxs(e.li,{children:[a.jsx(n,{children:String.raw`x`})," ",a.jsx(o,{code:String.raw`è giallo`,inline:!0,lang:"text",className:"p-0 text-base"}),": vero se il cibo ",a.jsx(n,{children:String.raw`x`})," è giallo."]}),`
`,a.jsxs(e.li,{children:[a.jsx(o,{code:String.raw`cuoci`,inline:!0,lang:"text",className:"p-0 text-base"})," ",a.jsxs(e.span,{className:"inline-block whitespace-nowrap",children:[a.jsx(n,{children:String.raw`x`}),":"]})," cuoci il cibo ",a.jsxs(e.span,{className:"inline-block whitespace-nowrap",children:[a.jsx(n,{children:String.raw`x`}),"."]})]}),`
`,a.jsxs(e.li,{children:[a.jsx(o,{code:String.raw`mangia`,inline:!0,lang:"text",className:"p-0 text-base"})," ",a.jsxs(e.span,{className:"inline-block whitespace-nowrap",children:[a.jsx(n,{children:String.raw`x`}),":"]})," mangia il cibo ",a.jsxs(e.span,{className:"inline-block whitespace-nowrap",children:[a.jsx(n,{children:String.raw`x`}),"."]})]}),`
`,a.jsxs(e.li,{children:[a.jsx(o,{code:String.raw`butta`,inline:!0,lang:"text",className:"p-0 text-base"})," ",a.jsxs(e.span,{className:"inline-block whitespace-nowrap",children:[a.jsx(n,{children:String.raw`x`}),":"]})," butta via il cibo ",a.jsxs(e.span,{className:"inline-block whitespace-nowrap",children:[a.jsx(n,{children:String.raw`x`}),"."]})]}),`
`,a.jsxs(e.li,{children:[a.jsx(o,{code:String.raw`termina`,inline:!0,lang:"text",className:"p-0 text-base"}),": smetti di mangiare."]}),`
`]}),a.jsx(e.p,{children:"Scrivi un programma che consenta a Carol di pranzare come più preferisce!"}),a.jsxs(e.p,{children:["Stavolta nella sezione ",a.jsx(e.em,{children:"“Logica”"}),` ci sono due nuovi blocchi esagonali: il blocco “non” che restituisce l’opposto di quello che gli viene inserito dentro (falso se vero, e vero se falso),
e il blocco “e/o” che combina due valori vero/falso (se scegli “e” il risultato finale sarà vero solo se i valori inseriti sono entrambi veri; se scegli “o” sarà falso solo se sono entrambi falsi).`]}),a.jsx(i,{toolbox:la,customBlocks:ca,initialBlocks:ra,testcases:ua,visualizer:da}),a.jsxs(l,{children:[a.jsx(e.p,{children:"Un possibile programma corretto è il seguente:"}),a.jsx(e.p,{children:a.jsx(r,{alt:"soluzione",src:typeof U=="function"?U(_variant):U})}),a.jsxs(e.p,{children:["Secondo questo programma, per ognuno degli ",a.jsx(n,{children:String.raw`N`}),` cibi che Carol vuole mangiare, il protagonista
controlla se il prossimo cibo è una verdura `,a.jsx(e.em,{children:"e"}),` non è giallo, e in caso affermativo lo cuoce prima di mangiarlo.
A questo punto mangia il prossimo cibo (che sia verdura o frutta, gialla o no), che sarà di suo gradimento.`]})]})]})}function fa(t={}){const{wrapper:e}={...G(),...t.components};return e?a.jsx(e,{...t,children:a.jsx($,{...t})}):$(t)}function d(t,e){throw new Error("Expected component `"+t+"` to be defined: you likely forgot to import, pass, or provide it.")}function P(){return{...g()}}const R={src:new URL("../5/5432abef-sol.webp",import.meta.url).href,width:677,height:719};const ga={kind:"categoryToolbox",contents:[{kind:"category",name:"Logica",categorystyle:"logic_category",contents:[{kind:"block",type:"controls_if"},{kind:"block",type:"controls_if",extraState:{hasElse:"true"}}]},{kind:"category",name:"Cicli",categorystyle:"loop_category",contents:[{kind:"block",type:"controls_repeat_ext",inputs:{TIMES:{block:{type:"math_number",fields:{NUM:10}}}}},{kind:"block",type:"controls_whileUntil"}]}]},xa=JSON.parse('{"blocks":{"languageVersion":0,"blocks":[{"type":"start","id":"y=zq)Uya2A/{vyOtN[i6","x":61,"y":81}]},"variables":[]}'),ha=JSON.parse(`[{"type":"start","message0":"inizia qui","inputsInline":true,"colour":20,"tooltip":"L'esecuzione inizia da qui","helpUrl":"","maxInstances":1,"js":"","nextStatement":null},{"type":"N","message0":"N","inputsInline":true,"colour":20,"tooltip":"numero di cibi in fila","helpUrl":"","js":["state.N",1.2],"output":"Number"},{"type":"prossimo cibo","message0":"prossimo cibo","inputsInline":true,"colour":20,"tooltip":"il prossimo cibo in fila","helpUrl":"","js":["state.pos < state.N ? state.queue[state.pos] : exit(false, \\"il cibo è finito\\")",15],"output":"String"},{"type":"è una verdura","message0":"%1 è una verdura","args0":[{"type":"input_value","check":"String","name":"_ARG0"}],"inputsInline":true,"colour":20,"tooltip":"se il cibo dato è una verdura","helpUrl":"","js":["(function(x) {\\n  food = x.split(\\" \\")[0];\\n  if (food in state.food_types)\\n    return state.food_types[food] === \\"verdura\\";\\n  exit(false, \\"non conosco il cibo \\" + x);\\n})(_ARG0)",2],"output":"Boolean"},{"type":"è giallo","message0":"%1 è giallo","args0":[{"type":"input_value","check":"String","name":"_ARG0"}],"inputsInline":true,"colour":20,"tooltip":"se il cibo dato è giallo","helpUrl":"","js":["(function(x) {\\n  food = x.split(\\" \\")[0];\\n  if (food in state.food_colors)\\n    return state.food_colors[food] === \\"giallo\\";\\n  exit(false, \\"non conosco il cibo \\" + x);\\n})(_ARG0)",2],"output":"Boolean"},{"type":"cuoci","message0":"cuoci %1","args0":[{"type":"input_value","check":"String","name":"_ARG0"}],"inputsInline":true,"colour":20,"tooltip":"cuoci il cibo dato","helpUrl":"","js":"(function(x) {\\n  if (state.pos >= state.N)\\n    exit(false, \\"hai finito il cibo\\");\\n  if (state.queue[state.pos] !== x)\\n    exit(false, \\"questo non è il prossimo cibo\\");\\n  if (state.queue[state.pos].split(\\" \\").length > 1)\\n    exit(false, \\"stai cuocendo un cibo già cotto\\");\\n  state.queue[state.pos] += \\" cotta\\";\\n  if (state.food_colors[food[0]] == \\"giallo\\")\\n    exit(false, \\"Allie ha visto il colore giallo, se ne deve andare dal pranzo\\");\\n  if (state.food_types[x] == \\"frutta\\")\\n    exit(false, \\"hai perso tempo a cuocere la frutta\\");\\n})(_ARG0);","nextStatement":null,"previousStatement":null},{"type":"mangia","message0":"mangia %1","args0":[{"type":"input_value","check":"String","name":"_ARG0"}],"inputsInline":true,"colour":20,"tooltip":"mangia il cibo dato","helpUrl":"","js":"(function(x) {\\n  if (state.pos >= state.N)\\n    exit(false, \\"hai finito il cibo\\");\\n  if (state.queue[state.pos] !== x)\\n    exit(false, \\"questo non è il prossimo cibo\\");\\n  food = state.queue[state.pos].split(\\" \\");\\n  if (!(food[0] in state.food_types))\\n    exit(false, \\"non conosco il cibo \\" + food[0]);\\n  state.pos += 1;\\n  state.trash = false;\\n  if (state.food_colors[food[0]] == \\"giallo\\")\\n    exit(false, \\"Allie ha visto il colore giallo, se ne deve andare dal pranzo\\");\\n  if (state.food_types[food[0]] == \\"verdura\\" && food.length == 1)\\n    exit(false, \\"a Allie non piace la verdura cruda\\");\\n  if (state.food_types[food[0]] == \\"frutta\\")\\n    exit(false, \\"a Allie non piace la frutta\\");\\n})(_ARG0);","nextStatement":null,"previousStatement":null},{"type":"butta","message0":"butta %1","args0":[{"type":"input_value","check":"String","name":"_ARG0"}],"inputsInline":true,"colour":20,"tooltip":"butta via il cibo dato","helpUrl":"","js":"(function(x) {\\n  if (state.pos >= state.N)\\n    exit(false, \\"hai finito il cibo\\");\\n  if (state.queue[state.pos] !== x)\\n    exit(false, \\"questo non è il prossimo cibo\\");\\n  food = state.queue[state.pos].split(\\" \\");\\n  if (!(food[0] in state.food_types))\\n    exit(false, \\"non conosco il cibo \\" + food[0]);\\n  state.pos += 1;\\n  state.trash = true;\\n  if (state.food_colors[food[0]] == \\"giallo\\")\\n    exit(false, \\"Allie ha visto il colore giallo, se ne deve andare dal pranzo\\");\\n  if (state.food_types[food[0]] == \\"verdura\\")\\n    exit(false, \\"a Allie piace la verdura, non dovevi buttarla\\");\\n})(_ARG0);","nextStatement":null,"previousStatement":null},{"type":"termina","message0":"termina","inputsInline":true,"colour":20,"tooltip":"smetti di mangiare","helpUrl":"","js":"if (state.pos < state.N && state.food_colors[state.queue[state.pos]] !== \\"giallo\\")\\n  exit(false, \\"potevi mangiare altro cibo\\");\\nexit(true, \\"hai mangiato tutto il cibo che potevi, complimenti!\\");","previousStatement":null}]`),ba=JSON.parse('[{"food_types":{"carota":"verdura","patata":"verdura","melanzana":"verdura","mela":"frutta","banana":"frutta","fragola":"frutta"},"food_colors":{"carota":"giallo","patata":"marrone","melanzana":"viola","mela":"rosso","banana":"giallo","fragola":"rosso"},"queue":["fragola","banana","melanzana","patata","mela"],"pos":0,"trash":false,"N":5},{"food_types":{"carota":"verdura","patata":"verdura","melanzana":"verdura","mela":"frutta","banana":"frutta","fragola":"frutta"},"food_colors":{"carota":"giallo","patata":"marrone","melanzana":"viola","mela":"rosso","banana":"giallo","fragola":"rosso"},"queue":["patata","melanzana","carota","patata","patata","melanzana","patata","carota","melanzana","patata"],"pos":0,"trash":false,"N":10},{"food_types":{"carota":"verdura","patata":"verdura","melanzana":"verdura","mela":"frutta","banana":"frutta","fragola":"frutta"},"food_colors":{"carota":"giallo","patata":"marrone","melanzana":"viola","mela":"rosso","banana":"giallo","fragola":"rosso"},"queue":["mela","fragola","fragola","fragola","fragola","mela","fragola","fragola","fragola","banana","mela","banana","banana","fragola","fragola","banana","fragola","mela","fragola","banana"],"pos":0,"trash":false,"N":20},{"food_types":{"carota":"verdura","patata":"verdura","melanzana":"verdura","mela":"frutta","banana":"frutta","fragola":"frutta"},"food_colors":{"carota":"giallo","patata":"marrone","melanzana":"viola","mela":"rosso","banana":"giallo","fragola":"rosso"},"queue":["carota","banana","melanzana","banana","banana","carota","melanzana","fragola","patata","patata","fragola","patata","mela","patata","fragola","banana","melanzana","carota","patata","mela","fragola","carota","mela","banana","mela","banana","mela","fragola","mela","mela","melanzana","mela","melanzana","mela","patata","patata","patata","mela","mela","melanzana"],"pos":0,"trash":false,"N":40}]'),ja={src:new URL("../a/a2766c77-allie.svg",import.meta.url).href,width:66,height:116.42696629213484},ya=Object.assign({"./asy/cibo-banana.asy":j,"./asy/cibo-carota.asy":y,"./asy/cibo-fragola.asy":v,"./asy/cibo-mela.asy":_,"./asy/cibo-melanzana.asy":z,"./asy/cibo-patata.asy":S});function va({variables:t,state:e}){function i(o,n){return o===-1?e.trash?[.5,1.7]:[1.4,1.3]:n?[2.2,1.5]:[.5*o+2.4,1.3]}return a.jsxs(a.Fragment,{children:[a.jsxs(x,{scale:130,children:[a.jsx(s,{src:ja,alt:"Tip-Tap",x:1.6,y:.9,follow:!0}),a.jsx(s,{src:N,alt:"Fornello",x:2.2,y:1.5}),h(Math.max(e.pos-1,0),e.N).map(o=>{const n=i(o-e.pos,e.queue[o].endsWith(" cotta"));return a.jsx(s,{src:ya[`./asy/cibo-${e.queue[o].split(" ")[0]}.asy`],alt:e.queue[o],x:n[0],y:n[1]},o)}),a.jsx(s,{src:e.pos<e.N&&e.queue[e.pos].endsWith(" cotta")?w:q,alt:"Fornello",x:2.2,y:1.5})]}),a.jsx(b,{variables:{...t,"N (num. cibi)":e.N}})]})}function B(t){const e={em:"em",li:"li",p:"p",span:"span",strong:"strong",ul:"ul",...P(),...t.components},{Blockly:i,Code:o,Equation:n,Explanation:l,Image:r,SubProblem:c}=e;return i||f("Blockly"),o||f("Code"),n||f("Equation"),l||f("Explanation"),r||f("Image"),c||f("SubProblem"),a.jsxs(c,{children:[a.jsxs(e.p,{children:["Anche Allie è ora a pranzo e ha allineato ",a.jsx(n,{children:String.raw`N`}),` cibi. Come gli altri, anche lei cuoce le verdure; tuttavia, non gli piace affatto la frutta, né cruda né cotta.
Non solo: detesta talmente il colore giallo, che appena vede qualcosa di giallo perde l’appetito e non vuole più mangiare!
Hai a disposizione gli stessi blocchi di prima, più uno per controllare se un cibo è giallo e un’altro per scartare il cibo:`]}),a.jsxs(e.ul,{children:[`
`,a.jsxs(e.li,{children:[a.jsx(o,{code:String.raw`N`,inline:!0,lang:"text",className:"p-0 text-base"}),": il numero di cibi che Allie ha allineato."]}),`
`,a.jsxs(e.li,{children:[a.jsx(o,{code:String.raw`prossimo cibo`,inline:!0,lang:"text",className:"p-0 text-base"}),": il prossimo cibo che Allie non ha ancora mangiato."]}),`
`,a.jsxs(e.li,{children:[a.jsx(n,{children:String.raw`x`})," ",a.jsx(o,{code:String.raw`è una verdura`,inline:!0,lang:"text",className:"p-0 text-base"}),": vero se il cibo ",a.jsx(n,{children:String.raw`x`})," è una verdura."]}),`
`,a.jsxs(e.li,{children:[a.jsx(n,{children:String.raw`x`})," ",a.jsx(o,{code:String.raw`è giallo`,inline:!0,lang:"text",className:"p-0 text-base"}),": vero se il cibo ",a.jsx(n,{children:String.raw`x`})," è giallo ",a.jsx(e.strong,{children:"(nuovo!)"}),"."]}),`
`,a.jsxs(e.li,{children:[a.jsx(o,{code:String.raw`cuoci`,inline:!0,lang:"text",className:"p-0 text-base"})," ",a.jsxs(e.span,{className:"inline-block whitespace-nowrap",children:[a.jsx(n,{children:String.raw`x`}),":"]})," cuoci il cibo ",a.jsxs(e.span,{className:"inline-block whitespace-nowrap",children:[a.jsx(n,{children:String.raw`x`}),"."]})]}),`
`,a.jsxs(e.li,{children:[a.jsx(o,{code:String.raw`mangia`,inline:!0,lang:"text",className:"p-0 text-base"})," ",a.jsxs(e.span,{className:"inline-block whitespace-nowrap",children:[a.jsx(n,{children:String.raw`x`}),":"]})," mangia il cibo ",a.jsxs(e.span,{className:"inline-block whitespace-nowrap",children:[a.jsx(n,{children:String.raw`x`}),"."]})]}),`
`,a.jsxs(e.li,{children:[a.jsx(o,{code:String.raw`butta`,inline:!0,lang:"text",className:"p-0 text-base"})," ",a.jsxs(e.span,{className:"inline-block whitespace-nowrap",children:[a.jsx(n,{children:String.raw`x`}),":"]})," butta via il cibo ",a.jsx(n,{children:String.raw`x`})," ",a.jsx(e.strong,{children:"(nuovo!)"}),"."]}),`
`,a.jsxs(e.li,{children:[a.jsx(o,{code:String.raw`termina`,inline:!0,lang:"text",className:"p-0 text-base"}),": smetti di mangiare."]}),`
`]}),a.jsx(e.p,{children:"Scrivi un programma che consenta a Allie di pranzare come più preferisce, senza perdere tempo a cuocere cose prima di buttarle!"}),a.jsxs(e.p,{children:["Stavolta nella sezione ",a.jsx(e.em,{children:"“Logica”"})," c’è un blocco condizionale in più, che ti consente di specificare cosa fare quando la condizione (esagonale) inserita è falsa."]}),a.jsxs(e.p,{children:["Inoltre, nella sezione ",a.jsx(e.em,{children:"“Cicli”"}),` c’è un ciclo in più: “ripeti mentre”, che ripetere alcune istruzioni più volte, mentre che una condizione è vera, fermandosi appena è falsa.
Dopo averlo trascinato, puoi anche cliccare sul triangolino in basso dopo “mentre” per farlo diventare “ripeti fino a che”: in questo caso, ripete le istruzioni mentre che la condizione è falsa, fermandosi appena è vera.`]}),a.jsx(i,{toolbox:ga,customBlocks:ha,initialBlocks:xa,testcases:ba,visualizer:va}),a.jsxs(l,{children:[a.jsx(e.p,{children:"Un possibile programma corretto è il seguente:"}),a.jsx(e.p,{children:a.jsx(r,{alt:"soluzione",src:typeof R=="function"?R(_variant):R})}),a.jsx(e.p,{children:`Secondo questo programma, Allie continua a mangiare cibi fino a che non vede il colore giallo.
Per ciascun cibo che incontra fino a quel momento, la protagonista
controlla se il prossimo cibo è una verdura, e in caso affermativo la cuoce e poi la mangia.
Altrimenti si tratta di frutta, e quindi la butta.`})]})]})}function _a(t={}){const{wrapper:e}={...P(),...t.components};return e?a.jsx(e,{...t,children:a.jsx(B,{...t})}):B(t)}function f(t,e){throw new Error("Expected component `"+t+"` to be defined: you likely forgot to import, pass, or provide it.")}function O(){return{...g(),S1PranzoNoCondizioni:Y,S2PranzoCondSingola:sa,S4PranzoOperazioniBool:fa,S3PranzoCondDoppia:_a}}function M(t){const{Contest:e,Problem:i,S1PranzoNoCondizioni:o,S2PranzoCondSingola:n,S3PranzoCondDoppia:l,S4PranzoOperazioniBool:r,Section:c}={...O(),...t.components};return e||u("Contest"),i||u("Problem"),o||u("S1PranzoNoCondizioni"),n||u("S2PranzoCondSingola"),l||u("S3PranzoCondDoppia"),r||u("S4PranzoOperazioniBool"),c||u("Section"),a.jsx(e,{children:a.jsxs(c,{children:[a.jsx(i,{points:[5,0,0],id:1,children:a.jsx(o,{})}),a.jsx(i,{points:[5,0,0],id:2,children:a.jsx(n,{})}),a.jsx(i,{points:[5,0,0],id:3,children:a.jsx(l,{})}),a.jsx(i,{points:[5,0,0],id:4,children:a.jsx(r,{})})]})})}function za(t={}){const{wrapper:e}={...O(),...t.components};return e?a.jsx(e,{...t,children:a.jsx(M,{...t})}):M(t)}function u(t,e){throw new Error("Expected component `"+t+"` to be defined: you likely forgot to import, pass, or provide it.")}function D(){return{...g()}}function L(t){const e={em:"em",h1:"h1",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...D(),...t.components};return a.jsxs(a.Fragment,{children:[a.jsx(e.h1,{children:"Corso di Programmazione a Blocchi"}),`
`,a.jsx(e.h2,{children:"Lezione 2 - Blocchi Condizionali e Ripeti Mentre"}),`
`,a.jsx(e.p,{children:"Benvenuto nel corso di programmazione a blocchi per la preparazione ai Giochi di Fibonacci!"}),`
`,a.jsx(e.p,{children:"Questa è la seconda lezione, in cui ti faremo vedere:"}),`
`,a.jsxs(e.ul,{children:[`
`,a.jsx(e.li,{children:"i blocchi di tipo “logica”;"}),`
`,a.jsx(e.li,{children:"il blocco “ripeti mentre/fino a che”."}),`
`]}),`
`,a.jsx(e.h2,{children:"Punteggio e struttura delle lezioni"}),`
`,a.jsxs(e.p,{children:["Le lezioni di questo corso contengono alcuni problemi di programmazione a blocchi, da risolvere in al massimo ",a.jsx(e.em,{children:"4 giorni"}),". Appena avrai finito di lavorarci, potrai cliccare su “Termina” per vedere subito un riepilogo del punteggio che hai ottenuto, e le soluzioni spiegate di tutti i problemi! Se anche non lo farai, la lezione verrà terminata automaticamente dopo 4 giorni. Potrai comunque ricominciare la lezione quante volte vuoi, cliccando sul tasto “Ricomincia” (freccia curva che torna indietro)."]}),`
`,a.jsxs(e.p,{children:["I problemi richiedono di scrivere un ",a.jsx(e.strong,{children:"singolo"})," programma a blocchi, che viene valutato ",a.jsx(e.strong,{children:"contemporaneamente"}),` su più livelli.
Quindi attenzione che non puoi scrivere programmi diversi per i diversi livelli, ma uno solo!
Per ciascun livello correttamente risolto di ciascun problema, otterrai `,a.jsx(e.em,{children:"5 punti"}),"."]})]})}function Sa(t={}){const{wrapper:e}={...D(),...t.components};return e?a.jsx(e,{...t,children:a.jsx(L,{...t})}):L(t)}const Ca={title:"Corso di Programmazione",description:"Corso di Programmazione a Blocchi per i Giochi di Fibonacci"};function Ua(){return a.jsxs(X,{contestLongName:"",contestName:"Corso di Programmazione",duration:5760,children:[a.jsx(Sa,{}),a.jsx(za,{})]})}export{Ua as default,Ca as metadata};
//# sourceMappingURL=78fb1bc6-page.js.map
