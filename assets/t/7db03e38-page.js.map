{"version":3,"file":"7db03e38-page.js","sources":["../../../../src/scolastiche/2021/contest/algo-2-pt-13/question.md","../../../../src/scolastiche/2021/contest/algo-2-pt-14/question.md","../../../../src/scolastiche/2021/contest/algo-2-pt-15/question.md","../../../../src/scolastiche/2021/contest/algo-3-pt-16/question.md","../../../../src/scolastiche/2021/contest/algo-3-pt-17/question.md","../../../../src/scolastiche/2021/contest/algo-3-pt-18/question.md","../../../../src/scolastiche/2021/contest/algo-4-pt-19/question.md","../../../../src/scolastiche/2021/contest/algo-4-pt-20/question.md","../../../../src/scolastiche/2021/contest/logica-3-pt-03/question.md","../../../../src/scolastiche/2021/contest/logica-2-pt-02/question.md","../../../../src/scolastiche/2021/contest/logica-2-pt-01/question.md","../../../../src/scolastiche/2021/contest/logica-3-pt-05/question.md","../../../../src/scolastiche/2021/contest/logica-3-pt-04/question.md","../../../../src/scolastiche/2021/contest/prog-2-pt-06/question.md","../../../../src/scolastiche/2021/contest/prog-2-pt-07/question.md","../../../../src/scolastiche/2021/contest/prog-2-pt-08/question.md","../../../../src/scolastiche/2021/contest/prog-3-pt-09/question.md","../../../../src/scolastiche/2021/contest/prog-3-pt-11/question.md","../../../../src/scolastiche/2021/contest/prog-3-pt-10/question.md","../../../../src/scolastiche/2021/contest/prog-3-pt-12/question.md","../../../../src/scolastiche/2021/contest/contest.mdx","../../../../src/scolastiche/2021/page.jsx"],"sourcesContent":["---\nvariants:\n  - numcifre: 453\n    sol: 187\n  - numcifre: 483\n    sol: 197\n  - numcifre: 513\n    sol: 207\n  - numcifre: 543\n    sol: 217\n---\n\nIn un libro sono state impiegate $\\js{numcifre}$ cifre decimali per indicare i numeri progressivi di pagina, stampati in ogni pagina del libro a partire dalla prima pagina (che ha il numero '1').\n\nPer esempio, per pagina 9 è stata usata una sola cifra decimale (il '9'), mentre per pagina 23 sono state usate due cifre decimali (il '2' e il '3').\n\nQuante sono le pagine del libro?\n\n?> {sol}\n","---\nvariants:\n  - numeri: [7, 11, 5, 9, 23, 15]\n    sol: 172\n  - numeri: [7, 11, 5, 9, 23, 18]\n    sol: 178\n  - numeri: [7, 11, 5, 9, 23, 16]\n    sol: 174\n  - numeri: [7, 11, 5, 9, 23, 17]\n    sol: 176\n---\n\nAvete un insieme di numeri di cui volete calcolare la somma totale. Potete sommare due numeri alla volta, inserendo il risultato nell’insieme di numeri, fino ad arrivare ad avere un numero solo, pari alla somma totale. Il costo di una somma è pari al valore della somma stessa.\n\nAd esempio, se volete sommare i numeri 2, 3 e 7, possiamo sommare 2 e 3, con costo 5, e poi sommare 5 e 7, con costo 12. Il costo totale è quindi $5+12=17$. In alternativa, sommando prima 3 e 7 (costo 10) e poi 2 e 10 (costo 12), il costo totale per arrivare alla somma è $10+12=22$.\n\nSe i numeri da sommare sono $\\js{numeri}$, qual è il costo minimo per sommarli tutti tra di loro?\n\n?> {sol}\n","---\nvariants:\n  - posti: [9, 6, 5, 8, 4, 2, 7, 3]\n    sol: 9\n  - posti: [6, 4, 9, 7, 8, 2, 3, 5]\n    sol: 6\n  - posti: [4, 9, 5, 8, 7, 2, 3, 6]\n    sol: 4\n  - posti: [5, 9, 6, 4, 8, 2, 3, 7]\n    sol: 5\n---\n\nArtù e i cavalieri della tavola rotonda si siedono sempre a una tavola ovviamente rotonda. Il numero di cavalieri è cambiato varie volte, ma per un certo periodo è rimasto costante a 9.\n\nIl posto più ambito era, ovviamente, sedersi alla destra di Re Artù. Gli altri 8 cavalieri si accordano: a ogni riunione il loro posto **sarebbe sempre stato cambiato secondo il seguente schema** (dove il posto numero 1 è sempre quello in cui si siede Artù e gli altri numeri seguono in senso _antiorario_):\n\n| Posto nella riunione in corso   | 2          | 3          | 4          | 5          | 6          | 7          | 8          | 9          |\n| ------------------------------- | ---------- | ---------- | ---------- | ---------- | ---------- | ---------- | ---------- | ---------- |\n| Posto nella riunione successiva | {posti[0]} | {posti[1]} | {posti[2]} | {posti[3]} | {posti[4]} | {posti[5]} | {posti[6]} | {posti[7]} |\n\nFacendo riferimento alla riunione attuale, in cui indichiamo i cavalieri con un numero da 2 a 9, chi è il cavaliere che dovrà aspettare l'ottava riunione **per sedersi alla destra di Artù**?\nNella prima riunione è ovviamente il cavaliere numero 2, nella seconda riunione, secondo lo schema sopra indicato, è il cavaliere numero 7.\n\nChi è che occuperà il posto numero 2 all'ottava riunione?\n\n?> {sol}\n","---\nvariants:\n  - vettore: [2, -3, -1, 3, -2, 4, -3, 5, 1, -3, 2, -4, 3, -1, -1, 3]\n    sol: 8\n  - vettore: [2, -3, -1, 3, -2, 4, -3, 4, 1, -3, 2, -4, 3, -2, -1, 3]\n    sol: 7\n  - vettore: [2, -3, -1, 3, -2, 4, -3, 5, 3, -3, 1, -4, 3, -1, -1, 3]\n    sol: 10\n  - vettore: [2, -3, -1, 3, -2, 4, -3, 5, 2, -3, 5, -4, 2, -1, -1, 3]\n    sol: 11\n---\n\nDato un vettore di interi, positivi o anche negativi, si definisce **somma di sottovettore** il valore ottenuto sommando gli elementi di un sottovettore, ovvero un insieme **contiguo** di elementi del vettore.\n\nAd esempio, considerato il seguente vettore:\n\n$$\n[2,-4,3,1,-1,4,-2,1]\n$$\n\nLa somma del sottovettore ottenuto considerando i primi tre elementi $[2,-4,3]$ vale 1. La massima somma di sottovettore che si può ottenere in questo vettore vale invece 7 e corrisponde al sottovettore $[3,1,-1,4]$.\n\nQuanto vale la **massima somma di sottovettore** del vettore seguente?\n\n$$\n[\\js{vettore}]\n$$\n\n?> {sol}\n","---\nvariants:\n  - target: 60\n    sol: 4\n  - target: 67\n    sol: 5\n  - target: 73\n    sol: 5\n  - target: 84\n    sol: 6\n---\n\nMentre qui in Europa abbiamo monete da $1,2,5,10,20$ e $50$ centesimi di euro (oltre che da $1$ e $2$ euro), nello stato di Elbonia hanno monete che valgono, rispettivamente $1,2,6,10,13$ e $17$ elboni, la loro valuta nazionale.\n\nSiamo interessati al **minimo** numero di monete per raggiungere una determinata cifra. Ad esempio, se vogliamo avere in tasca 33 elboni, si riesce a farlo con sole tre monete, rispettivamente due da $10$ e una da $13$ elboni.\n\nQual è il minimo numero di monete necessario per raggiungere $\\js{target}$ elboni?\n\n?> {sol}\n","---\nvariants:\n  - disp: [\"\", X, \"\", \"\", \"\", \"\", HP, \"\"]\n    posto: 2\n    nuovoposto: 7\n    fagiolo: 5\n    sol: 36\n  - disp: [\"\", \"\", HP, \"\", \"\", X, \"\", \"\"]\n    posto: 3\n    nuovoposto: 6\n    fagiolo: 3\n    sol: 27\n  - disp: [\"\", \"\", HP, \"\", \"\", X, \"\", \"\"]\n    posto: 6\n    nuovoposto: 3\n    fagiolo: 3\n    sol: 72\n  - disp: [\"\", HP, \"\", \"\", \"\", \"\", X, \"\"]\n    posto: 7\n    nuovoposto: 2\n    fagiolo: 5\n    sol: 63\n---\n\nHarry Porter ha trovato una serie di castelli magici, in cui ogni stanza contiene una gemma. Lui conosce l'incantesimo per teletrasportarsi dentro il castello (ma non riesce a scegliere in che stanza teletrasportarsi) e anche quello per poi teletrasportarsi fuori (indipendentemente dalla stanza in cui si trova). Quando è dentro al castello può spostarsi mediante una serie di fagioli magici. Ogni fagiolo ha un numero, e gli consente di spostarsi a destra o sinistra di quel numero di stanze.\n\nNel primo castello, composto da 4 stanze numerate da $1$ a $4$, Harry Porter si è ritrovato nella stanza numero $3$, come mostrato in figura qui sotto.\n\n| 1   | 2   | 3   | 4   |\n| --- | --- | --- | --- |\n|     |     | HP  |     |\n\nIn quel caso aveva tre fagioli, numerati da $1$ a $3$. In questa situazione ha deciso di agire nel modo seguente:\n\n1. ha usato il fagiolo di tipo $1$ per spostarsi (a sinistra) nella stanza $2$;\n2. ha usato il fagiolo di tipo $2$ per spostarsi (a destra) nella stanza $4$;\n3. ha usato il fagiolo di tipo $3$ per spostarsi (a sinistra) nella stanza $1$.\n\nIn questo modo è riuscito a visitare tutte le stanze del castello e\nquindi a prendere tutte e $4$ le gemme.\n\nAdesso però la situazione si è complicata. Harry Porter si è appena teletrasportato in un altro castello magico, stavolta di $8$ stanze, e si è ritrovato nella stanza numero $\\js{posto}$. Qui $-$ per errore! $-$ ha usato subito il fagiolo $\\js{fagiolo}$, trovandosi nella stanza $\\js{nuovoposto}$ come mostrato qui sotto (dove con X mostriamo la stanza numero $\\js{posto}$, già visitata da Harry Porter).\n\n| 1         | 2         | 3         | 4         | 5         | 6         | 7         | 8         |\n| --------- | --------- | --------- | --------- | --------- | --------- | --------- | --------- |\n| {disp[0]} | {disp[1]} | {disp[2]} | {disp[3]} | {disp[4]} | {disp[5]} | {disp[6]} | {disp[7]} |\n\nQuesta non era la situazione che aveva pianificato Harry Porter; adesso gli sono rimasti $6$ fagioli magici, numerati da $1$ a $7$ tranne il fagiolo $\\js{fagiolo}$ che ha già usato. Riesci a trovare un modo di usarli per visitare tutte le stanze?\n\nPer rispondere al quesito, in particolare, devi identificare le ultime due stanze $X$ e $Y$ che vengono visitate, e devi scrivere i due numeri $X$ e $Y$ uno di seguito all'altro ($XY$).\n\nAd esempio, per il castello di $4$ stanze visto sopra, le ultime due stanze visitate sono state la $4$ e poi la $1$, quindi la risposta corretta sarebbe stata $41$.\n\nQuanto vale $XY$ nel castello di $8$ stanze, partendo dalla stanza $\\js{nuovoposto}$ (dopo aver già visitato la stanza $\\js{posto}$ e aver già consumato il fagiolo $\\js{fagiolo}$)?\n\n?> {sol}\n","---\nvariants:\n  - i: 0\n    sol: 15\n  - i: 1\n    sol: 12\n  - i: 2\n    sol: 21\n  - i: 3\n    sol: 30\n---\n\nUna rete (chiamata anche grafo) è costituita da un insieme di punti (detti nodi), collegati tra di loro da linee (dette archi). La stessa rete può essere disegnata\nin modi diversi.\n\nAd esempio, i due grafi qui sotto coincidono, ovvero è possibile trovare una corrispondenza tra i nodi del grafo di sinistra con quelli del grafo di destra, mantenendo gli archi tra i singoli nodi.\n\n![Grafo isomorfo](isomorphism_a.svg)\n![Grafo isomorfo](isomorphism_b.svg)\n\nLa corrispondenza è quella mostrata usando i colori dei nodi (a=1, b=6, c=8, d=3, g=5, h=2, i=4 e j=7).\n\nAnche per i due grafi qui sotto è possibile trovare una corrispondenza.\n\n![Grafi isomorfi](grafo-{i}.svg)\n\nQuanto vale la somma dei tre nodi della figura di destra che corrispondono ai nodi A, B ed F della figura di sinistra?\n\nAd esempio, se pensi che i nodi A, B ed F di sinistra corrispondano, rispettivamente, ai nodi $1$, $6$ e $9$ della figura di destra, la tua risposta dovrà essere $1+6+9=16$.\n\n?> {sol}\n","---\nvariants:\n  - i: 0\n    esempio: nella prima piazza ci sono 15 unità di energia e se uno si sposta dalla prima alla seconda piazza consuma 8 unità di energia.\n    badpiazza: 3\n    badenergia: 2\n    sol: 27\n  - i: 1\n    esempio: nella terza piazza ci sono 19 unità di energia e se uno si sposta dalla terza alla quarta piazza consuma 16 unità di energia.\n    badpiazza: 4\n    badenergia: 10\n    sol: 58\n  - i: 2\n    esempio: nella prima piazza ci sono 20 unità di energia e se uno si sposta dalla prima alla seconda piazza consuma 17 unità di energia.\n    badpiazza: 2\n    badenergia: 11\n    sol: 36\n  - i: 3\n    esempio: nella prima piazza ci sono 24 unità di energia e se uno si sposta dalla prima alla seconda piazza consuma 5 unità di energia.\n    badpiazza: 6\n    badenergia: 9\n    sol: 14\n---\n\nElon Musk vuole fare in grande stile la presentazione del nuovo modello della sua Tesla. Il problema è l'autonomia, e quindi hanno predisposto, nel giro che faranno tra otto diversi piazze della città (numerate da 1 a 8 in senso orario partendo dalla prima piazza in alto a sinistra), un pacco di batterie. La nuova Tesla dovrà fare un giro completo, partendo e terminando nella stessa piazza, non necessariamente la prima.\n\nVista la fretta, non ci si è accorti di un problema: non da tutte le piazze è possibile partire (dopo aver assorbito la carica delle batterie in quella piazza) e compiere un giro completo. Ovviamente in ogni piazza visitata la Tesla si ricarica di quella quantità di energia.\n\nPer semplicità, nella mappa schematica riportata qui sotto (dove, come detto in precedenza, ogni piazza è rappresentata da un numero compreso tra 1 e 8, in senso orario partendo dalla prima piazza in alto a sinistra) si è indicato:\n\n- il numero di unità di energia disponibili nella piazza;\n- il numero di unità di energia che vengono consumate nel tragitto tra le due piazze.\n\n![Mappa](mappa-{i}.svg?w=400)\n\nPer esempio, {esempio}\n\nIl tuo compito è di scoprire quali sono le due piazze $P1$ e $P2$ da cui è possibile fare il giro completo, rispettivamente, in senso orario e in senso antiorario. Ad esempio, sicuramente non si può partire dalla piazza $\\js{badpiazza}$, dove le $\\js{badenergia}$ unità di energia non consentono di andare in nessuna delle due piazze collegate.\n\nPer rispondere al quesito devi scrivere di seguito i due numeri delle due piazza $P1$ e $P2$ **scrivendo prima il più piccolo e poi il più grande dei due**.\n\nAd esempio, se pensi che le due piazze siano la $5$ e la $1$, devi scrivere $15$ (mi raccomando, **non scrivere $51$**!).\n\n?> {sol}\n","---\nvariants:\n  - cinque: ne avanza 1\n    sei: ne avanza 1\n    sol: 91\n  - cinque: ne avanzano 2\n    sei: ne avanzano 5\n    sol: 77\n  - cinque: ne avanzano 3\n    sei: ne avanzano 2\n    sol: 98\n  - cinque: ne avanzano 4\n    sei: non ne avanza nessuna\n    sol: 84\n---\n\nNel suo famosissimo _Liber Abaci_, Fibonacci propone, tra gli altri, anche il problema delle uova: una contadina porta delle uova al mercato. Sa che contandole a 2 a 2 ne avanza 1, contandole a 3 a 3 ne avanza 1, a 4 a 4 ne avanza 1, a 5 a 5 ne avanza 1, a 6 a 6 ne avanza sempre 1, mentre contandole a 7 a 7 non ne avanza nessuna. Il minor numero di uova che rispetta tali vincoli, e che Fibonacci invitava a calcolare, è 301.\n\nRiesci a calcolare il minimo numero che rispetti i seguenti vincoli?\nSai che contandole a 5 a 5 {cinque}, contandole a 6 a 6 {sei}, contandole a 7 a 7 non ne avanza nessuna.\n\nQuanto vale $F$, il più piccolo numero che rispetta i vincoli descritti?\n\n?> {sol}\n","---\nvariants:\n  - amici: [Mario, Raimondo, Vito, Luigi]\n  - amici: [Enrico, Marco, Saverio, Giorgio]\n  - amici: [Antonio, Roberto, Emanuele, Paolo]\n  - amici: [Luciano, Giovanni, Andrea, Valerio]\n---\n\nQuattro amici giocano da sempre insieme a calcetto, ma solo uno dice la verità.\n\n- {amici[0]}: {amici[1]} è il più forte di tutti.\n- {amici[1]}: {amici[2]} è il più forte di tutti.\n- {amici[2]}: Non sono io il più forte di tutti.\n- {amici[3]}: Non sono io il più forte di tutti.\n\nChi è il più forte di tutti?\n\n- [ ] {amici[0]}\n- [ ] {amici[1]}\n- [ ] {amici[2]}\n- [x] {amici[3]}\n","---\nvariants:\n  - res: 733\n    sol: 9\n  - res: 644\n    sol: 10\n  - res: 555\n    sol: 11\n  - res: 466\n    sol: 12\n---\n\nSi consideri la seguente sottrazione, in cui alcune cifre sono state sostituite da $X$ e $Y$ (a lettera uguale corrisponde, naturalmente, cifra uguale):\n\n$$\n\\begin{array}{rc}\n\\texttt{2XYY} & - \\\\\n\\texttt{1YX3} & = \\\\\n\\hline\n\\texttt{\\js{res}} &\n\\end{array}\n$$\n\nQuanto vale la somma di $X$ e $Y$?\n\n?> {sol}\n","---\nvariants:\n  - espressione: (C \\land (\\lnot B)) \\lor \\lnot A\n    sol: 11110100\n  - espressione: (A \\land (\\lnot B)) \\lor \\lnot C\n    sol: 10101110\n  - espressione: (B \\land (\\lnot C)) \\lor \\lnot A\n    sol: 11110010\n  - espressione: (B \\land (\\lnot A)) \\lor \\lnot C\n    sol: 10111010\n---\n\nSiano A, B, C tre variabili booleane, ossia variabili che possono assumere solo uno dei due valori 1 (VERO) e 0 (FALSO). Ricordiamo che gli operatori booleani sono:\n\n1. **not** A, che si indica con $\\lnot$A, vale VERO se A è FALSO, e FALSO se A è VERO;\n2. A **and** B, che si indica con A$\\land$B, vale VERO se sia A sia B sono VERO, e FALSO in tutti gli altri casi;\n3. A **or** B, che si indica con A$\\lor$B, vale FALSO se sia A sia B sono FALSO, e VERO in tutti gli altri casi.\n\nSi consideri la seguente tabella di verità per le due variabili booleane A e B e l'espressione logica $\\lnot A \\lor B$:\n\n$$\n\\begin{array}{ccc}\nA & B & \\lnot A \\lor B \\\\ \\hline\n0 & 0 & 1              \\\\\n0 & 1 & 1              \\\\\n1 & 0 & 0              \\\\\n1 & 1 & 1              \\\\\n\\end{array}\n$$\n\nLa tabella di verità fornisce, in funzione dei valori di A e B, i valori di verità dell'espressione logica, che possiamo rappresentare con una unica stringa di quattro caratteri zero o uno, in questo caso 1101 (leggendo dall'alto al basso i quattro valori di verità dell'espressione).\n\nConsiderate la seguente tabella di verità corrispondente all'espressione logica $\\js{espressione}$ definita sulle variabili booleane A, B e C.\n\n$$\n\\begin{array}{cccc}\nA & B & C & \\js{espressione} \\\\ \\hline\n0 & 0 & 0 &                  \\\\\n0 & 0 & 1 &                  \\\\\n0 & 1 & 0 &                  \\\\\n0 & 1 & 1 &                  \\\\\n1 & 0 & 0 &                  \\\\\n1 & 0 & 1 &                  \\\\\n1 & 1 & 0 &                  \\\\\n1 & 1 & 1 &                  \\\\\n\\end{array}\n$$\n\nQuale è la stringa, di otto caratteri zero o uno, che rappresenta l'espressione logica di questa tabella di verità (sempre leggendo dall'alto al basso)?\n\n?> {sol}\n","---\nvariants:\n  - sum: 17+12=30\n    mul: 17 \\times 3\n    sol: 53\n  - sum: 17+12=31\n    mul: 17 \\times 3\n    sol: 55\n  - sum: 17+12=30\n    mul: 16 \\times 3\n    sol: 50\n  - sum: 17+12=31\n    mul: 16 \\times 3\n    sol: 52\n---\n\nNoi usiamo il sistema numerico decimale, ovvero il sistema di numerazione posizionale a base 10. Nei computer si usa il sistema numerico binario, ovvero il sistema di numerazione posizionale a base 2. Ovviamente, si possono usare altri valori per la base. In particolare, se $\\js{sum}$, quanto fa $\\js{mul}$?\n\nCome probabilmente avrai intuito, la domanda fa riferimento a una base diversa da 10. Importante: anche la tua risposta deve essere nella stessa base (ovvero, non in base 10)!\n\n?> {sol}\n","---\nvariants:\n  - initial: \"[3, 2, 5, 4, 4, 3, 5, 4, 1]\"\n    bound: 3\n    sol: 145443523\n  - initial: \"[3, 5, 2, 4, 4, 3, 4, 5, 1]\"\n    bound: 4\n    sol: 154344253\n  - initial: \"[3, 4, 5, 4, 4, 3, 5, 2, 1]\"\n    bound: 5\n    sol: 125344543\n  - initial: \"[3, 5, 4, 4, 4, 3, 2, 5, 1]\"\n    bound: 6\n    sol: 152443453\n---\n\nDato il seguente programma:\n\n```srs\nvariable i: integer\nvariable j: integer\nvariable a: integer\nvariable v: integer[]\nv <- {initial}\ni <- 0\nj <- 9\nwhile i < {bound} do\n    if v[i] != v[j - i - 1] then\n        a <- v[i]\n        v[i] <- v[j - i - 1]\n        v[j - i - 1] <- a\n    end if\n    i <- i + 1\nend while\ni <- 0\nwhile i < j do\n    output(v[i])\n    i <- i + 1\nend while\n```\n\nCosa viene stampato durante l'esecuzione? Riportare la risposta senza spazi.\n\n?> {sol}\n","---\nvariants:\n  - value: 11\n    sol: 9\n  - value: 13\n    sol: 8\n  - value: 15\n    sol: 7\n  - value: 17\n    sol: 6\n---\n\nData la seguente funzione:\n\n```srs\nfunction f(n: integer) -> integer\n    if n < 10 then\n        return f(n + 1) + 3\n    else\n        if n = 10 then\n            return 7\n        else\n            return f(n - 2) - 1\n        end if\n    end if\nend function\n```\n\nQuanto vale `f({value})`?\n\n?> {sol}\n","---\nvariants:\n  - invlim: 11\n    inverter: 13\n    bound: 7\n    sqroffs: 1\n    dbloffs: 14\n    addoffs: 1\n    sol: 2\n  - invlim: 13\n    inverter: 17\n    bound: 8\n    sqroffs: 11\n    dbloffs: 15\n    addoffs: 1\n    sol: 3\n  - invlim: 19\n    inverter: 25\n    bound: 13\n    sqroffs: 32\n    dbloffs: 25\n    addoffs: 2\n    sol: 4\n  - invlim: 21\n    inverter: 27\n    bound: 15\n    sqroffs: 30\n    dbloffs: 29\n    addoffs: 1\n    sol: 5\n---\n\nData la seguente funzione:\n\n```srs\nfunction f(x: integer) -> integer\n    if x <= {invlim} then\n        x <- {inverter} - x\n    end if\n    if x mod 2 = 0 then\n        x <- x * x - {sqroffs}\n    else\n        if x > {bound} then\n            x <- 2 * x - {dbloffs}\n        else\n            x <- x - {addoffs}\n        end if\n    end if\n    return x\nend function\n```\n\nQual è il minimo valore che `f` può restituire, per un qualunque valore del parametro `x`?\n\n?> {sol}\n","---\nvariants:\n  - initial: 42\n    result: 28\n    sol: 14\n  - initial: 42\n    result: 12\n    sol: 6\n  - initial: 45\n    result: 18\n    sol: 9\n  - initial: 45\n    result: 30\n    sol: 15\n---\n\nData la seguente funzione:\n\n```srs\nfunction f(a: integer) -> integer\n\tvariable b: integer\n\tvariable c: integer\n\tb <- {initial}\n\tc <- {initial}\n\twhile a > 0 do\n\t\tif a >= b then\n\t\t\ta <- a - b\n\t\telse\n\t\t\tc <- a\n\t\t\ta <- b\n\t\t\tb <- c\n\t\tend if\n\tend while\n\treturn a + b + c\nend function\n```\n\nQual è il minimo valore positivo che si può passare ad `f` per ottenere $\\js{result}$?\n\n?> {sol}\n","Al Khwarizmi ha scritto un programma per calcolare se un vettore `v` contiene più elementi strettamente negativi che elementi strettamente positivi. Purtroppo il suo gatto è passato sul suo codice, cancellando completamente l'indentazione e mescolando alcune righe! Il programma che ha ora a disposizione è il seguente:\n\n```srs\ni <- 0\nneg <- 0\npos <- 0\nwhile i < 10 do\nif v[i] < 0 then\nelse\nneg <- neg + 1\noutput(\"molti negativi\")\npos <- pos + 1\nend if\nend if\nend if\nif v[i] > 0 then\nend while\nif neg > pos then\ni <- i + 1\n```\n\nDi tutto questo programma, Al è solo sicuro che le righe 1, 2, 3 e 9, 10, 11 non sono state spostate. Tutte le altre potrebbero essere state mescolate arbitrariamente! In quale ordine devono essere messe le rimanenti righe per far funzionare il programma? Rispondere indicando la sequenza di numeri di riga per portare il programma nell'ordine corretto **senza spazi**.\n\n_Per esempio, per riportare che l'intero programma è già nell'ordine corretto, devi riportare il numero: `12345678910111213141516`._\n\n?> 12345761391011161415812\n","---\nvariants:\n  - v: [1, 3, 4, 2]\n    offs: 2\n    sol: 7\n    value: 5\n  - v: [2, 4, 3, 1]\n    offs: 3\n    sol: 5\n    value: 7\n  - v: [3, 1, 2, 4]\n    offs: 5\n    sol: 6\n    value: 8\n  - v: [4, 2, 1, 3]\n    offs: 5\n    sol: 8\n    value: 9\n---\n\nDate le seguenti funzioni:\n\n```srs\nfunction f(n: integer) -> integer\n\tif n >= 10 then\n\t\treturn {v[0]}\n\telse\n\t\treturn 2 * g(n - 2) + {v[1]}\n\tend if\nend function\n\nfunction g(n: integer) → integer\n\tif n <= 0 then\n\t\treturn {v[2]}\n\telse\n\t\treturn f(n * 2) + {v[3]}\n\tend if\nend function\n```\n\nQual è il numero totale delle chiamate ad `f` più il numero delle chiamate a `g` che vengono effettuate per calcolare `f({value})`?\n\n?> {sol}\n\n_**NOTA POST GARA**: dal testo non era chiaro se il numero totale di chiamate dovesse includere anche la chiamata iniziale `f({value})`. Nella nostra interpretazione lo doveva includere, ma abbiamo dato buone anche le soluzioni che non lo includevano (ovvero che differivano di -1 dalla soluzione corretta)._\n","Il seguente programma cerca, all'interno di una matrice quadrata di $n \\times n$ interi, il più grande quadrato di numeri tutti strettamente positivi contenuto in essa e contenente l'angolo in posizione $(0,\\, 0)$.\n\n```srs\nvariable m: integer[][]\nvariable n: integer\nvariable i: integer\nvariable j: integer\nvariable l: integer\nvariable ok: integer\nvariable maxl: integer\nl ← 1\nmaxl ← 0\nwhile l ≤ n do\n\tok ← 1\n\ti ← 0\n\twhile i < l do\n\t\tj ← 0\n\t\twhile j < l do\n\t\t\tif m[i][j] ≤ 0 then\n\t\t\t\tok ← 0\n\t\t\tend if\n\t\t\tj ← j − 1\n\t\tend while\n\t\ti ← i + 1\n\tend while\n\tif ok = 1 then\n\t\tmaxl ← l\n\tend if\n\tl ← l + 1\nend while\noutput(maxl)\n```\n\nTuttavia è presente un errore, in quale riga?\n\n?> 19\n","<Contest>\n\n## Sezione 1: Esercizi a carattere logico-matematico\n\n<Section>\n  <Problem points={[2, 0, 0]}><Logica2Pt01 /></Problem>\n  <Problem points={[2, 0, 0]}><Logica2Pt02 /></Problem>\n  <Problem points={[3, 0, 0]}><Logica3Pt03 /></Problem>\n  <Problem points={[3, 0, 0]}><Logica3Pt04 /></Problem>\n  <Problem points={[3, 0, 0]}><Logica3Pt05 /></Problem>\n</Section>\n\n## Sezione 2: Esercizi di programmazione\n\n<Section>\n  <Problem points={[2, 0, 0]}><Prog2Pt06 /></Problem>\n  <Problem points={[2, 0, 0]}><Prog2Pt07 /></Problem>\n  <Problem points={[2, 0, 0]}><Prog2Pt08 /></Problem>\n  <Problem points={[3, 0, 0]}><Prog3Pt09 /></Problem>\n  <Problem points={[3, 0, 0]}><Prog3Pt10 /></Problem>\n  <Problem points={[3, 0, 0]}><Prog3Pt11 /></Problem>\n  <Problem points={[3, 0, 0]}><Prog3Pt12 /></Problem>\n</Section>\n\n## Sezione 3: Esercizi a carattere algoritmico\n\n<Section>\n  <Problem points={[2, 0, 0]}><Algo2Pt13 /></Problem>\n  <Problem points={[2, 0, 0]}><Algo2Pt14 /></Problem>\n  <Problem points={[2, 0, 0]}><Algo2Pt15 /></Problem>\n  <Problem points={[3, 0, 0]}><Algo3Pt16 /></Problem>\n  <Problem points={[3, 0, 0]}><Algo3Pt17 /></Problem>\n  <Problem points={[3, 0, 0]}><Algo3Pt18 /></Problem>\n  <Problem points={[4, 0, 0]}><Algo4Pt19 /></Problem>\n  <Problem points={[4, 0, 0]}><Algo4Pt20 /></Problem>\n</Section>\n\n</Contest>\n","import { NoAuth } from \"@olinfo/quizms/student\";\n\nimport Contest from \"./contest/contest.mdx\";\n\nexport const metadata = {\n  title: \"Olimpiadi di Informatica\",\n  description: \"Olimpiadi Italiane di Informatica 2021/2022 - Selezione scolastica\",\n};\n\nexport default function App() {\n  return (\n    <NoAuth\n      contestName=\"Olimpiadi di Informatica\"\n      contestLongName={metadata.description}\n      duration={90}>\n      <Contest />\n    </NoAuth>\n  );\n}\n"],"names":["_jsx","Equation","_jsxs","_components","posti","disp","Image","esempio","cinque","sei","amici","Code","metadata","App","jsx","NoAuth","Contest"],"mappings":"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"}