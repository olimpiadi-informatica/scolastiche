{"version":3,"file":"78fb1bc6-page.js","sources":["../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/contest/s-1-pranzo-no-condizioni/toolbox.ts","../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/contest/s-1-pranzo-no-condizioni/visualizer.jsx","../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/contest/s-1-pranzo-no-condizioni/question.mdx","../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/contest/s-2-pranzo-cond-singola/toolbox.ts","../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/contest/s-2-pranzo-cond-singola/visualizer.jsx","../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/contest/s-2-pranzo-cond-singola/question.mdx","../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/contest/s-4-pranzo-operazioni-bool/toolbox.ts","../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/contest/s-4-pranzo-operazioni-bool/visualizer.jsx","../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/contest/s-4-pranzo-operazioni-bool/question.mdx","../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/contest/s-3-pranzo-cond-doppia/toolbox.ts","../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/contest/s-3-pranzo-cond-doppia/visualizer.jsx","../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/contest/s-3-pranzo-cond-doppia/question.mdx","../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/contest/contest.mdx","../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/header.md","../../../../src/fibonacci-corso/2-blocchi-condizionali-e-ripeti-mentre/page.tsx"],"sourcesContent":["import type { ToolboxInfo } from \"blockly/core/utils/toolbox\";\n\nexport const toolbox: ToolboxInfo = {\n  kind: \"categoryToolbox\",\n  contents: [\n    {\n      kind: \"category\",\n      name: \"Cicli\",\n      categorystyle: \"loop_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_repeat_ext\",\n          inputs: {\n            TIMES: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n          },\n        },\n      ],\n    },\n  ],\n};\n","\"use client\";\n\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/tiptap.asy?w=66\";\nimport stoveOn from \"./asy/fornello-acceso.asy?w=120\";\nimport stoveBack from \"./asy/fornello-retro.asy?w=120\";\nimport stoveOff from \"./asy/fornello-spento.asy?w=120\";\n\nconst foods = import.meta.glob(\"./asy/cibo-*.asy\", {\n  eager: true,\n  import: \"default\",\n  query: { w: 120 },\n});\n\nexport default function Visualizer({ variables, state }) {\n  function position(x, cook) {\n    if (x === -1) return [1.4, 1.3];\n    if (cook) return [2.2, 1.5];\n    return [0.5 * x + 2.4, 1.3];\n  }\n\n  return (\n    <>\n      <Canvas scale={130}>\n        <Sprite src={bunny} alt=\"Tip-Tap\" x={1.6} y={0.9} follow />\n        <Sprite src={stoveBack} alt=\"Fornello\" x={2.2} y={1.5} />\n        {range(Math.max(state.pos - 1, 0), state.N).map((i) => {\n          const pos = position(i - state.pos, state.queue[i].endsWith(\" cotta\"));\n          return (\n            <Sprite\n              key={i}\n              src={foods[`./asy/cibo-${state.queue[i].split(\" \")[0]}.asy`]}\n              alt={state.queue[i]}\n              x={pos[0]}\n              y={pos[1]}\n            />\n          );\n        })}\n        <Sprite\n          src={\n            state.pos < state.N && state.queue[state.pos].endsWith(\" cotta\") ? stoveOn : stoveOff\n          }\n          alt=\"Fornello\"\n          x={2.2}\n          y={1.5}\n        />\n      </Canvas>\n      <Variables variables={{ ...variables, \"N (num. cibi)\": state.N }} />\n    </>\n  );\n}\n","import { toolbox } from \"./toolbox.ts\";\nimport initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s1.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\nimport { Hint } from \"~/utils/hint\";\n\nTip-Tap deve preparare il pranzo ed ha allineato $N$ cibi che vuole mangiare dopo averli cotti.\nHai a disposizione questi blocchi:\n\n- `N`: il numero di cibi che Tip-Tap ha allineato.\n- `prossimo cibo`: il prossimo cibo che Tip-Tap non ha ancora mangiato.\n- `cuoci` $x$: cuoci il cibo $x$.\n- `mangia` $x$: mangia il cibo $x$.\n- `termina`: smetti di mangiare.\n\nScrivi un programma che consenta a Tip-Tap di pranzare come più preferisce!\n\nTi basterà usare i tipi di blocchi (_\"Esecuzione\"_ e _\"Cicli\"_) visti nella sezione precedente.\nAttenzione che alcuni blocchi _\"Esecuzione\"_ questa volta contengono uno spazio in cui puoi inserire un altro blocco di tipo numerico (tondo),\nin maniera simile a come si inserisce un blocco numerico nei cicli per indicare quante volte ripetere.\n\n<Blockly\n  toolbox={toolbox}\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Secondo questo programma, per ognuno degli $N$ cibi che Tip-Tap vuole mangiare, il protagonista\n> lo cuoce e poi lo mangia.\n","import type { ToolboxInfo } from \"blockly/core/utils/toolbox\";\n\nexport const toolbox: ToolboxInfo = {\n  kind: \"categoryToolbox\",\n  contents: [\n    {\n      kind: \"category\",\n      name: \"Logica\",\n      categorystyle: \"logic_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Cicli\",\n      categorystyle: \"loop_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_repeat_ext\",\n          inputs: {\n            TIMES: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n          },\n        },\n      ],\n    },\n  ],\n};\n","\"use client\";\n\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/bunny.asy?w=66\";\nimport stoveOn from \"./asy/fornello-acceso.asy?w=120\";\nimport stoveBack from \"./asy/fornello-retro.asy?w=120\";\nimport stoveOff from \"./asy/fornello-spento.asy?w=120\";\n\nconst foods = import.meta.glob(\"./asy/cibo-*.asy\", {\n  eager: true,\n  import: \"default\",\n  query: { w: 120 },\n});\n\nexport default function Visualizer({ variables, state }) {\n  function position(x, cook) {\n    if (x === -1) return [1.4, 1.3];\n    if (cook) return [2.2, 1.5];\n    return [0.5 * x + 2.4, 1.3];\n  }\n\n  return (\n    <>\n      <Canvas scale={130}>\n        <Sprite src={bunny} alt=\"Tip-Tap\" x={1.6} y={0.9} follow />\n        <Sprite src={stoveBack} alt=\"Fornello\" x={2.2} y={1.5} />\n        {range(Math.max(state.pos - 1, 0), state.N).map((i) => {\n          const pos = position(i - state.pos, state.queue[i].endsWith(\" cotta\"));\n          return (\n            <Sprite\n              key={i}\n              src={foods[`./asy/cibo-${state.queue[i].split(\" \")[0]}.asy`]}\n              alt={state.queue[i]}\n              x={pos[0]}\n              y={pos[1]}\n            />\n          );\n        })}\n        <Sprite\n          src={\n            state.pos < state.N && state.queue[state.pos].endsWith(\" cotta\") ? stoveOn : stoveOff\n          }\n          alt=\"Fornello\"\n          x={2.2}\n          y={1.5}\n        />\n      </Canvas>\n      <Variables variables={{ ...variables, \"N (num. cibi)\": state.N }} />\n    </>\n  );\n}\n","import { toolbox } from \"./toolbox.ts\";\nimport initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s1.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\nimport { Hint } from \"~/utils/hint\";\n\nAnche Bunny è ora a pranzo e ha allineato $N$ cibi. Come Tip-Tap, anche lui cuoce le verdure; tuttavia, non gli piace la frutta cotta.\nHai a disposizione gli stessi blocchi di prima, più uno per capire se un cibo è frutta o verdura:\n\n- `N`: il numero di cibi che Bunny ha allineato.\n- `prossimo cibo`: il prossimo cibo che Bunny non ha ancora mangiato.\n- $x$ `è una verdura`: vero se il cibo $x$ è una verdura **(nuovo!)**.\n- `cuoci` $x$: cuoci il cibo $x$.\n- `mangia` $x$: mangia il cibo $x$.\n- `termina`: smetti di mangiare.\n\nScrivi un programma che consenta a Bunny di pranzare come più preferisce!\n\nNota che il blocco che controlla se un cibo è una verdura, che si trova sempre nella sezione _\"Esecuzione\"_, ha una forma diversa del solito, ad esagono allungato.\nNella programmazione a blocchi, questa è la forma dei blocchi che producono un valore vero/falso!\nLe altre forme che abbiamo già visto sono:\n\n- **rettangolare**, usata per le istruzioni che compiono una qualche azione;\n- **stondata**, usata per i blocchi che calcolano un valore di tipo numerico.\n\nPuoi inserire i blocchi esagonali come condizioni nei blocchi **condizionali**, che trovi nella sezione _\"Logica\"_, tramite cui scegliere quali istruzioni eseguire.\n\n<Blockly\n  toolbox={toolbox}\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Secondo questo programma, per ognuno degli $N$ cibi che Bunny vuole mangiare, il protagonista\n> controlla se il prossimo cibo è una verdura, e in caso affermativo la cuoce prima di mangiarla.\n> A questo punto mangia il prossimo cibo (che sia verdura o frutta), che sarà di suo gradimento:\n> verdura cotta o frutta cruda.\n","import type { ToolboxInfo } from \"blockly/core/utils/toolbox\";\n\nexport const toolbox: ToolboxInfo = {\n  kind: \"categoryToolbox\",\n  contents: [\n    {\n      kind: \"category\",\n      name: \"Logica\",\n      categorystyle: \"logic_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"logic_operation\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_negate\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n          extraState: {\n            hasElse: \"true\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Cicli\",\n      categorystyle: \"loop_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_repeat_ext\",\n          inputs: {\n            TIMES: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n          },\n        },\n        {\n          kind: \"block\",\n          type: \"controls_whileUntil\",\n        },\n      ],\n    },\n  ],\n};\n","\"use client\";\n\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/carol.asy?w=66\";\nimport stoveOn from \"./asy/fornello-acceso.asy?w=120\";\nimport stoveBack from \"./asy/fornello-retro.asy?w=120\";\nimport stoveOff from \"./asy/fornello-spento.asy?w=120\";\n\nconst foods = import.meta.glob(\"./asy/cibo-*.asy\", {\n  eager: true,\n  import: \"default\",\n  query: { w: 120 },\n});\n\nexport default function Visualizer({ variables, state }) {\n  function position(x, cook) {\n    if (x === -1) return state.trash ? [0.5, 1.7] : [1.4, 1.3];\n    if (cook) return [2.2, 1.5];\n    return [0.5 * x + 2.4, 1.3];\n  }\n\n  return (\n    <>\n      <Canvas scale={130}>\n        <Sprite src={bunny} alt=\"Tip-Tap\" x={1.6} y={0.9} follow />\n        <Sprite src={stoveBack} alt=\"Fornello\" x={2.2} y={1.5} />\n        {range(Math.max(state.pos - 1, 0), state.N).map((i) => {\n          const pos = position(i - state.pos, state.queue[i].endsWith(\" cotta\"));\n          return (\n            <Sprite\n              key={i}\n              src={foods[`./asy/cibo-${state.queue[i].split(\" \")[0]}.asy`]}\n              alt={state.queue[i]}\n              x={pos[0]}\n              y={pos[1]}\n            />\n          );\n        })}\n        <Sprite\n          src={\n            state.pos < state.N && state.queue[state.pos].endsWith(\" cotta\") ? stoveOn : stoveOff\n          }\n          alt=\"Fornello\"\n          x={2.2}\n          y={1.5}\n        />\n      </Canvas>\n      <Variables variables={{ ...variables, \"N (num. cibi)\": state.N }} />\n    </>\n  );\n}\n","import { toolbox } from \"./toolbox.ts\";\nimport initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s1.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\nimport { Hint } from \"~/utils/hint\";\n\nAnche Carol è ora a pranzo e ha allineato $N$ cibi. Come Bunny, anche lei mangia di tutto e preferisce mangiare la frutta cruda.\nTuttavia non cuoce tutte le verdure: cuoce solo quelle che non sono gialle!\nHai a disposizione gli stessi blocchi di prima:\n\n- `N`: il numero di cibi che Carol ha allineato.\n- `prossimo cibo`: il prossimo cibo che Carol non ha ancora mangiato.\n- $x$ `è una verdura`: vero se il cibo $x$ è una verdura.\n- $x$ `è giallo`: vero se il cibo $x$ è giallo.\n- `cuoci` $x$: cuoci il cibo $x$.\n- `mangia` $x$: mangia il cibo $x$.\n- `butta` $x$: butta via il cibo $x$.\n- `termina`: smetti di mangiare.\n\nScrivi un programma che consenta a Carol di pranzare come più preferisce!\n\nStavolta nella sezione _\"Logica\"_ ci sono due nuovi blocchi esagonali: il blocco \"non\" che restituisce l'opposto di quello che gli viene inserito dentro (falso se vero, e vero se falso),\ne il blocco \"e/o\" che combina due valori vero/falso (se scegli \"e\" il risultato finale sarà vero solo se i valori inseriti sono entrambi veri; se scegli \"o\" sarà falso solo se sono entrambi falsi).\n\n<Blockly\n  toolbox={toolbox}\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Secondo questo programma, per ognuno degli $N$ cibi che Carol vuole mangiare, il protagonista\n> controlla se il prossimo cibo è una verdura *e* non è giallo, e in caso affermativo lo cuoce prima di mangiarlo.\n> A questo punto mangia il prossimo cibo (che sia verdura o frutta, gialla o no), che sarà di suo gradimento.\n","import type { ToolboxInfo } from \"blockly/core/utils/toolbox\";\n\nexport const toolbox: ToolboxInfo = {\n  kind: \"categoryToolbox\",\n  contents: [\n    {\n      kind: \"category\",\n      name: \"Logica\",\n      categorystyle: \"logic_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n        },\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n          extraState: {\n            hasElse: \"true\",\n          },\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Cicli\",\n      categorystyle: \"loop_category\",\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_repeat_ext\",\n          inputs: {\n            TIMES: {\n              block: {\n                type: \"math_number\",\n                fields: { NUM: 10 },\n              },\n            },\n          },\n        },\n        {\n          kind: \"block\",\n          type: \"controls_whileUntil\",\n        },\n      ],\n    },\n  ],\n};\n","\"use client\";\n\nimport { range } from \"lodash-es\";\n\nimport { Canvas, Sprite, Variables } from \"~/utils/visualizer\";\n\nimport bunny from \"./asy/allie.asy?w=66\";\nimport stoveOn from \"./asy/fornello-acceso.asy?w=120\";\nimport stoveBack from \"./asy/fornello-retro.asy?w=120\";\nimport stoveOff from \"./asy/fornello-spento.asy?w=120\";\n\nconst foods = import.meta.glob(\"./asy/cibo-*.asy\", {\n  eager: true,\n  import: \"default\",\n  query: { w: 120 },\n});\n\nexport default function Visualizer({ variables, state }) {\n  function position(x, cook) {\n    if (x === -1) return state.trash ? [0.5, 1.7] : [1.4, 1.3];\n    if (cook) return [2.2, 1.5];\n    return [0.5 * x + 2.4, 1.3];\n  }\n\n  return (\n    <>\n      <Canvas scale={130}>\n        <Sprite src={bunny} alt=\"Tip-Tap\" x={1.6} y={0.9} follow />\n        <Sprite src={stoveBack} alt=\"Fornello\" x={2.2} y={1.5} />\n        {range(Math.max(state.pos - 1, 0), state.N).map((i) => {\n          const pos = position(i - state.pos, state.queue[i].endsWith(\" cotta\"));\n          return (\n            <Sprite\n              key={i}\n              src={foods[`./asy/cibo-${state.queue[i].split(\" \")[0]}.asy`]}\n              alt={state.queue[i]}\n              x={pos[0]}\n              y={pos[1]}\n            />\n          );\n        })}\n        <Sprite\n          src={\n            state.pos < state.N && state.queue[state.pos].endsWith(\" cotta\") ? stoveOn : stoveOff\n          }\n          alt=\"Fornello\"\n          x={2.2}\n          y={1.5}\n        />\n      </Canvas>\n      <Variables variables={{ ...variables, \"N (num. cibi)\": state.N }} />\n    </>\n  );\n}\n","import { toolbox } from \"./toolbox.ts\";\nimport initialBlocks from \"./initial-blocks.json\";\nimport customBlocks from \"./s1.blocks.yaml\";\nimport testcases from \"./testcases.py\";\nimport Visualizer from \"./visualizer.jsx\";\nimport { Hint } from \"~/utils/hint\";\n\nAnche Allie è ora a pranzo e ha allineato $N$ cibi. Come gli altri, anche lei cuoce le verdure; tuttavia, non gli piace affatto la frutta, né cruda né cotta.\nNon solo: detesta talmente il colore giallo, che appena vede qualcosa di giallo perde l'appetito e non vuole più mangiare!\nHai a disposizione gli stessi blocchi di prima, più uno per controllare se un cibo è giallo e un'altro per scartare il cibo:\n\n- `N`: il numero di cibi che Allie ha allineato.\n- `prossimo cibo`: il prossimo cibo che Allie non ha ancora mangiato.\n- $x$ `è una verdura`: vero se il cibo $x$ è una verdura.\n- $x$ `è giallo`: vero se il cibo $x$ è giallo **(nuovo!)**.\n- `cuoci` $x$: cuoci il cibo $x$.\n- `mangia` $x$: mangia il cibo $x$.\n- `butta` $x$: butta via il cibo $x$ **(nuovo!)**.\n- `termina`: smetti di mangiare.\n\nScrivi un programma che consenta a Allie di pranzare come più preferisce, senza perdere tempo a cuocere cose prima di buttarle!\n\nStavolta nella sezione _\"Logica\"_ c'è un blocco condizionale in più, che ti consente di specificare cosa fare quando la condizione (esagonale) inserita è falsa.\n\nInoltre, nella sezione _\"Cicli\"_ c'è un ciclo in più: \"ripeti mentre\", che ripetere alcune istruzioni più volte, mentre che una condizione è vera, fermandosi appena è falsa.\nDopo averlo trascinato, puoi anche cliccare sul triangolino in basso dopo \"mentre\" per farlo diventare \"ripeti fino a che\": in questo caso, ripete le istruzioni mentre che la condizione è falsa, fermandosi appena è vera.\n\n<Blockly\n  toolbox={toolbox}\n  customBlocks={customBlocks}\n  initialBlocks={initialBlocks}\n  testcases={testcases}\n  visualizer={Visualizer}\n/>\n\n> Un possibile programma corretto è il seguente:\n>\n> ![soluzione](sol.png)\n>\n> Secondo questo programma, Allie continua a mangiare cibi fino a che non vede il colore giallo.\n> Per ciascun cibo che incontra fino a quel momento, la protagonista\n> controlla se il prossimo cibo è una verdura, e in caso affermativo la cuoce e poi la mangia.\n> Altrimenti si tratta di frutta, e quindi la butta.\n","<Contest>\n\n<Section>\n  <Problem points={[5, 0, 0]}><S1PranzoNoCondizioni /></Problem>\n  <Problem points={[5, 0, 0]}><S2PranzoCondSingola /></Problem>\n  <Problem points={[5, 0, 0]}><S3PranzoCondDoppia /></Problem>\n  <Problem points={[5, 0, 0]}><S4PranzoOperazioniBool /></Problem>\n</Section>\n\n</Contest>\n","# Corso di Programmazione a Blocchi\n\n## Lezione 2 - Blocchi Condizionali e Ripeti Mentre\n\nBenvenuto nel corso di programmazione a blocchi per la preparazione ai Giochi di Fibonacci!\n\nQuesta è la seconda lezione, in cui ti faremo vedere:\n\n- i blocchi di tipo \"logica\";\n- il blocco \"ripeti mentre/fino a che\".\n\n## Punteggio e struttura delle lezioni\n\nLe lezioni di questo corso contengono alcuni problemi di programmazione a blocchi, da risolvere in al massimo _4 giorni_. Appena avrai finito di lavorarci, potrai cliccare su \"Termina\" per vedere subito un riepilogo del punteggio che hai ottenuto, e le soluzioni spiegate di tutti i problemi! Se anche non lo farai, la lezione verrà terminata automaticamente dopo 4 giorni. Potrai comunque ricominciare la lezione quante volte vuoi, cliccando sul tasto \"Ricomincia\" (freccia curva che torna indietro).\n\nI problemi richiedono di scrivere un **singolo** programma a blocchi, che viene valutato **contemporaneamente** su più livelli.\nQuindi attenzione che non puoi scrivere programmi diversi per i diversi livelli, ma uno solo!\nPer ciascun livello correttamente risolto di ciascun problema, otterrai _5 punti_.\n","import { NoAuth } from \"@olinfo/quizms/student\";\n\nimport Statement from \"./contest/contest.mdx\";\nimport Header from \"./header.md\";\n\nexport const metadata = {\n  title: \"Corso di Programmazione\",\n  description: \"Corso di Programmazione a Blocchi per i Giochi di Fibonacci\",\n};\n\nexport default function App() {\n  return (\n    <NoAuth contestLongName=\"\" contestName=\"Corso di Programmazione\" duration={5760}>\n      <Header />\n      <Statement />\n    </NoAuth>\n  );\n}\n"],"names":["toolbox","foods","__vite_glob_0_0","__vite_glob_0_1","__vite_glob_0_2","__vite_glob_0_3","__vite_glob_0_4","__vite_glob_0_5","Visualizer","variables","state","position","x","cook","jsxs","Fragment","Canvas","jsx","Sprite","bunny","stoveBack","range","i","pos","stoveOn","stoveOff","Variables","_jsx","Equation","_jsxs","_components","customBlocks","initialBlocks","testcases","Code","metadata","App","NoAuth","Header","Statement"],"mappings":"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"}