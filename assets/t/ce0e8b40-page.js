/*! For licenses information, see LICENSES.txt */
"use client";import{j as e}from"../_virtual_quizms-routes-fac36c6f.js";import{P as f,I as V}from"../u/0c8ab02f-components.js";import{C as v,r as p,S as u,V as y}from"../i/91ed2248-visualizer.js";import{H as m}from"../v/5737bdc8-hint.js";function E(){return{...f()}}const S={src:new URL("../e/e5d74412-sol.webp",import.meta.url).href,width:639,height:528};const X={kind:"categoryToolbox",contents:[{kind:"category",name:"Matematica",categorystyle:"math_category",contents:[{kind:"block",type:"math_number",fields:{NUM:123}},{kind:"block",type:"math_arithmetic",fields:{OP:"ADD"}}]},{kind:"category",name:"Logica",categorystyle:"logic_category",contents:[{kind:"block",type:"logic_compare"},{kind:"block",type:"logic_operation"},{kind:"block",type:"logic_negate"},{kind:"block",type:"controls_if"},{kind:"block",type:"controls_if",extraState:{hasElse:"true"}}]},{kind:"category",name:"Cicli",categorystyle:"loop_category",contents:[{kind:"block",type:"controls_repeat_ext",inputs:{TIMES:{block:{type:"math_number",fields:{NUM:10}}}}},{kind:"block",type:"controls_whileUntil"}]}]},G=JSON.parse('{"blocks":{"languageVersion":0,"blocks":[{"type":"start","id":"y=zq)Uya2A/{vyOtN[i6","x":61,"y":81}]},"variables":[]}'),K=JSON.parse(`[{"type":"start","message0":"inizia qui","inputsInline":true,"colour":20,"tooltip":"L'esecuzione inizia da qui","helpUrl":"","maxInstances":1,"js":"","nextStatement":null},{"type":"N","message0":"N","inputsInline":true,"colour":20,"tooltip":"numero di alberi di mele","helpUrl":"","js":["state.N",1.2],"output":"Number"},{"type":"M","message0":"M","inputsInline":true,"colour":20,"tooltip":"numero di mele in ciascun albero","helpUrl":"","js":["state.M",1.2],"output":"Number"},{"type":"C","message0":"C","inputsInline":true,"colour":20,"tooltip":"numero massimo di mele che può contenere il cestino","helpUrl":"","js":["state.C",1.2],"output":"Number"},{"type":"raccogli mele","message0":"raccogli %1 mele","args0":[{"type":"input_value","check":"Number","min":["0",0],"integer":true,"name":"_ARG0"}],"inputsInline":true,"colour":20,"tooltip":"raccogli alcune mele dagli alberi, mettendole nel cestino","helpUrl":"","js":"for (var i = 0; i < _ARG0; i++) {\\n  if (state.res == state.N * state.M) exit(false, \\"non ci sono così tante mele sugli alberi!\\");\\n  state.res += 1;\\n  if (state.res > state.C) exit(false, \\"hai raccolto troppe mele e sfondato il cestino!\\");\\n  pause();\\n}","nextStatement":null,"previousStatement":null},{"type":"termina","message0":"termina","inputsInline":true,"colour":20,"tooltip":"riporta il cestino a casa","helpUrl":"","js":"if (state.res < state.sol) exit(false, \\"potevi raccogliere più mele!\\");\\nexit(true, \\"hai raccolto più mele possibile, complimenti!\\");","previousStatement":null}]`),F=JSON.parse('[{"N":1,"M":5,"C":8,"sol":5,"res":0},{"N":1,"M":4,"C":2,"sol":2,"res":0},{"N":2,"M":5,"C":16,"sol":10,"res":0},{"N":3,"M":6,"C":16,"sol":16,"res":0}]'),k={src:new URL("../9/98ab570a-bunny.svg",import.meta.url).href,width:66,height:116.42696629213484},N={src:new URL("../7/70d6e529-tree.svg",import.meta.url).href,width:250,height:337.5},_={src:new URL("../9/96422730-apple.svg",import.meta.url).href,width:20,height:23.47826086956522},M={src:new URL("../8/8fae0542-trash.svg",import.meta.url).href,width:50,height:63.76146788990825};function J({variables:t,state:i}){var a=0;let o=Math.floor(i.res/i.M)*25+7;return e.jsxs(e.Fragment,{children:[e.jsxs(v,{gravity:"bottom",scale:10,children:[p(i.N).flatMap(n=>e.jsx(u,{src:N,alt:"Albero",x:n*25+10,y:0,className:"origin-bottom"},`albero${n}`)),e.jsx(u,{src:k,alt:"Tip-Tap",x:o,y:4,follow:!0},"tiptap"),p(i.N).flatMap(n=>p(i.M).map(l=>(a+=1,e.jsx(u,{src:_,alt:"Mela",x:a<=i.res?3.4+(a-1)%3+o:n*25+12+22*l/i.M,y:a<=i.res?2.3+Math.floor((a-1)/3)*1.5:17+(5*l+n)%7,className:"origin-bottom"},`mela${n}-${l}`)))),e.jsx(u,{src:M,alt:"Cestino",x:o+3,y:i.C*.3-.7,scaleY:(i.C+1)*.1},"cestino")]}),e.jsx(y,{variables:{...t,"N (num. alberi)":i.N,"M (mele per albero)":i.M,"C (max. cestino)":i.C,"Mele raccolte":i.res}})]})}function T(t){const i={em:"em",li:"li",p:"p",strong:"strong",ul:"ul",...E(),...t.components},{Blockly:a,Code:o,Equation:n,Explanation:l,Image:s,SubProblem:c}=i;return a||x("Blockly"),o||x("Code"),n||x("Equation"),l||x("Explanation"),s||x("Image"),c||x("SubProblem"),e.jsxs(c,{children:[e.jsx(i.p,{children:`Tip-Tap ha alcuni alberi di mele nel suo giardino, ciascuno con lo stesso numero di mele.
Tip-Tap vuole raccogliere più mele possibile, ma ha soltanto un cestino grande abbastanza per alcune mele:
se ne raccogliesse più di quante ce ne stanno nel cestino, finirebbero per cadere dappertutto!
Hai a disposizione questi blocchi:`}),e.jsxs(i.ul,{children:[`
`,e.jsxs(i.li,{children:[e.jsx(o,{code:String.raw`N`,inline:!0,lang:"text",className:"p-0 text-base"}),": il numero di alberi di mele."]}),`
`,e.jsxs(i.li,{children:[e.jsx(o,{code:String.raw`M`,inline:!0,lang:"text",className:"p-0 text-base"}),": il numero di mele in ciascun albero."]}),`
`,e.jsxs(i.li,{children:[e.jsx(o,{code:String.raw`C`,inline:!0,lang:"text",className:"p-0 text-base"}),": il numero massimo di mele che può contenere il cestino."]}),`
`,e.jsxs(i.li,{children:[e.jsx(o,{code:String.raw`raccogli`,inline:!0,lang:"text",className:"p-0 text-base"})," ",e.jsx(n,{children:String.raw`x`})," ",e.jsx(o,{code:String.raw`mele`,inline:!0,lang:"text",className:"p-0 text-base"}),": raccogli ",e.jsx(n,{children:String.raw`x`})," mele dagli alberi, mettendole nel cestino."]}),`
`,e.jsxs(i.li,{children:[e.jsx(o,{code:String.raw`termina`,inline:!0,lang:"text",className:"p-0 text-base"}),": riporta il cestino a casa."]}),`
`]}),e.jsx(i.p,{children:"Aiuta Tip-Tap a raccogliere più mele possibile, senza sfondare il suo cestino!"}),e.jsxs(i.p,{children:["Per risolvere questo problema, dovrai usare una nuova categoria di blocchi ",e.jsx(i.em,{children:"“Matematica”"}),`,
che consentono di fare semplici operazioni aritmetiche su blocchi valore numerici (stondati).
Inoltre, ti servirà anche un nuovo blocco verità (esagonale) che trovi all’inizio della
categoria `,e.jsx(i.em,{children:"“Logica”"}),", che serve a confrontare due blocchi valore numerici."]}),e.jsx(m,{label:"suggerimento 1",children:e.jsx(i.p,{children:"Ci sono due casi che devi considerare, quali sono?"})}),e.jsx(m,{label:"suggerimento 2",children:e.jsxs(i.p,{children:[`Come puoi contare il numero di mele con una formula matematica?
Ricorda che con i blocchi `,e.jsx(i.em,{children:"“Matematica”"})," puoi mettere formule nei tuoi programmi."]})}),e.jsx(m,{label:"suggerimento 3",children:e.jsx(i.p,{children:"Pensa a come usare i blocchi logici per imporre le condizioni che desideri!"})}),e.jsx(a,{toolbox:X,customBlocks:K,initialBlocks:G,testcases:F,visualizer:J}),e.jsxs(l,{children:[e.jsx(i.p,{children:"Un possibile programma corretto è il seguente:"}),e.jsx(i.p,{children:e.jsx(s,{alt:"soluzione",src:typeof S=="function"?S(_variant):S})}),e.jsx(i.p,{children:`Ci sono due casi: il cestino non è abbastanza grande per contenere tutte le mele, oppure lo è.
Nel primo caso, raccogliamo mele fino a riempire il cestino.
Nel secondo caso, raccogliamo tutte le mele dagli alberi.`})]}),e.jsxs(i.p,{children:["Prima di passare alla prossima domanda, assicurati di aver risolto ",e.jsx(i.strong,{children:"tutti i livelli"})," di questa!"]})]})}function Q(t={}){const{wrapper:i}={...E(),...t.components};return i?e.jsx(i,{...t,children:e.jsx(T,{...t})}):T(t)}function x(t,i){throw new Error("Expected component `"+t+"` to be defined: you likely forgot to import, pass, or provide it.")}function B(){return{...f()}}const w={src:new URL("../b/b9f343c5-sol.webp",import.meta.url).href,width:641,height:796};const Y={kind:"categoryToolbox",contents:[{kind:"category",name:"Variabili",categorystyle:"variable_category",custom:"VARIABLE"},{kind:"category",name:"Matematica",categorystyle:"math_category",contents:[{kind:"block",type:"math_number",fields:{NUM:123}},{kind:"block",type:"math_arithmetic",fields:{OP:"ADD"}}]},{kind:"category",name:"Logica",categorystyle:"logic_category",contents:[{kind:"block",type:"logic_compare"},{kind:"block",type:"logic_operation"},{kind:"block",type:"logic_negate"},{kind:"block",type:"controls_if"},{kind:"block",type:"controls_if",extraState:{hasElse:"true"}}]},{kind:"category",name:"Cicli",categorystyle:"loop_category",contents:[{kind:"block",type:"controls_for",fields:{VAR:"i"},inputs:{FROM:{block:{type:"math_number",fields:{NUM:1}}},TO:{block:{type:"math_number",fields:{NUM:10}}},BY:{block:{type:"math_number",fields:{NUM:1}}}}}]}]},H=JSON.parse('{"blocks":{"languageVersion":0,"blocks":[{"type":"start","id":"y=zq)Uya2A/{vyOtN[i6","x":61,"y":81}]},"variables":[]}'),W=JSON.parse(`[{"type":"start","message0":"inizia qui","inputsInline":true,"colour":20,"tooltip":"L'esecuzione inizia da qui","helpUrl":"","maxInstances":1,"js":"","nextStatement":null},{"type":"N","message0":"N","inputsInline":true,"colour":20,"tooltip":"numero di alberi di mele","helpUrl":"","js":["state.N",1.2],"output":"Number"},{"type":"mele albero","message0":"mele albero %1","args0":[{"type":"input_value","check":"Number","min":["1",0],"integer":true,"name":"_ARG0"}],"inputsInline":true,"colour":20,"tooltip":"numero di mele nell'albero i-esimo","helpUrl":"","js":["state.N < _ARG0 ? exit(false, \\"non esiste l'albero numero \\" + _ARG0) : state.M[_ARG0-1]",15],"output":"Number"},{"type":"C","message0":"C","inputsInline":true,"colour":20,"tooltip":"numero massimo di mele che può contenere il cestino","helpUrl":"","js":["state.C",1.2],"output":"Number"},{"type":"raccogli mele","message0":"raccogli %1 mele","args0":[{"type":"input_value","check":"Number","min":["0",0],"integer":true,"name":"_ARG0"}],"inputsInline":true,"colour":20,"tooltip":"raccogli alcune mele dagli alberi, mettendole nel cestino","helpUrl":"","js":"var acc = 0;\\nfor (var i = 0; i <= state.pos; i++) acc += state.M[i];\\nfor (var i = 0; i < _ARG0; i++) {\\n  if (state.res == state.tot) exit(false, \\"non ci sono così tante mele sugli alberi!\\");\\n  state.res += 1;\\n  if (state.res > state.C) exit(false, \\"hai raccolto troppe mele e sfondato il cestino!\\");\\n  pause();\\n  if (state.res === acc) {\\n    state.pos += 1;\\n    acc += state.M[state.pos];\\n    pause();\\n  }\\n}","nextStatement":null,"previousStatement":null},{"type":"termina","message0":"termina","inputsInline":true,"colour":20,"tooltip":"riporta il cestino a casa","helpUrl":"","js":"if (state.res < state.sol) exit(false, \\"potevi raccogliere più mele!\\");\\nexit(true, \\"hai raccolto più mele possibile, complimenti!\\");","previousStatement":null}]`),Z=JSON.parse('[{"N":2,"M":[5,5],"C":10,"tot":10,"sol":10,"res":0,"pos":0},{"N":2,"M":[6,8],"C":8,"tot":14,"sol":8,"res":0,"pos":0},{"N":3,"M":[5,4,5],"C":19,"tot":14,"sol":14,"res":0,"pos":0},{"N":4,"M":[8,5,8,5],"C":10,"tot":26,"sol":10,"res":0,"pos":0}]');function ee({variables:t,state:i}){var a=0;let o=i.pos*25+7;return e.jsxs(e.Fragment,{children:[e.jsxs(v,{gravity:"bottom",scale:10,children:[p(i.N).flatMap(n=>e.jsx(u,{src:N,alt:"Albero",x:n*25+10,y:0,className:"origin-bottom"},`albero${n}`)),e.jsx(u,{src:k,alt:"Tip-Tap",x:o,y:4,follow:!0},"tiptap"),p(i.N).flatMap(n=>p(i.M[n]).map(l=>(a+=1,e.jsx(u,{src:_,alt:"Mela",x:a<=i.res?3.4+(a-1)%3+o:n*25+12+22*l/i.M[n],y:a<=i.res?2.3+Math.floor((a-1)/3)*1.5:17+(5*l+n)%7,className:"origin-bottom"},`mela${n}-${l}`)))),e.jsx(u,{src:M,alt:"Cestino",x:o+3,y:i.C*.3-.7,scaleY:(i.C+1)*.1},"cestino")]}),e.jsx(y,{variables:{...t,"N (num. alberi)":i.N,"C (max. cestino)":i.C,"Mele raccolte":i.res}})]})}function q(t){const i={em:"em",li:"li",p:"p",span:"span",strong:"strong",ul:"ul",...B(),...t.components},{Blockly:a,Code:o,Equation:n,Explanation:l,Image:s,SubProblem:c}=i;return a||h("Blockly"),o||h("Code"),n||h("Equation"),l||h("Explanation"),s||h("Image"),c||h("SubProblem"),e.jsxs(c,{children:[e.jsx(i.p,{children:`Tip-Tap è alle prese con ancora un altro raccolto di mele!
Anche stavolta ogni albero ha un numero diverso di mele.
Tuttavia, ora Tip-Tap indossa delle lenti a contatto e riesce
a contare le mele anche negli alberi più lontani senza spostarsi.
Hai a disposizione questi blocchi:`}),e.jsxs(i.ul,{children:[`
`,e.jsxs(i.li,{children:[e.jsx(o,{code:String.raw`N`,inline:!0,lang:"text",className:"p-0 text-base"}),": il numero di alberi di mele."]}),`
`,e.jsxs(i.li,{children:[e.jsx(o,{code:String.raw`mele albero`,inline:!0,lang:"text",className:"p-0 text-base"})," ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`x`}),":"]})," il numero di mele nell’albero ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`x`}),"-esimo"]})," ",e.jsx(i.strong,{children:"(nuovo!)"}),"."]}),`
`,e.jsxs(i.li,{children:[e.jsx(o,{code:String.raw`C`,inline:!0,lang:"text",className:"p-0 text-base"}),": il numero massimo di mele che può contenere il cestino."]}),`
`,e.jsxs(i.li,{children:[e.jsx(o,{code:String.raw`raccogli`,inline:!0,lang:"text",className:"p-0 text-base"})," ",e.jsx(n,{children:String.raw`x`})," ",e.jsx(o,{code:String.raw`mele`,inline:!0,lang:"text",className:"p-0 text-base"}),": raccogli ",e.jsx(n,{children:String.raw`x`})," mele dagli alberi, mettendole nel cestino."]}),`
`,e.jsxs(i.li,{children:[e.jsx(o,{code:String.raw`termina`,inline:!0,lang:"text",className:"p-0 text-base"}),": riporta il cestino a casa."]}),`
`]}),e.jsx(i.p,{children:"Aiuta di nuovo Tip-Tap a raccogliere più mele possibile, senza sfondare il suo cestino!"}),e.jsxs(i.p,{children:["Per risolvere questo problema dovrai usare un nuovo blocco, detto ",e.jsx(i.strong,{children:"ciclo contatore"}),`,
che si trova nella categoria `,e.jsx(i.em,{children:"“Cicli”"}),`. Quando aggiungi questo ciclo al tuo programma,
una nuova variabile si crea automaticamente, usando il nome convenzionale `,e.jsx(n,{children:String.raw`i`}),` (e se
aggiungi altri cicli contatore, i nomi seguenti `,e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`j`}),","]})," ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`k`}),","]}),` ecc). Il ciclo ti chiede poi
di specificare:`]}),e.jsxs(i.ul,{children:[`
`,e.jsx(i.li,{children:"un intervallo numerico di valori “da/a”;"}),`
`,e.jsx(i.li,{children:"e una dimensione di incremento “per”."}),`
`]}),e.jsxs(i.p,{children:[`Quando il ciclo verrà eseguito, tutte le istruzioni contenute saranno ripetute più volte,
ogni volta aggiornando il valore della variabile contatore del ciclo, partendo dal valore
“da” e aumentandolo del valore “per” fino a raggiungere il valore “a”. Per esempio, se fai
un ciclo “conta con `,e.jsx(n,{children:String.raw`i`})," da 3 a 8 per 2”, l’istruzione nel ciclo verrà eseguita:"]}),e.jsxs(i.ul,{children:[`
`,e.jsxs(i.li,{children:["una prima volta, dopo aver assegnato il valore iniziale ",e.jsx(n,{children:String.raw`3`})," alla variabile ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`i`}),";"]})]}),`
`,e.jsxs(i.li,{children:["una seconda volta, dopo aver aumentato il valore di ",e.jsx(n,{children:String.raw`i`})," di 2, che quindi arriva a contenere il valore ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`5`}),";"]})]}),`
`,e.jsxs(i.li,{children:["una terza volta dopo aver assegnato il valore ",e.jsx(n,{children:String.raw`7`})," a ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`i`}),";"]})]}),`
`,e.jsxs(i.li,{children:["il ciclo poi termina perché il valore successivo sarebbe ",e.jsx(n,{children:String.raw`9`})," che però è maggiore del limite ",e.jsx(n,{children:String.raw`8`})," specificato."]}),`
`]}),e.jsx(m,{children:e.jsx(i.p,{children:`Puoi riutilizzare la stessa struttura della scorsa domanda.
Basta sostituire il ciclo ripeti N con un ciclo contatore!`})}),e.jsx(a,{toolbox:Y,customBlocks:W,initialBlocks:H,testcases:Z,visualizer:ee}),e.jsxs(l,{children:[e.jsx(i.p,{children:"Un possibile programma corretto è il seguente:"}),e.jsx(i.p,{children:e.jsx(s,{alt:"soluzione",src:typeof w=="function"?w(_variant):w})}),e.jsxs(i.p,{children:[`Come nella domanda precedente, innanzitutto Tip-Tap conta il numero totale di mele.
Tuttavia, questa volta lo fa con un ciclo contatore, iterando su tutti gli alberi dal
primo all’`,e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`N`}),"-esimo,"]}),` e ogni volta aggiungendo il numero di mele dell’albero alla somma.
Infine, decide se raccogliere tutte le mele o `,e.jsx(n,{children:String.raw`C`})," mele, a seconda di quale sia più piccolo."]})]}),e.jsxs(i.p,{children:["Prima di passare alla prossima domanda, assicurati di aver risolto ",e.jsx(i.strong,{children:"tutti i livelli"})," di questa!"]})]})}function ie(t={}){const{wrapper:i}={...B(),...t.components};return i?e.jsx(i,{...t,children:e.jsx(q,{...t})}):q(t)}function h(t,i){throw new Error("Expected component `"+t+"` to be defined: you likely forgot to import, pass, or provide it.")}function P(){return{...f()}}const z={src:new URL("../1/15a94e9f-cambia.webp",import.meta.url).href,width:769,height:105},C={src:new URL("../f/f24c8d67-sol.webp",import.meta.url).href,width:684,height:860};const ne={kind:"categoryToolbox",contents:[{kind:"category",name:"Variabili",categorystyle:"variable_category",custom:"VARIABLE"},{kind:"category",name:"Matematica",categorystyle:"math_category",contents:[{kind:"block",type:"math_number",fields:{NUM:123}},{kind:"block",type:"math_arithmetic",fields:{OP:"ADD"}}]},{kind:"category",name:"Logica",categorystyle:"logic_category",contents:[{kind:"block",type:"logic_compare"},{kind:"block",type:"logic_operation"},{kind:"block",type:"logic_negate"},{kind:"block",type:"controls_if"},{kind:"block",type:"controls_if",extraState:{hasElse:"true"}}]},{kind:"category",name:"Cicli",categorystyle:"loop_category",contents:[{kind:"block",type:"controls_repeat_ext",inputs:{TIMES:{block:{type:"math_number",fields:{NUM:10}}}}},{kind:"block",type:"controls_whileUntil"}]}]},te=JSON.parse('{"blocks":{"languageVersion":0,"blocks":[{"type":"start","id":"y=zq)Uya2A/{vyOtN[i6","x":61,"y":81}]},"variables":[]}'),oe=JSON.parse(`[{"type":"start","message0":"inizia qui","inputsInline":true,"colour":20,"tooltip":"L'esecuzione inizia da qui","helpUrl":"","maxInstances":1,"js":"","nextStatement":null},{"type":"N","message0":"N","inputsInline":true,"colour":20,"tooltip":"numero di alberi di mele","helpUrl":"","js":["state.N",1.2],"output":"Number"},{"type":"mele prossimo albero","message0":"mele prossimo albero","inputsInline":true,"colour":20,"tooltip":"numero di mele nell'albero di fronte a Tip-Tap","helpUrl":"","js":["state.pos == state.N ? exit(false, \\"non ci sono alberi di fronte a Tip-Tap\\") : state.M[state.pos]",15],"output":"Number"},{"type":"avanza","message0":"avanza","inputsInline":true,"colour":20,"tooltip":"avanza all'albero successivo","helpUrl":"","js":"if (state.pos == state.N) exit(false, \\"sei già alla fine degli alberi\\");\\nstate.pos += 1;","nextStatement":null,"previousStatement":null},{"type":"C","message0":"C","inputsInline":true,"colour":20,"tooltip":"numero massimo di mele che può contenere il cestino","helpUrl":"","js":["state.C",1.2],"output":"Number"},{"type":"raccogli mele","message0":"raccogli %1 mele","args0":[{"type":"input_value","check":"Number","min":["0",0],"integer":true,"name":"_ARG0"}],"inputsInline":true,"colour":20,"tooltip":"raccogli alcune mele dagli alberi, mettendole nel cestino","helpUrl":"","js":"if (state.res == 0 && state.pos > 0) {\\n  state.pos = 0;\\n  pause();\\n}\\nvar acc = 0;\\nfor (var i = 0; i <= state.pos; i++) acc += state.M[i];\\nfor (var i = 0; i < _ARG0; i++) {\\n  if (state.res == state.tot) exit(false, \\"non ci sono così tante mele sugli alberi!\\");\\n  state.res += 1;\\n  if (state.res > state.C) exit(false, \\"hai raccolto troppe mele e sfondato il cestino!\\");\\n  pause();\\n  if (state.res === acc) {\\n    state.pos += 1;\\n    acc += state.M[state.pos];\\n    pause();\\n  }\\n}","nextStatement":null,"previousStatement":null},{"type":"termina","message0":"termina","inputsInline":true,"colour":20,"tooltip":"riporta il cestino a casa","helpUrl":"","js":"if (state.res < state.sol) exit(false, \\"potevi raccogliere più mele!\\");\\nexit(true, \\"hai raccolto più mele possibile, complimenti!\\");","previousStatement":null}]`),ae=JSON.parse('[{"N":2,"M":[5,5],"C":10,"pos":0,"tot":10,"sol":10,"res":0},{"N":2,"M":[6,8],"C":8,"pos":0,"tot":14,"sol":8,"res":0},{"N":3,"M":[5,4,5],"C":19,"pos":0,"tot":14,"sol":14,"res":0},{"N":4,"M":[8,5,8,5],"C":10,"pos":0,"tot":26,"sol":10,"res":0}]');function le({variables:t,state:i}){var a=0;let o=i.pos*25+7;return e.jsxs(e.Fragment,{children:[e.jsxs(v,{gravity:"bottom",scale:10,children:[p(i.N).flatMap(n=>e.jsx(u,{src:N,alt:"Albero",x:n*25+10,y:0,className:"origin-bottom"},`albero${n}`)),e.jsx(u,{src:k,alt:"Tip-Tap",x:o,y:4,follow:!0},"tiptap"),p(i.N).flatMap(n=>p(i.M[n]).map(l=>(a+=1,e.jsx(u,{src:_,alt:"Mela",x:a<=i.res?3.4+(a-1)%3+o:n*25+12+22*l/i.M[n],y:a<=i.res?2.3+Math.floor((a-1)/3)*1.5:17+(5*l+n)%7,className:"origin-bottom"},`mela${n}-${l}`)))),e.jsx(u,{src:M,alt:"Cestino",x:o+3,y:i.C*.3-.7,scaleY:(i.C+1)*.1},"cestino")]}),e.jsx(y,{variables:{...t,"N (num. alberi)":i.N,"C (max. cestino)":i.C,"Mele raccolte":i.res}})]})}function I(t){const i={em:"em",li:"li",p:"p",span:"span",strong:"strong",ul:"ul",...P(),...t.components},{Blockly:a,Code:o,Equation:n,Explanation:l,Image:s,SubProblem:c}=i;return a||b("Blockly"),o||b("Code"),n||b("Equation"),l||b("Explanation"),s||b("Image"),c||b("SubProblem"),e.jsxs(c,{children:[e.jsx(i.p,{children:`Dopo l’ultimo raccolto, alcune altre mele sono maturate! Stavolta, però, ogni albero ha un numero diverso di mele.
Hai a disposizione questi blocchi:`}),e.jsxs(i.ul,{children:[`
`,e.jsxs(i.li,{children:[e.jsx(o,{code:String.raw`N`,inline:!0,lang:"text",className:"p-0 text-base"}),": il numero di alberi di mele."]}),`
`,e.jsxs(i.li,{children:[e.jsx(o,{code:String.raw`mele prossimo albero`,inline:!0,lang:"text",className:"p-0 text-base"}),": il numero di mele nell’albero di fronte a Tip-Tap ",e.jsx(i.strong,{children:"(nuovo!)"}),"."]}),`
`,e.jsxs(i.li,{children:[e.jsx(o,{code:String.raw`avanza`,inline:!0,lang:"text",className:"p-0 text-base"}),": Tip-Tap avanza superando l’albero che ha ora di fronte ",e.jsx(i.strong,{children:"(nuovo!)"}),"."]}),`
`,e.jsxs(i.li,{children:[e.jsx(o,{code:String.raw`C`,inline:!0,lang:"text",className:"p-0 text-base"}),": il numero massimo di mele che può contenere il cestino."]}),`
`,e.jsxs(i.li,{children:[e.jsx(o,{code:String.raw`raccogli`,inline:!0,lang:"text",className:"p-0 text-base"})," ",e.jsx(n,{children:String.raw`x`})," ",e.jsx(o,{code:String.raw`mele`,inline:!0,lang:"text",className:"p-0 text-base"}),": raccogli ",e.jsx(n,{children:String.raw`x`})," mele dagli alberi, mettendole nel cestino."]}),`
`,e.jsxs(i.li,{children:[e.jsx(o,{code:String.raw`termina`,inline:!0,lang:"text",className:"p-0 text-base"}),": riporta il cestino a casa."]}),`
`]}),e.jsx(i.p,{children:"Aiuta Tip-Tap a raccogliere più mele possibile, senza sfondare il suo cestino!"}),e.jsxs(i.p,{children:["Per risolvere questo problema, dovrai usare una nuova categoria di blocchi: le ",e.jsx(i.em,{children:"“Variabili”"}),`.
Le variabili sono dei contenitori in cui puoi memorizzare dei numeri, per poi riusarli e modificarli
in seguito. Quando inizi a fare un nuovo programma, non ci sono variabili: devi aggiungerle
tu quando ti servono, cliccando su `,e.jsx(i.em,{children:"“crea variabile”"})," nella sezione ",e.jsx(i.em,{children:"“Variabili”"}),`. Potrai quindi
scegliere un nome da dare alla tua variabile: scegli pure quello che preferisci, ma è meglio
se il nome che gli dai ti aiuta a ricordarti quale valore ci vuoi mettere dentro!`]}),e.jsxs(i.p,{children:["Una volta creata una variabile, vedrai comparire alcuni blocchi nella sezione ",e.jsx(i.em,{children:"“Variabili”"}),":"]}),e.jsxs(i.ul,{children:[`
`,e.jsxs(i.li,{children:["il blocco istruzione ",e.jsxs(i.strong,{children:["imposta ",e.jsx(i.em,{children:"variabile"})," a ",e.jsx(i.em,{children:"valore"})]}),", con cui puoi memorizzare un valore nella variabile;"]}),`
`,e.jsxs(i.li,{children:["il blocco istruzione ",e.jsxs(i.strong,{children:["cambia ",e.jsx(i.em,{children:"variabile"})," di ",e.jsx(i.em,{children:"valore"})]}),", con cui puoi sommare un valore al contenuto attuale della variabile;"]}),`
`,e.jsx(i.li,{children:"un blocco numerico con il nome della variabile, per leggerne il suo contenuto."}),`
`]}),e.jsxs(i.p,{children:[`Quando crei una variabile, ricordati di darle un valore iniziale prima di usarla nel tuo programma!
Se non sai che valore darle, considera che il numero zero è un buon valore iniziale se prevedi di
poi modificarla con il blocco “cambia `,e.jsx(i.em,{children:"variabile"})," di ",e.jsx(i.em,{children:"valore"}),"”."]}),e.jsxs(i.p,{children:[`Inoltre, quando imposti un nuovo valore ad una variabile, puoi anche usare il suo vecchio valore
per decidere il nuovo valore da darle. In effetti, il blocco `,e.jsxs(i.strong,{children:["cambia ",e.jsx(i.em,{children:"variabile"})," di ",e.jsx(i.em,{children:"valore"})]}),`
è equivalente ai blocchi:`]}),e.jsx(i.p,{children:e.jsx(s,{alt:"cambia",src:typeof z=="function"?z(_variant):z})}),e.jsx(m,{label:"suggerimento 1",children:e.jsxs(i.p,{children:["Nella scorsa domanda il numero totale di mele era ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`N \times M`}),"."]}),`
Con una variabile e un ciclo, riesci a calcolare quante mele ci sono in totale ora,
per poi sfruttare la soluzione della domanda precedente?`]})}),e.jsx(m,{label:"suggerimento 2",children:e.jsxs(i.p,{children:["Se inserisci un blocco ",e.jsx(i.em,{children:"“cambia variabile”"}),` in un ciclo, la variabile verrà cambiata a ogni
ripetizione del ciclo, a partire dall’ultimo valore registrato. Come puoi sfruttare questa cosa?`]})}),e.jsx(a,{toolbox:ne,customBlocks:oe,initialBlocks:te,testcases:ae,visualizer:le}),e.jsxs(l,{children:[e.jsx(i.p,{children:"Un possibile programma corretto è il seguente:"}),e.jsx(i.p,{children:e.jsx(s,{alt:"soluzione",src:typeof C=="function"?C(_variant):C})}),e.jsx(i.p,{children:`Innanzitutto, Tip-Tap scorre tutti gli alberi, aggiungendo il numero di mele di ciascun albero alla
variabile somma, che inizialmente vale zero.`}),e.jsx(i.p,{children:"Poi, decide quante mele raccogliere tra la somma e C, come nella domanda precedente."})]}),e.jsxs(i.p,{children:["Prima di passare alla prossima domanda, assicurati di aver risolto ",e.jsx(i.strong,{children:"tutti i livelli"})," di questa!"]})]})}function re(t={}){const{wrapper:i}={...P(),...t.components};return i?e.jsx(i,{...t,children:e.jsx(I,{...t})}):I(t)}function b(t,i){throw new Error("Expected component `"+t+"` to be defined: you likely forgot to import, pass, or provide it.")}function L(){return{...f()}}const U={src:new URL("../e/e0121b6d-sol.webp",import.meta.url).href,width:1036,height:1167};const se={kind:"categoryToolbox",contents:[{kind:"category",name:"Variabili",categorystyle:"variable_category",custom:"VARIABLE"},{kind:"category",name:"Matematica",categorystyle:"math_category",contents:[{kind:"block",type:"math_number",fields:{NUM:123}},{kind:"block",type:"math_arithmetic",fields:{OP:"ADD"}}]},{kind:"category",name:"Logica",categorystyle:"logic_category",contents:[{kind:"block",type:"logic_compare"},{kind:"block",type:"logic_operation"},{kind:"block",type:"logic_negate"},{kind:"block",type:"controls_if"},{kind:"block",type:"controls_if",extraState:{hasElse:"true"}}]},{kind:"category",name:"Cicli",categorystyle:"loop_category",contents:[{kind:"block",type:"controls_repeat_ext",inputs:{TIMES:{block:{type:"math_number",fields:{NUM:10}}}}},{kind:"block",type:"controls_whileUntil"},{kind:"block",type:"controls_for",fields:{VAR:"i"},inputs:{FROM:{block:{type:"math_number",fields:{NUM:1}}},TO:{block:{type:"math_number",fields:{NUM:10}}},BY:{block:{type:"math_number",fields:{NUM:1}}}}}]}]},ce=JSON.parse('{"blocks":{"languageVersion":0,"blocks":[{"type":"start","id":"y=zq)Uya2A/{vyOtN[i6","x":61,"y":81}]},"variables":[]}'),ue=JSON.parse(`[{"type":"start","message0":"inizia qui","inputsInline":true,"colour":20,"tooltip":"L'esecuzione inizia da qui","helpUrl":"","maxInstances":1,"js":"","nextStatement":null},{"type":"N","message0":"N","inputsInline":true,"colour":20,"tooltip":"numero di alberi di mele","helpUrl":"","js":["state.N",1.2],"output":"Number"},{"type":"mele albero","message0":"mele albero %1","args0":[{"type":"input_value","check":"Number","min":["1",0],"integer":true,"name":"_ARG0"}],"inputsInline":true,"colour":20,"tooltip":"numero di mele nell'albero i-esimo","helpUrl":"","js":["state.N < _ARG0 ? exit(false, \\"non esiste l'albero numero \\" + _ARG0) : state.M[_ARG0-1]",15],"output":"Number"},{"type":"K","message0":"K","inputsInline":true,"colour":20,"tooltip":"numero di cestini che ha Tip-Tap","helpUrl":"","js":["state.K",1.2],"output":"Number"},{"type":"capienza cestino","message0":"capienza cestino","inputsInline":true,"colour":20,"tooltip":"il numero massimo di mele che può contenere il cestino corrente","helpUrl":"","js":["state.basket == state.K ? exit(false, \\"hai finito i cestini\\") : state.C[state.basket]",15],"output":"Number"},{"type":"prossimo cestino","message0":"prossimo cestino","inputsInline":true,"colour":20,"tooltip":"passa al prossimo cestino","helpUrl":"","js":"if (state.basket == state.K) exit(false, \\"hai finito i cestini\\");\\nstate.basket += 1;","nextStatement":null,"previousStatement":null},{"type":"raccogli mele","message0":"raccogli %1 mele","args0":[{"type":"input_value","check":"Number","min":["0",0],"integer":true,"name":"_ARG0"}],"inputsInline":true,"colour":20,"tooltip":"raccogli alcune mele dagli alberi, mettendole nel cestino","helpUrl":"","js":"if (state.basket == state.K) exit(false, \\"hai finito i cestini\\");\\nvar acc = 0;\\nfor (var i = 0; i <= state.pos; i++) acc += state.M[i];\\nfor (var i = 0; i < _ARG0; i++) {\\n  if (state.res == state.tot) exit(false, \\"non ci sono così tante mele sugli alberi!\\");\\n  state.res += 1;\\n  state.apples[state.basket] += 1;\\n  if (state.apples[state.basket] > state.C[state.basket]) exit(false, \\"hai raccolto troppe mele e sfondato il cestino!\\");\\n  pause();\\n  if (state.res === acc) {\\n    state.pos += 1;\\n    acc += state.M[state.pos];\\n    pause();\\n  }\\n}","nextStatement":null,"previousStatement":null},{"type":"termina","message0":"termina","inputsInline":true,"colour":20,"tooltip":"riporta il cestino a casa","helpUrl":"","js":"if (state.res < state.sol) exit(false, \\"potevi raccogliere più mele!\\");\\nexit(true, \\"hai raccolto più mele possibile, complimenti!\\");","previousStatement":null}]`),pe=JSON.parse('[{"N":2,"M":[8,5],"K":3,"C":[1,5,8],"tot":13,"sol":13,"res":0,"pos":0,"basket":0,"apples":[0,0,0]},{"N":2,"M":[5,8],"K":3,"C":[8,6,4],"tot":13,"sol":13,"res":0,"pos":0,"basket":0,"apples":[0,0,0]},{"N":3,"M":[6,3,4],"K":2,"C":[13,2],"tot":13,"sol":13,"res":0,"pos":0,"basket":0,"apples":[0,0]},{"N":4,"M":[6,8,4,6],"K":3,"C":[10,4,3],"tot":24,"sol":17,"res":0,"pos":0,"basket":0,"apples":[0,0,0]}]');function me({variables:t,state:i}){var a=0,o=0,n=0;let l=i.pos*25+7;function s(r){return r==i.basket?l+3:r<i.basket?8+6*r:6-4.5*(r-i.basket)}function c(r){let d=i.C[r]*.3-.7;return r==i.basket?d:r<i.basket?d-4:d+4}return e.jsxs(e.Fragment,{children:[e.jsxs(v,{gravity:"bottom",scale:10,children:[p(i.N).flatMap(r=>e.jsx(u,{src:N,alt:"Albero",x:r*25+10,y:0,className:"origin-bottom"},`albero${r}`)),e.jsx(u,{src:k,alt:"Tip-Tap",x:l,y:4,follow:!0},"tiptap"),p(i.N).flatMap(r=>p(i.M[r]).map(d=>(n+=1,n>a+i.apples[o]&&(a+=i.apples[o],o+=1),e.jsx(u,{src:_,alt:"Mela",x:n<=i.res?s(o)+(n-a-1)%3+.4:r*25+12+22*d/i.M[r],y:n<=i.res?2.3+Math.floor((n-a-1)/3)*1.5-(o<i.basket?4:0):17+(5*d+r)%7,className:"origin-bottom"},`mela${r}-${d}`)))),p(i.K).flatMap(r=>e.jsx(u,{src:M,alt:"Cestino",x:s(r),y:c(r),scaleY:(i.C[r]+1)*.1},`cestino-${r}`))]}),e.jsx(y,{variables:{...t,"N (num. alberi)":i.N,"K (num. cestini)":i.K,"Mele raccolte":i.res}})]})}function $(t){const i={em:"em",li:"li",p:"p",span:"span",strong:"strong",ul:"ul",...L(),...t.components},{Blockly:a,Code:o,Equation:n,Explanation:l,Image:s,SubProblem:c}=i;return a||j("Blockly"),o||j("Code"),n||j("Equation"),l||j("Explanation"),s||j("Image"),c||j("SubProblem"),e.jsxs(c,{children:[e.jsx(i.p,{children:`È l’ora di un ultimo raccolto di mele per Tip-Tap!
Ogni albero ha di nuovo un numero diverso di mele, e Tip-Tap riesce ancora a contare le mele da lontano.
Stavolta, tuttavia, Tip-Tap ha diversi cestini, ognuno con una sua capienza massima.
Hai a disposizione questi blocchi:`}),e.jsxs(i.ul,{children:[`
`,e.jsxs(i.li,{children:[e.jsx(o,{code:String.raw`N`,inline:!0,lang:"text",className:"p-0 text-base"}),": il numero di alberi di mele."]}),`
`,e.jsxs(i.li,{children:[e.jsx(o,{code:String.raw`mele albero`,inline:!0,lang:"text",className:"p-0 text-base"})," ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`x`}),":"]})," il numero di mele nell’albero ",e.jsxs(i.span,{className:"inline-block whitespace-nowrap",children:[e.jsx(n,{children:String.raw`x`}),"-esimo."]})]}),`
`,e.jsxs(i.li,{children:[e.jsx(o,{code:String.raw`K`,inline:!0,lang:"text",className:"p-0 text-base"}),": il numero di cestini che ha Tip-Tap ",e.jsx(i.strong,{children:"(nuovo!)"}),"."]}),`
`,e.jsxs(i.li,{children:[e.jsx(o,{code:String.raw`capienza cestino`,inline:!0,lang:"text",className:"p-0 text-base"}),": il numero massimo di mele che può contenere il cestino corrente ",e.jsx(i.strong,{children:"(nuovo!)"}),"."]}),`
`,e.jsxs(i.li,{children:[e.jsx(o,{code:String.raw`prossimo cestino`,inline:!0,lang:"text",className:"p-0 text-base"}),": passa al prossimo cestino ",e.jsx(i.strong,{children:"(nuovo!)"}),"."]}),`
`,e.jsxs(i.li,{children:[e.jsx(o,{code:String.raw`raccogli`,inline:!0,lang:"text",className:"p-0 text-base"})," ",e.jsx(n,{children:String.raw`x`})," ",e.jsx(o,{code:String.raw`mele`,inline:!0,lang:"text",className:"p-0 text-base"}),": raccogli ",e.jsx(n,{children:String.raw`x`})," mele dagli alberi, mettendole nel cestino corrente."]}),`
`,e.jsxs(i.li,{children:[e.jsx(o,{code:String.raw`termina`,inline:!0,lang:"text",className:"p-0 text-base"}),": termina la raccolta."]}),`
`]}),e.jsx(i.p,{children:`Aiuta di nuovo Tip-Tap a raccogliere più mele possibile senza sfondare nessun cestino.
Questa volta non ci sono nuovi blocchi che ti serve usare: basta padroneggiare quelli che già hai visto
nelle domande precedenti!`}),e.jsx(m,{label:"suggerimento 1",children:e.jsxs(i.p,{children:[`Cerca di riutilizzare la soluzione della domanda precedente.
Dove serve modificare il programma per considerare `,e.jsx(n,{children:String.raw`K`})," cestini invece che uno solo?"]})}),e.jsx(m,{label:"suggerimento 2",children:e.jsx(i.p,{children:`Ogni volta che consideri un cestino, devi decidere quante mele raccogliere in quel cestino.
In che modo bisogna modificare il totale di mele rimanenti sugli alberi, dopo aver fatto la raccolta?`})}),e.jsx(m,{label:"suggerimento 3",children:e.jsxs(i.p,{children:[`Ricorda che puoi modificare il valore delle variabili anche all’interno di un ciclo,
usando anche formule matematiche o blocchi condizionali del tipo `,e.jsx(i.em,{children:"“se… fai… altrimenti”"}),`,
a seconda di cosa ti serve!`]})}),e.jsx(a,{toolbox:se,customBlocks:ue,initialBlocks:ce,testcases:pe,visualizer:me}),e.jsxs(l,{children:[e.jsx(i.p,{children:"Un possibile programma corretto è il seguente:"}),e.jsx(i.p,{children:e.jsx(s,{alt:"soluzione",src:typeof U=="function"?U(_variant):U})}),e.jsxs(i.p,{children:[`Come nella domanda precedente, innanzitutto Tip-Tap conta il numero totale di mele
con un ciclo contatore. Poi itera su tutti e `,e.jsx(n,{children:String.raw`K`}),` i cestini, ogni volta considerando
se il numero di mele rimaste sugli alberi (nella variabile `,e.jsx(i.em,{children:"somma"}),`) sia più piccolo
o meno della capienza del cestino corrente. Come nelle domande precedenti, raccoglie
quindi mele pari al minore dei due numeri. Inoltre, questa volta aggiorna anche la
variabile `,e.jsx(i.em,{children:"somma"}),` togliendoci il numero di mele che sono state raccolte, prima di
passare al cestino successivo.`]})]})]})}function de(t={}){const{wrapper:i}={...L(),...t.components};return i?e.jsx(i,{...t,children:e.jsx($,{...t})}):$(t)}function j(t,i){throw new Error("Expected component `"+t+"` to be defined: you likely forgot to import, pass, or provide it.")}function D(){return{...f(),S1MeleSingolo:Q,S3MeleFor:ie,S2MeleMultiplo:re,S4MeleFinale:de}}function A(t){const{Contest:i,Problem:a,S1MeleSingolo:o,S2MeleMultiplo:n,S3MeleFor:l,S4MeleFinale:s,Section:c}={...D(),...t.components};return i||g("Contest"),a||g("Problem"),o||g("S1MeleSingolo"),n||g("S2MeleMultiplo"),l||g("S3MeleFor"),s||g("S4MeleFinale"),c||g("Section"),e.jsx(i,{children:e.jsxs(c,{children:[e.jsx(a,{points:[5,0,0],id:1,children:e.jsx(o,{})}),e.jsx(a,{points:[5,0,0],id:2,children:e.jsx(n,{})}),e.jsx(a,{points:[5,0,0],id:3,children:e.jsx(l,{})}),e.jsx(a,{points:[5,0,0],id:4,children:e.jsx(s,{})})]})})}function ge(t={}){const{wrapper:i}={...D(),...t.components};return i?e.jsx(i,{...t,children:e.jsx(A,{...t})}):A(t)}function g(t,i){throw new Error("Expected component `"+t+"` to be defined: you likely forgot to import, pass, or provide it.")}function O(){return{...f()}}function R(t){const i={em:"em",h1:"h1",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...O(),...t.components};return e.jsxs(e.Fragment,{children:[e.jsx(i.h1,{children:"Corso di Programmazione a Blocchi"}),`
`,e.jsx(i.h2,{children:"Lezione 4 - Blocchi Matematici e Variabili"}),`
`,e.jsx(i.p,{children:"Bentornato nel corso di programmazione a blocchi per la preparazione ai Giochi di Fibonacci!"}),`
`,e.jsx(i.p,{children:"Questa è la quarta lezione, in cui ti faremo vedere:"}),`
`,e.jsxs(i.ul,{children:[`
`,e.jsx(i.li,{children:"i blocchi di tipo “matematica”;"}),`
`,e.jsx(i.li,{children:"il blocco logico per confrontare valori numerici;"}),`
`,e.jsx(i.li,{children:"le variabili;"}),`
`,e.jsx(i.li,{children:"il ciclo contatore."}),`
`]}),`
`,e.jsx(i.p,{children:"Se non l’avessi ancora fatto, ti invitiamo a completare le lezioni precedenti prima di iniziare questa (anche se pensi di conoscere già quegli argomenti!)."}),`
`,e.jsx(i.h2,{children:"Punteggio e struttura delle lezioni"}),`
`,e.jsxs(i.p,{children:["Le lezioni di questo corso contengono alcuni problemi di programmazione a blocchi, da risolvere in al massimo ",e.jsx(i.em,{children:"4 giorni"}),". Appena avrai finito di lavorarci, potrai cliccare su “Termina” per vedere subito un riepilogo del punteggio che hai ottenuto, e le soluzioni spiegate di tutti i problemi! Se anche non lo farai, la lezione verrà terminata automaticamente dopo 4 giorni. Potrai comunque ricominciare la lezione quante volte vuoi, cliccando sul tasto “Ricomincia” (freccia curva che torna indietro)."]}),`
`,e.jsxs(i.p,{children:["I problemi richiedono di scrivere un ",e.jsx(i.strong,{children:"singolo"})," programma a blocchi, che viene valutato ",e.jsx(i.strong,{children:"contemporaneamente"}),` su più livelli.
Quindi attenzione che non puoi scrivere programmi diversi per i diversi livelli, ma uno solo!
Per ciascun livello correttamente risolto di ciascun problema, otterrai `,e.jsx(i.em,{children:"5 punti"}),"."]}),`
`,e.jsxs(i.p,{children:["Quando termini la lezione, ti consigliamo di ",e.jsx(i.strong,{children:"leggere tutte le soluzioni spiegate"}),`, anche dei problemi che avevi
già risolto correttamente: potresti scoprire modi diversi di risolvere quegli stessi problemi, e dei suggerimenti
che ti potrebbero tornare utili per altri problemi simili che troverai in futuro!`]})]})}function xe(t={}){const{wrapper:i}={...O(),...t.components};return i?e.jsx(i,{...t,children:e.jsx(R,{...t})}):R(t)}const ve={title:"Corso di Programmazione",description:"Corso di Programmazione a Blocchi per i Giochi di Fibonacci"};function ye(){return e.jsxs(V,{contestLongName:"",contestName:"Corso di Programmazione",duration:5760,children:[e.jsx(xe,{}),e.jsx(ge,{})]})}export{ye as default,ve as metadata};
//# sourceMappingURL=ce0e8b40-page.js.map
