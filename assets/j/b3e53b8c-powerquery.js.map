{"version":3,"file":"b3e53b8c-powerquery.js","sources":["../../../node_modules/shiki/dist/langs/powerquery.mjs"],"sourcesContent":["const lang = Object.freeze({ \"displayName\": \"PowerQuery\", \"fileTypes\": [\"pq\", \"pqm\"], \"name\": \"powerquery\", \"patterns\": [{ \"include\": \"#Noise\" }, { \"include\": \"#LiteralExpression\" }, { \"include\": \"#Keywords\" }, { \"include\": \"#ImplicitVariable\" }, { \"include\": \"#IntrinsicVariable\" }, { \"include\": \"#Operators\" }, { \"include\": \"#DotOperators\" }, { \"include\": \"#TypeName\" }, { \"include\": \"#RecordExpression\" }, { \"include\": \"#Punctuation\" }, { \"include\": \"#QuotedIdentifier\" }, { \"include\": \"#Identifier\" }], \"repository\": { \"BlockComment\": { \"begin\": \"/\\\\*\", \"end\": \"\\\\*/\", \"name\": \"comment.block.powerquery\" }, \"DecimalNumber\": { \"match\": \"(?<![\\\\d\\\\w])(\\\\d*\\\\.\\\\d+)\\\\b\", \"name\": \"constant.numeric.decimal.powerquery\" }, \"DotOperators\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.ellipsis.powerquery\" }, \"2\": { \"name\": \"keyword.operator.list.powerquery\" } }, \"match\": \"(?<!\\\\.)(?:(\\\\.\\\\.\\\\.)|(\\\\.\\\\.))(?!\\\\.)\" }, \"EscapeSequence\": { \"begin\": \"#\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.escapesequence.begin.powerquery\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.escapesequence.end.powerquery\" } }, \"name\": \"constant.character.escapesequence.powerquery\", \"patterns\": [{ \"match\": \"(#|\\\\h{4}|\\\\h{8}|cr|lf|tab)(?:,(#|\\\\h{4}|\\\\h{8}|cr|lf|tab))*\" }, { \"match\": \"[^\\\\)]\", \"name\": \"invalid.illegal.escapesequence.powerquery\" }] }, \"FloatNumber\": { \"match\": \"(\\\\d*\\\\.)?\\\\d+(e|E)(\\\\+|-)?\\\\d+\", \"name\": \"constant.numeric.float.powerquery\" }, \"HexNumber\": { \"match\": \"0(x|X)\\\\h+\", \"name\": \"constant.numeric.integer.hexadecimal.powerquery\" }, \"Identifier\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.inclusiveidentifier.powerquery\" }, \"2\": { \"name\": \"entity.name.powerquery\" } }, \"match\": \"(?:(?<![\\\\._\\\\p{Lu}\\\\p{Ll}\\\\p{Lt}\\\\p{Lm}\\\\p{Lo}\\\\p{Nl}\\\\p{Nd}\\\\p{Pc}\\\\p{Mn}\\\\p{Mc}\\\\p{Cf}])(@?)([_\\\\p{Lu}\\\\p{Ll}\\\\p{Lt}\\\\p{Lm}\\\\p{Lo}\\\\p{Nl}][_\\\\p{Lu}\\\\p{Ll}\\\\p{Lt}\\\\p{Lm}\\\\p{Lo}\\\\p{Nl}\\\\p{Nd}\\\\p{Pc}\\\\p{Mn}\\\\p{Mc}\\\\p{Cf}]*(?:\\\\.[_\\\\p{Lu}\\\\p{Ll}\\\\p{Lt}\\\\p{Lm}\\\\p{Lo}\\\\p{Nl}][_\\\\p{Lu}\\\\p{Ll}\\\\p{Lt}\\\\p{Lm}\\\\p{Lo}\\\\p{Nl}\\\\p{Nd}\\\\p{Pc}\\\\p{Mn}\\\\p{Mc}\\\\p{Cf}])*)\\\\b)\" }, \"ImplicitVariable\": { \"match\": \"\\\\b_\\\\b\", \"name\": \"keyword.operator.implicitvariable.powerquery\" }, \"InclusiveIdentifier\": { \"captures\": { \"0\": { \"name\": \"inclusiveidentifier.powerquery\" } }, \"match\": \"@\" }, \"IntNumber\": { \"captures\": { \"1\": { \"name\": \"constant.numeric.integer.powerquery\" } }, \"match\": \"\\\\b(\\\\d+)\\\\b\" }, \"IntrinsicVariable\": { \"captures\": { \"1\": { \"name\": \"constant.language.intrinsicvariable.powerquery\" } }, \"match\": \"(?<![\\\\d\\\\w])(#sections|#shared)\\\\b\" }, \"Keywords\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.word.logical.powerquery\" }, \"2\": { \"name\": \"keyword.control.conditional.powerquery\" }, \"3\": { \"name\": \"keyword.control.exception.powerquery\" }, \"4\": { \"name\": \"keyword.other.powerquery\" }, \"5\": { \"name\": \"keyword.powerquery\" } }, \"match\": \"\\\\b(?:(and|or|not)|(if|then|else)|(try|otherwise)|(as|each|in|is|let|meta|type|error)|(section|shared))\\\\b\" }, \"LineComment\": { \"match\": \"//.*\", \"name\": \"comment.line.double-slash.powerquery\" }, \"LiteralExpression\": { \"patterns\": [{ \"include\": \"#String\" }, { \"include\": \"#NumericConstant\" }, { \"include\": \"#LogicalConstant\" }, { \"include\": \"#NullConstant\" }, { \"include\": \"#FloatNumber\" }, { \"include\": \"#DecimalNumber\" }, { \"include\": \"#HexNumber\" }, { \"include\": \"#IntNumber\" }] }, \"LogicalConstant\": { \"match\": \"\\\\b(true|false)\\\\b\", \"name\": \"constant.language.logical.powerquery\" }, \"Noise\": { \"patterns\": [{ \"include\": \"#BlockComment\" }, { \"include\": \"#LineComment\" }, { \"include\": \"#Whitespace\" }] }, \"NullConstant\": { \"match\": \"\\\\b(null)\\\\b\", \"name\": \"constant.language.null.powerquery\" }, \"NumericConstant\": { \"captures\": { \"1\": { \"name\": \"constant.language.numeric.float.powerquery\" } }, \"match\": \"(?<![\\\\d\\\\w])(#infinity|#nan)\\\\b\" }, \"Operators\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.function.powerquery\" }, \"2\": { \"name\": \"keyword.operator.assignment-or-comparison.powerquery\" }, \"3\": { \"name\": \"keyword.operator.comparison.powerquery\" }, \"4\": { \"name\": \"keyword.operator.combination.powerquery\" }, \"5\": { \"name\": \"keyword.operator.arithmetic.powerquery\" }, \"6\": { \"name\": \"keyword.operator.sectionaccess.powerquery\" }, \"7\": { \"name\": \"keyword.operator.optional.powerquery\" } }, \"match\": \"(=>)|(=)|(<>|<|>|<=|>=)|(&)|(\\\\+|-|\\\\*|\\\\/)|(!)|(\\\\?)\" }, \"Punctuation\": { \"captures\": { \"1\": { \"name\": \"punctuation.separator.powerquery\" }, \"2\": { \"name\": \"punctuation.section.parens.begin.powerquery\" }, \"3\": { \"name\": \"punctuation.section.parens.end.powerquery\" }, \"4\": { \"name\": \"punctuation.section.braces.begin.powerquery\" }, \"5\": { \"name\": \"punctuation.section.braces.end.powerquery\" } }, \"match\": \"(,)|(\\\\()|(\\\\))|({)|(})\" }, \"QuotedIdentifier\": { \"begin\": '#\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.quotedidentifier.begin.powerquery\" } }, \"end\": '\"(?!\")', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.quotedidentifier.end.powerquery\" } }, \"name\": \"entity.name.powerquery\", \"patterns\": [{ \"match\": '\"\"', \"name\": \"constant.character.escape.quote.powerquery\" }, { \"include\": \"#EscapeSequence\" }] }, \"RecordExpression\": { \"begin\": \"\\\\[\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.section.brackets.begin.powerquery\" } }, \"contentName\": \"meta.recordexpression.powerquery\", \"end\": \"\\\\]\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.section.brackets.end.powerquery\" } }, \"patterns\": [{ \"include\": \"$self\" }] }, \"String\": { \"begin\": '\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.powerquery\" } }, \"end\": '\"(?!\")', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.powerquery\" } }, \"name\": \"string.quoted.double.powerquery\", \"patterns\": [{ \"match\": '\"\"', \"name\": \"constant.character.escape.quote.powerquery\" }, { \"include\": \"#EscapeSequence\" }] }, \"TypeName\": { \"captures\": { \"1\": { \"name\": \"storage.modifier.powerquery\" }, \"2\": { \"name\": \"storage.type.powerquery\" } }, \"match\": \"\\\\b(?:(optional|nullable)|(action|any|anynonnull|binary|date|datetime|datetimezone|duration|function|list|logical|none|null|number|record|table|text|type))\\\\b\" }, \"Whitespace\": { \"match\": \"\\\\s+\" } }, \"scopeName\": \"source.powerquery\" });\nvar powerquery = [\n  lang\n];\n\nexport { powerquery as default };\n"],"names":["lang","powerquery"],"mappings":";AAAA,MAAMA,EAAO,OAAO,OAAO,CAAE,YAAe,aAAc,UAAa,CAAC,KAAM,KAAK,EAAG,KAAQ,aAAc,SAAY,CAAC,CAAE,QAAW,QAAQ,EAAI,CAAE,QAAW,oBAAsB,EAAE,CAAE,QAAW,WAAW,EAAI,CAAE,QAAW,mBAAqB,EAAE,CAAE,QAAW,oBAAoB,EAAI,CAAE,QAAW,YAAY,EAAI,CAAE,QAAW,eAAiB,EAAE,CAAE,QAAW,aAAe,CAAE,QAAW,mBAAmB,EAAI,CAAE,QAAW,cAAc,EAAI,CAAE,QAAW,mBAAqB,EAAE,CAAE,QAAW,aAAa,CAAE,EAAG,WAAc,CAAE,aAAgB,CAAE,MAAS,OAAQ,IAAO,OAAQ,KAAQ,0BAA0B,EAAI,cAAiB,CAAE,MAAS,gCAAiC,KAAQ,qCAAqC,EAAI,aAAgB,CAAE,SAAY,CAAE,EAAK,CAAE,KAAQ,sCAAwC,EAAE,EAAK,CAAE,KAAQ,kCAAkC,CAAI,EAAE,MAAS,yCAA2C,EAAE,eAAkB,CAAE,MAAS,OAAQ,cAAiB,CAAE,EAAK,CAAE,KAAQ,wDAA0D,CAAA,EAAI,IAAO,MAAO,YAAe,CAAE,EAAK,CAAE,KAAQ,sDAAwD,CAAA,EAAI,KAAQ,+CAAgD,SAAY,CAAC,CAAE,MAAS,8DAAgE,EAAE,CAAE,MAAS,SAAU,KAAQ,2CAA2C,CAAE,CAAG,EAAE,YAAe,CAAE,MAAS,kCAAmC,KAAQ,qCAAuC,UAAa,CAAE,MAAS,aAAc,KAAQ,iDAAmD,EAAE,WAAc,CAAE,SAAY,CAAE,EAAK,CAAE,KAAQ,iDAAiD,EAAI,EAAK,CAAE,KAAQ,yBAA4B,EAAE,MAAS,0WAA0W,EAAI,iBAAoB,CAAE,MAAS,UAAW,KAAQ,8CAAgD,EAAE,oBAAuB,CAAE,SAAY,CAAE,EAAK,CAAE,KAAQ,gCAAkC,CAAA,EAAI,MAAS,GAAK,EAAE,UAAa,CAAE,SAAY,CAAE,EAAK,CAAE,KAAQ,qCAAuC,CAAA,EAAI,MAAS,cAAc,EAAI,kBAAqB,CAAE,SAAY,CAAE,EAAK,CAAE,KAAQ,gDAAkD,CAAA,EAAI,MAAS,qCAAqC,EAAI,SAAY,CAAE,SAAY,CAAE,EAAK,CAAE,KAAQ,0CAA4C,EAAE,EAAK,CAAE,KAAQ,wCAAwC,EAAI,EAAK,CAAE,KAAQ,wCAA0C,EAAK,CAAE,KAAQ,0BAA4B,EAAE,EAAK,CAAE,KAAQ,oBAAsB,CAAA,EAAI,MAAS,4GAA4G,EAAI,YAAe,CAAE,MAAS,OAAQ,KAAQ,wCAA0C,kBAAqB,CAAE,SAAY,CAAC,CAAE,QAAW,SAAW,EAAE,CAAE,QAAW,kBAAkB,EAAI,CAAE,QAAW,kBAAoB,EAAE,CAAE,QAAW,eAAe,EAAI,CAAE,QAAW,cAAc,EAAI,CAAE,QAAW,gBAAkB,EAAE,CAAE,QAAW,cAAgB,CAAE,QAAW,YAAY,CAAE,CAAG,EAAE,gBAAmB,CAAE,MAAS,qBAAsB,KAAQ,wCAA0C,MAAS,CAAE,SAAY,CAAC,CAAE,QAAW,eAAiB,EAAE,CAAE,QAAW,cAAgB,EAAE,CAAE,QAAW,aAAa,CAAE,CAAC,EAAI,aAAgB,CAAE,MAAS,eAAgB,KAAQ,mCAAmC,EAAI,gBAAmB,CAAE,SAAY,CAAE,EAAK,CAAE,KAAQ,4CAA8C,CAAA,EAAI,MAAS,kCAAkC,EAAI,UAAa,CAAE,SAAY,CAAE,EAAK,CAAE,KAAQ,sCAAwC,EAAE,EAAK,CAAE,KAAQ,sDAAsD,EAAI,EAAK,CAAE,KAAQ,0CAA4C,EAAK,CAAE,KAAQ,yCAA2C,EAAE,EAAK,CAAE,KAAQ,wCAA0C,EAAE,EAAK,CAAE,KAAQ,2CAA2C,EAAI,EAAK,CAAE,KAAQ,sCAAwC,CAAA,EAAI,MAAS,uDAAyD,EAAE,YAAe,CAAE,SAAY,CAAE,EAAK,CAAE,KAAQ,kCAAoC,EAAE,EAAK,CAAE,KAAQ,6CAA6C,EAAI,EAAK,CAAE,KAAQ,6CAA+C,EAAK,CAAE,KAAQ,6CAA+C,EAAE,EAAK,CAAE,KAAQ,2CAA2C,CAAI,EAAE,MAAS,yBAA2B,EAAE,iBAAoB,CAAE,MAAS,KAAM,cAAiB,CAAE,EAAK,CAAE,KAAQ,0DAA0D,GAAM,IAAO,SAAU,YAAe,CAAE,EAAK,CAAE,KAAQ,wDAAwD,CAAI,EAAE,KAAQ,yBAA0B,SAAY,CAAC,CAAE,MAAS,KAAM,KAAQ,4CAA4C,EAAI,CAAE,QAAW,iBAAiB,CAAE,CAAG,EAAE,iBAAoB,CAAE,MAAS,MAAO,cAAiB,CAAE,EAAK,CAAE,KAAQ,+CAAiD,CAAA,EAAI,YAAe,mCAAoC,IAAO,MAAO,YAAe,CAAE,EAAK,CAAE,KAAQ,6CAA+C,CAAA,EAAI,SAAY,CAAC,CAAE,QAAW,OAAS,CAAA,GAAK,OAAU,CAAE,MAAS,IAAK,cAAiB,CAAE,EAAK,CAAE,KAAQ,gDAAkD,CAAA,EAAI,IAAO,SAAU,YAAe,CAAE,EAAK,CAAE,KAAQ,8CAA8C,CAAI,EAAE,KAAQ,kCAAmC,SAAY,CAAC,CAAE,MAAS,KAAM,KAAQ,4CAA8C,EAAE,CAAE,QAAW,iBAAmB,CAAA,CAAG,EAAE,SAAY,CAAE,SAAY,CAAE,EAAK,CAAE,KAAQ,6BAA+B,EAAE,EAAK,CAAE,KAAQ,yBAAyB,CAAI,EAAE,MAAS,gKAAkK,EAAE,WAAc,CAAE,MAAS,MAAM,CAAI,EAAE,UAAa,mBAAqB,CAAA,EAChjM,IAACC,EAAa,CACfD,CACF","x_google_ignoreList":[0]}