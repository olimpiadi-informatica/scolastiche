- type: start
  message0: inizia qui
  nextStatement: null
  colour: 20
  tooltip: L'esecuzione inizia da qui
  helpUrl: ""
  maxInstances: 1
  js: ""

- type: altezza della scatola
  message0: altezza della scatola %1
  args0:
    - type: input_value
      check: Number
  output: Number
  colour: 20
  tooltip: Altezza della scatola i-esima
  helpUrl: ""
  js: |
    (function(i) {
      if (i === undefined) exit(false, "l'argomento del blocco non ha un valore");
      if (i < 1 || i > state.N)
        exit(false, "la scatola " + i + " non esiste");
      state.pos = i-1;
      return state.rot[i-1] ? state.larghezze[i-1] : state.altezze[i-1];
    })(%0)

- type: larghezza della scatola
  message0: larghezza della scatola %1
  args0:
    - type: input_value
      check: Number
  output: Number
  colour: 20
  tooltip: Larghezza della scatola i-esima
  helpUrl: ""
  js: |
    (function(i) {
      if (i === undefined) exit(false, "l'argomento del blocco non ha un valore");
      if (i < 1 || i > state.N)
        exit(false, "la scatola " + i + " non esiste");
      state.pos = i-1;
      return state.rot[i-1] ? state.altezze[i-1] : state.larghezze[i-1];
    })(%0)

- type: ruota la scatola
  message0: ruota la scatola %1
  args0:
    - type: input_value
      check: Number
  previousStatement: null
  nextStatement: null
  colour: 20
  tooltip: Ruota la scatola i-esima
  helpUrl: ""
  js: |
    (function(i) {
      if (i === undefined) exit(false, "l'argomento del blocco non ha un valore");
      if (i < 1 || i > state.N)
        exit(false, "la scatola " + i + " non esiste");
      state.rot[i-1] = !state.rot[i-1];
      state.pos = i-1;
    })(%0);

- type: N
  message0: N
  output: Number
  colour: 20
  tooltip: Numero di scatole
  helpUrl: ""
  js: state.N

- type: riporta altezza
  message0: riporta altezza %1
  args0:
    - type: input_value
      check: Number
  previousStatement: null
  colour: 20
  tooltip: Riporta l'altezza della torre e termina
  helpUrl: ""
  js: |
    (function(t) {
      if (t === undefined) exit(false, "l'argomento del blocco non ha un valore");
      var sum = 0;
      for (var i = 0; i < state.N; i++) {
        if (state.larghezze[i] != state.altezze[i])
          if (state.rot[i] != (state.altezze[i] < state.larghezze[i]))
            exit(false, "la scatola " + (i+1) + " non è ruotata bene");
        sum += state.altezze[i] > state.larghezze[i] ? state.altezze[i] : state.larghezze[i];
      }
      if (sum == t)
        exit(true, "hai fatto la torre più alta, bravo!");
      else
        exit(false, "hai sbagliato a riportare l'altezza");
    })(%0);
