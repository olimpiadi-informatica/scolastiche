- type: start
  message0: inizia qui
  nextStatement: null
  colour: 20
  tooltip: L'esecuzione inizia da qui
  helpUrl: ""
  maxInstances: 1
  js: ""

- type: avanza
  message0: avanza
  previousStatement: null
  nextStatement: null
  colour: 20
  tooltip: Vai avanti
  helpUrl: ""
  js: |
    if(state.pos < state.N && state.door[state.pos] === 1 && !state.open[state.pos]) {
      exit(false, "non puoi avanzare, c\'Ã¨ una porta chiusa");
    }
    state.pos += 1;
    if(state.pos > state.N) {
      exit(false, "hai superato la carota");
    }

- type: vedi porta chiusa
  message0: vedi porta chiusa
  output: Boolean
  colour: 20
  tooltip: vedi porta chiusa
  helpUrl: ""
  js: state.pos < state.N && state.door[state.pos] === 1 && !state.open[state.pos]

- type: N
  message0: N
  output: Number
  colour: 20
  tooltip: distanza iniziale dalla carota
  helpUrl: ""
  js: state.N

- type: apri porta
  message0: apri porta
  previousStatement: null
  nextStatement: null
  colour: 20
  tooltip: apri porta
  helpUrl: ""
  js: |
    if(state.pos === state.N || state.door[state.pos] === 0 || state.open[state.pos]) {
      exit(false, "non ci sono porte da aprire");
    }
    state.open[state.pos] = true;

- type: mangia carota
  message0: mangia carota
  previousStatement: null
  colour: 20
  tooltip: mangia carota
  helpUrl: ""
  js: |
    if(state.pos !== state.N) {
      exit(false, "non ci sono carote da mangiare");
    }
    state.eaten = true;
    exit(true, "hai mangiato la carota, bravo!");
