- type: start
  message0: inizia qui
  nextStatement: null
  colour: 20
  tooltip: L'esecuzione inizia da qui
  helpUrl: ""
  maxInstances: 1
  js: ""

- type: N
  message0: N
  output: Number
  colour: 20
  tooltip: numero di colonnine lungo il percorso
  helpUrl: ""
  js: hiddenState.N

- type: energia
  message0: energia
  output: Number
  colour: 20
  tooltip: energia rimasta
  helpUrl: ""
  js: hiddenState.energy

- type: altitudine della colonnina
  message0: altitudine della colonnina %1
  args0:
    - type: input_value
      value: 0
      check: Number
  output: Number
  colour: 20
  tooltip: altitudine della colonnina i-esima
  helpUrl: ""
  js: |
    (function(i) {
      if (i === undefined) exit(false, "l'argomento del blocco non ha un valore");
      if (i < 1 || i > hiddenState.N || Math.floor(i) != i)
        exit(false, "la colonnina " + i + " non esiste");
      return hiddenState.H[i-1];
    })(%0)

- type: avanza
  message0: avanza
  previousStatement: null
  nextStatement: null
  colour: 20
  tooltip: avanza fino alla prossima colonnina
  helpUrl: ""
  js: |
    hiddenState.charging = false;
    if (hiddenState.posx == hiddenState.N-1)
      exit(false, "sei giÃ  arrivato alla fine");
    delta = hiddenState.H[hiddenState.posx+1] - hiddenState.H[hiddenState.posx];
    hiddenState.rot = Math.atan2(hiddenState.scale * delta, 1);
    pause(1);
    if (hiddenState.energy >= delta) {
      hiddenState.posx += 1;
      hiddenState.posy += hiddenState.scale * delta;
      hiddenState.energy -= delta;
    } else {
      hiddenState.posx += hiddenState.energy / delta;
      hiddenState.posy += hiddenState.scale * hiddenState.energy;
      hiddenState.energy = 0;
      exit(false, "hai finito l'energia prima di arrivare");
    }
    pause(1);
    if (hiddenState.posx < hiddenState.N-1)
      hiddenState.rot = (
        Math.atan2(hiddenState.scale * (hiddenState.H[hiddenState.posx+1] - hiddenState.H[hiddenState.posx]), 1) +
        Math.atan2(hiddenState.scale * (hiddenState.H[hiddenState.posx] - hiddenState.H[hiddenState.posx-1]), 1)
      )/2;
    else hiddenState.rot = 0;

- type: ricarica
  message0: ricarica per %1 minuti
  args0:
    - type: input_value
      value: 0
      check: Number
  previousStatement: null
  nextStatement: null
  colour: 20
  tooltip: ricarica per x minuti
  helpUrl: ""
  js: |
    (function(i) {
      if (i === undefined) exit(false, "l'argomento del blocco non ha un valore");
      if (i < 0 || i > 1000000 || Math.floor(i) != i)
        exit(false, "numero di minuti " + i + " non valido");
      hiddenState.time += i;
      hiddenState.energy += i;
      hiddenState.charging = true;
    })(%0);

- type: termina
  message0: termina
  previousStatement: null
  colour: 20
  tooltip: termina il procedimento
  helpUrl: ""
  js: |
    hiddenState.charging = false;
    if (hiddenState.pos < hiddenState.N-1)
      exit(false, "non sei arrivato alla fine");
    if (hiddenState.time > hiddenState.sol)
      exit(false, "potevi aspettare meno alle colonnine");
    exit(true, "sei arrivato in fretta, complimenti!");
