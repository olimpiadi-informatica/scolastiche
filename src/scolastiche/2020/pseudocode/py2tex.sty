 % chktex-file 37
 % chktex-file 44
 % chktex-file 17
 % chktex-file 36
 % chktex-file 13
 % chktex-file 15
 % chktex-file 29
 % chktex-file 40
 % chktex-file 1
 % chktex-file 8

 \NeedsTeXFormat{LaTeX2e}
 \ProvidesPackage{py2tex}[09/05/2019 v0.0 Macros for py2tex]

 %~~~~~New commands~~~~~%

 %For bold sans serif
 \newcommand \textbs[1]{\textsf{\textbf{#1}}}

 %For large font for Italian keywords decomment the following
 %\algrenewcommand\algorithmicprocedure{{\large\textbf{procedura}}}
 %\algrenewcommand\algorithmicfunction{{\large \textbf{funzione}}}
 %\algrenewcommand\algorithmicif{{\large \textbf{se}}}
 %\algrenewcommand\algorithmicthen{{\large \textbf{allora}}}
 %\algrenewcommand\algorithmicelse{{\large \textbf{altrimenti}}}
 %\algrenewcommand\algorithmicwhile{{\large \textbf{finchè}}}
 %\algrenewcommand\algorithmicdo{{\large \textbf{ripeti}}}
 %\algrenewcommand\algorithmicend{{\large \textbf{fine}}}
 %\algrenewcommand\algorithmicrepeat{{\large \textbf{ripeti}}}
 %\algrenewcommand\algorithmicuntil{{\large \textbf{finchè}}}

 %For Italian keywords decomment the following
 %\algrenewcommand\algorithmicprocedure{{\textbf{procedura}}}
 %\algrenewcommand\algorithmicfunction{{\textbf{funzione}}}
 %\algrenewcommand\algorithmicif{{\textbf{se}}}
 %\algrenewcommand\algorithmicthen{{\textbf{allora}}}
 %\algrenewcommand\algorithmicelse{{\textbf{altrimenti}}}
 %\algrenewcommand\algorithmicwhile{{\textbf{finchè}}}
 %\algrenewcommand\algorithmicdo{{\textbf{ripeti}}}
 %\algrenewcommand\algorithmicend{{\textbf{fine}}}
 %\algrenewcommand\algorithmicrepeat{{\textbf{ripeti}}}
 %\algrenewcommand\algorithmicuntil{{\textbf{finchè}}}
 %\algrenewcommand\algorithmicreturn{\State{{\textbf{restituisci}}}}

 \algrenewcommand\algorithmicprocedure{{\textbs{procedure}}}
 \algrenewcommand\algorithmicfunction{{\textbs{function}}}
 \algrenewcommand\algorithmicif{{\textbs{if}}}
 \algrenewcommand\algorithmicthen{{\textbs{then}}}
 \algrenewcommand\algorithmicelse{{\textbs{else}}}
 \algrenewcommand\algorithmicwhile{{\textbs{while}}}
 \algrenewcommand\algorithmicdo{{\textbs{do}}}
 \algrenewcommand\algorithmicend{{\textbs{end}}}
 \algrenewcommand\algorithmicrepeat{{\textbs{do}}}
 \algrenewcommand\algorithmicuntil{{\textbs{while}}}
 \algrenewcommand\algorithmicreturn{\State{{\textbs{return}}}}


 \algblock[Name]{Start}{End}
 \algblockdefx[NAME]{START}{END}%
 [2][Unknown]{Start #1(#2)}%
 {Ending}
 \algblockdefx[NAME]{}{OTHEREND}%
 [1]{Until (#1)}

 %~~~~~Operators~~~~~%
 \newcommand{\PyAdd}[0]{+}
 \newcommand{\PyAnd}[0]{\textsf{ and }}
 \newcommand{\PyAnnotation}[2]{\ensuremath{\textbs{variable }#1\colon \texttt{#2}}}
 \newcommand{\PyArg}[1]{\texttt{#1}}
 \newcommand{\PyArgAnnotation}[2]{\ensuremath{\texttt{#1} \colon \texttt{#2}}}
 \newcommand{\PyArgSep}[0]{,~}
 \newcommand{\PyAssign}[2]{\ensuremath{#1 \gets #2}}
 \newcommand{\PyAssignSep}[0]{,~}

 \newcommand{\PyCall}[2]{
 \ifnum\pdfstrcmp{#1}{print}=0
 \textbs{output~} { \tt#2} 
 \else
 \textsc{#1}( {\tt#2} )
 \fi
 }
 \newcommand{\PyCallSep}[0]{,~}

 \newcommand{\PyDiv}[0]{\mathop{\texttt{/}}}

 \newcommand{\PyEq}[0]{=}
 \newcommand{\PyExpr}[1]{\ensuremath{#1}}

 \newcommand{\PyFalse}[0]{\texttt{false}}

 \newcommand{\PyGt}[0]{>}
 \newcommand{\PyGtE}[0]{\ge}

 %\newcommand{\PyIn}[0]{}
 %\newcommand{\PyIs}[0]{}
 %\newcommand{\PyIsNot}[0]{}

 \newcommand{\PyList}[1]{[#1]}
 \newcommand{\PyListSep}[0]{, }
 \newcommand{\PyLt}[0]{<}
 \newcommand{\PyLtE}[0]{\le}

 \newcommand{\PyMod}[0]{\mathop{\textsc{mod}}}
 \newcommand{\PyMult}[0]{\times}

 \newcommand{\PyOr}[0]{\textsf{ or }}

 \newcommand{\PyName}[1]{\texttt{#1}}
 %\newcommand{\PyNone}[0]{\textt{}}
 \newcommand{\PyNot}[1]{\texttt{!}#1}
 \newcommand{\PyNotEq}[0]{\neq}
 %\newcommand{\PyNotIn}[0]{}
 \newcommand{\PyNum}[1]{\texttt{#1}}

 \newcommand{\PyPar}[1]{\left ( #1 \right )}
 \newcommand{\PyPow}[0]{\texttt{^}}

 \newcommand{\PyStr}[1]{\texttt{``#1''}}
 \newcommand{\PySub}[0]{-}
 \newcommand{\PySubscript}[2]{#1[#2]}

 \newcommand{\PyTrue}[0]{\texttt{true}}

 \newcommand{\PyUAdd}[1]{+ #1}
 \newcommand{\PyUSub}[1]{- #1}
 